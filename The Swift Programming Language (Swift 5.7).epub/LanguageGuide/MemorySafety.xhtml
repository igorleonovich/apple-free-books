<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Memory Safety</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="memory-safety">
<h1>Memory Safety</h1>
<p>By default, Swift prevents unsafe behavior from happening in your code. For example, Swift ensures that variables are initialized before they’re used, memory isn’t accessed after it’s been deallocated, and array indices are checked for out-of-bounds errors.</p>
<p>Swift also makes sure that multiple accesses to the same area of memory don’t conflict, by requiring code that modifies a location in memory to have exclusive access to that memory. Because Swift manages memory automatically, most of the time you don’t have to think about accessing memory at all. However, it’s important to understand where potential conflicts can occur, so you can avoid writing code that has conflicting access to memory. If your code does contain conflicts, you’ll get a compile-time or runtime error.</p>
<div class="section" id="ID568">
<h2>Understanding Conflicting Access to Memory</h2>
<p>Access to memory happens in your code when you do things like set the value of a variable or pass an argument to a function. For example, the following code contains both a read access and a write access:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="c">// A write access to the memory where one is stored.</span>
</li><li><span class="k">var</span> <span class="nv">one</span> = <span class="m">1</span>
</li><li>
</li><li><span class="c">// A read access from the memory where one is stored.</span>
</li><li><span class="nv">print</span>(<span class="s">&quot;We&#39;re number </span>\<span class="p">(</span><span class="nv">one</span><span class="p">)</span><span class="s">!&quot;</span>)
</li></ol></div></div></div>
<p>A conflicting access to memory can occur when different parts of your code are trying to access the same location in memory at the same time. Multiple accesses to a location in memory at the same time can produce unpredictable or inconsistent behavior. In Swift, there are ways to modify a value that span several lines of code, making it possible to attempt to access a value in the middle of its own modification.</p>
<p>You can see a similar problem by thinking about how you update a budget that’s written on a piece of paper. Updating the budget is a two-step process: First you add the items’ names and prices, and then you change the total amount to reflect the items currently on the list. Before and after the update, you can read any information from the budget and get a correct answer, as shown in the figure below.</p>
<img alt="../_images/memory_shopping_2x.png" class="align-center" src="../_images/memory_shopping_2x.png" style="width: 616.0px;" />
<p>While you’re adding items to the budget, it’s in a temporary, invalid state because the total amount hasn’t been updated to reflect the newly added items. Reading the total amount during the process of adding an item gives you incorrect information.</p>
<p>This example also demonstrates a challenge you may encounter when fixing conflicting access to memory: There are sometimes multiple ways to fix the conflict that produce different answers, and it’s not always obvious which answer is correct. In this example, depending on whether you wanted the original total amount or the updated total amount, either $5 or $320 could be the correct answer. Before you can fix the conflicting access, you have to determine what it was intended to do.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>If you’ve written concurrent or multithreaded code, conflicting access to memory might be a familiar problem. However, the conflicting access discussed here can happen on a single thread and <em>doesn’t</em> involve concurrent or multithreaded code.</p>
<p>If you have conflicting access to memory from within a single thread, Swift guarantees that you’ll get an error at either compile time or runtime. For multithreaded code, use <a class="reference external" href="https://developer.apple.com/documentation/xcode/diagnosing_memory_thread_and_crash_issues_early">Thread Sanitizer</a><span class="link-target"> [https://developer.apple.com/documentation/xcode/diagnosing_memory_thread_and_crash_issues_early]</span> to help detect conflicting access across threads.</p>
</div>
<div class="section" id="ID573">
<h3>Characteristics of Memory Access</h3>
<p>There are three characteristics of memory access to consider in the context of conflicting access: whether the access is a read or a write, the duration of the access, and the location in memory being accessed. Specifically, a conflict occurs if you have two accesses that meet all of the following conditions:</p>
<ul class="simple">
<li><p>At least one is a write access or a nonatomic access.</p></li>
<li><p>They access the same location in memory.</p></li>
<li><p>Their durations overlap.</p></li>
</ul>
<p>The difference between a read and write access is usually obvious: a write access changes the location in memory, but a read access doesn’t. The location in memory refers to what is being accessed—for example, a variable, constant, or property. The duration of a memory access is either instantaneous or long-term.</p>
<p>An operation is <em>atomic</em> if it uses only C atomic operations; otherwise it’s nonatomic. For a list of those functions, see the <code class="docutils literal notranslate"><span class="pre">stdatomic(3)</span></code> man page.</p>
<p>An access is <em>instantaneous</em> if it’s not possible for other code to run after that access starts but before it ends. By their nature, two instantaneous accesses can’t happen at the same time. Most memory access is instantaneous. For example, all the read and write accesses in the code listing below are instantaneous:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">func</span> <span class="nv">oneMore</span>(<span class="nv">than</span> <span class="nv">number</span>: <span class="nc">Int</span>) -&gt; <span class="nc">Int</span> {
</li><li>    <span class="k">return</span> <span class="nv">number</span> + <span class="m">1</span>
</li><li>}
</li><li>
</li><li><span class="k">var</span> <span class="nv">myNumber</span> = <span class="m">1</span>
</li><li><span class="nv">myNumber</span> = <span class="nv">oneMore</span>(<span class="nv">than</span>: <span class="nv">myNumber</span>)
</li><li><span class="nv">print</span>(<span class="nv">myNumber</span>)
</li><li><span class="c">// Prints &quot;2&quot;</span>
</li></ol></div></div></div>
<p>However, there are several ways to access memory, called <em>long-term</em> accesses, that span the execution of other code. The difference between instantaneous access and long-term access is that it’s possible for other code to run after a long-term access starts but before it ends, which is called <em>overlap</em>. A long-term access can overlap with other long-term accesses and instantaneous accesses.</p>
<p>Overlapping accesses appear primarily in code that uses in-out parameters in functions and methods or mutating methods of a structure. The specific kinds of Swift code that use long-term accesses are discussed in the sections below.</p>
</div>
</div>
<div class="section" id="ID569">
<h2>Conflicting Access to In-Out Parameters</h2>
<p>A function has long-term write access to all of its in-out parameters. The write access for an in-out parameter starts after all of the non-in-out parameters have been evaluated and lasts for the entire duration of that function call. If there are multiple in-out parameters, the write accesses start in the same order as the parameters appear.</p>
<p>One consequence of this long-term write access is that you can’t access the original variable that was passed as in-out, even if scoping rules and access control would otherwise permit it—any access to the original creates a conflict. For example:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">var</span> <span class="nv">stepSize</span> = <span class="m">1</span>
</li><li>
</li><li><span class="k">func</span> <span class="nv">increment</span>(<span class="k">_</span> <span class="nv">number</span>: <span class="k">inout</span> <span class="nc">Int</span>) {
</li><li>    <span class="nv">number</span> += <span class="nv">stepSize</span>
</li><li>}
</li><li>
</li><li><span class="nv">increment</span>(&amp;<span class="nv">stepSize</span>)
</li><li><span class="c">// Error: conflicting accesses to stepSize</span>
</li></ol></div></div></div>
<p>In the code above, <code class="docutils literal notranslate"><span class="pre">stepSize</span></code> is a global variable, and it’s normally accessible from within <code class="docutils literal notranslate"><span class="pre">increment(_:)</span></code>. However, the read access to <code class="docutils literal notranslate"><span class="pre">stepSize</span></code> overlaps with the write access to <code class="docutils literal notranslate"><span class="pre">number</span></code>. As shown in the figure below, both <code class="docutils literal notranslate"><span class="pre">number</span></code> and <code class="docutils literal notranslate"><span class="pre">stepSize</span></code> refer to the same location in memory. The read and write accesses refer to the same memory and they overlap, producing a conflict.</p>
<img alt="../_images/memory_increment_2x.png" class="align-center" src="../_images/memory_increment_2x.png" style="width: 442.0px;" />
<p>One way to solve this conflict is to make an explicit copy of <code class="docutils literal notranslate"><span class="pre">stepSize</span></code>:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="c">// Make an explicit copy.</span>
</li><li><span class="k">var</span> <span class="nv">copyOfStepSize</span> = <span class="nv">stepSize</span>
</li><li><span class="nv">increment</span>(&amp;<span class="nv">copyOfStepSize</span>)
</li><li>
</li><li><span class="c">// Update the original.</span>
</li><li><span class="nv">stepSize</span> = <span class="nv">copyOfStepSize</span>
</li><li><span class="c">// stepSize is now 2</span>
</li></ol></div></div></div>
<p>When you make a copy of <code class="docutils literal notranslate"><span class="pre">stepSize</span></code> before calling <code class="docutils literal notranslate"><span class="pre">increment(_:)</span></code>, it’s clear that the value of <code class="docutils literal notranslate"><span class="pre">copyOfStepSize</span></code> is incremented by the current step size. The read access ends before the write access starts, so there isn’t a conflict.</p>
<p>Another consequence of long-term write access to in-out parameters is that passing a single variable as the argument for multiple in-out parameters of the same function produces a conflict. For example:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">func</span> <span class="nv">balance</span>(<span class="k">_</span> <span class="nv">x</span>: <span class="k">inout</span> <span class="nc">Int</span>, <span class="k">_</span> <span class="nv">y</span>: <span class="k">inout</span> <span class="nc">Int</span>) {
</li><li>    <span class="k">let</span> <span class="nv">sum</span> = <span class="nv">x</span> + <span class="nv">y</span>
</li><li>    <span class="nv">x</span> = <span class="nv">sum</span> / <span class="m">2</span>
</li><li>    <span class="nv">y</span> = <span class="nv">sum</span> - <span class="nv">x</span>
</li><li>}
</li><li><span class="k">var</span> <span class="nv">playerOneScore</span> = <span class="m">42</span>
</li><li><span class="k">var</span> <span class="nv">playerTwoScore</span> = <span class="m">30</span>
</li><li><span class="nv">balance</span>(&amp;<span class="nv">playerOneScore</span>, &amp;<span class="nv">playerTwoScore</span>)  <span class="c">// OK</span>
</li><li><span class="nv">balance</span>(&amp;<span class="nv">playerOneScore</span>, &amp;<span class="nv">playerOneScore</span>)
</li><li><span class="c">// Error: conflicting accesses to playerOneScore</span>
</li></ol></div></div></div>
<p>The <code class="docutils literal notranslate"><span class="pre">balance(_:_:)</span></code> function above modifies its two parameters to divide the total value evenly between them. Calling it with <code class="docutils literal notranslate"><span class="pre">playerOneScore</span></code> and <code class="docutils literal notranslate"><span class="pre">playerTwoScore</span></code> as arguments doesn’t produce a conflict—there are two write accesses that overlap in time, but they access different locations in memory. In contrast, passing <code class="docutils literal notranslate"><span class="pre">playerOneScore</span></code> as the value for both parameters produces a conflict because it tries to perform two write accesses to the same location in memory at the same time.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Because operators are functions, they can also have long-term accesses to their in-out parameters. For example, if <code class="docutils literal notranslate"><span class="pre">balance(_:_:)</span></code> was an operator function named <code class="docutils literal notranslate"><span class="pre">&lt;^&gt;</span></code>, writing <code class="docutils literal notranslate"><span class="pre">playerOneScore</span> <span class="pre">&lt;^&gt;</span> <span class="pre">playerOneScore</span></code> would result in the same conflict as <code class="docutils literal notranslate"><span class="pre">balance(&amp;playerOneScore,</span> <span class="pre">&amp;playerOneScore)</span></code>.</p>
</div>
</div>
<div class="section" id="ID570">
<h2>Conflicting Access to self in Methods</h2>
<p>A mutating method on a structure has write access to <code class="docutils literal notranslate"><span class="pre">self</span></code> for the duration of the method call. For example, consider a game where each player has a health amount, which decreases when taking damage, and an energy amount, which decreases when using special abilities.</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">struct</span> <span class="nv">Player</span> {
</li><li>    <span class="k">var</span> <span class="nv">name</span>: <span class="nc">String</span>
</li><li>    <span class="k">var</span> <span class="nv">health</span>: <span class="nc">Int</span>
</li><li>    <span class="k">var</span> <span class="nv">energy</span>: <span class="nc">Int</span>
</li><li>
</li><li>    <span class="k">static</span> <span class="k">let</span> <span class="nv">maxHealth</span> = <span class="m">10</span>
</li><li>    <span class="k">mutating</span> <span class="k">func</span> <span class="nv">restoreHealth</span>() {
</li><li>        <span class="nv">health</span> = <span class="nv">Player</span>.<span class="nv">maxHealth</span>
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>In the <code class="docutils literal notranslate"><span class="pre">restoreHealth()</span></code> method above, a write access to <code class="docutils literal notranslate"><span class="pre">self</span></code> starts at the beginning of the method and lasts until the method returns. In this case, there’s no other code inside <code class="docutils literal notranslate"><span class="pre">restoreHealth()</span></code> that could have an overlapping access to the properties of a <code class="docutils literal notranslate"><span class="pre">Player</span></code> instance. The <code class="docutils literal notranslate"><span class="pre">shareHealth(with:)</span></code> method below takes another <code class="docutils literal notranslate"><span class="pre">Player</span></code> instance as an in-out parameter, creating the possibility of overlapping accesses.</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">extension</span> <span class="nc">Player</span> {
</li><li>    <span class="k">mutating</span> <span class="k">func</span> <span class="nv">shareHealth</span>(<span class="nv">with</span> <span class="nv">teammate</span>: <span class="k">inout</span> <span class="nc">Player</span>) {
</li><li>        <span class="nv">balance</span>(&amp;<span class="nv">teammate</span>.<span class="nv">health</span>, &amp;<span class="nv">health</span>)
</li><li>    }
</li><li>}
</li><li>
</li><li><span class="k">var</span> <span class="nv">oscar</span> = <span class="nv">Player</span>(<span class="nv">name</span>: <span class="s">&quot;Oscar&quot;</span>, <span class="nv">health</span>: <span class="m">10</span>, <span class="nv">energy</span>: <span class="m">10</span>)
</li><li><span class="k">var</span> <span class="nv">maria</span> = <span class="nv">Player</span>(<span class="nv">name</span>: <span class="s">&quot;Maria&quot;</span>, <span class="nv">health</span>: <span class="m">5</span>, <span class="nv">energy</span>: <span class="m">10</span>)
</li><li><span class="nv">oscar</span>.<span class="nv">shareHealth</span>(<span class="nv">with</span>: &amp;<span class="nv">maria</span>)  <span class="c">// OK</span>
</li></ol></div></div></div>
<p>In the example above, calling the <code class="docutils literal notranslate"><span class="pre">shareHealth(with:)</span></code> method for Oscar’s player to share health with Maria’s player doesn’t cause a conflict. There’s a write access to <code class="docutils literal notranslate"><span class="pre">oscar</span></code> during the method call because <code class="docutils literal notranslate"><span class="pre">oscar</span></code> is the value of <code class="docutils literal notranslate"><span class="pre">self</span></code> in a mutating method, and there’s a write access to <code class="docutils literal notranslate"><span class="pre">maria</span></code> for the same duration because <code class="docutils literal notranslate"><span class="pre">maria</span></code> was passed as an in-out parameter. As shown in the figure below, they access different locations in memory. Even though the two write accesses overlap in time, they don’t conflict.</p>
<img alt="../_images/memory_share_health_maria_2x.png" class="align-center" src="../_images/memory_share_health_maria_2x.png" style="width: 549.0px;" />
<p>However, if you pass <code class="docutils literal notranslate"><span class="pre">oscar</span></code> as the argument to <code class="docutils literal notranslate"><span class="pre">shareHealth(with:)</span></code>, there’s a conflict:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="nv">oscar</span>.<span class="nv">shareHealth</span>(<span class="nv">with</span>: &amp;<span class="nv">oscar</span>)
</li><li><span class="c">// Error: conflicting accesses to oscar</span>
</li></ol></div></div></div>
<p>The mutating method needs write access to <code class="docutils literal notranslate"><span class="pre">self</span></code> for the duration of the method, and the in-out parameter needs write access to <code class="docutils literal notranslate"><span class="pre">teammate</span></code> for the same duration. Within the method, both <code class="docutils literal notranslate"><span class="pre">self</span></code> and <code class="docutils literal notranslate"><span class="pre">teammate</span></code> refer to the same location in memory—as shown in the figure below. The two write accesses refer to the same memory and they overlap, producing a conflict.</p>
<img alt="../_images/memory_share_health_oscar_2x.png" class="align-center" src="../_images/memory_share_health_oscar_2x.png" style="width: 549.0px;" />
</div>
<div class="section" id="ID571">
<h2>Conflicting Access to Properties</h2>
<p>Types like structures, tuples, and enumerations are made up of individual constituent values, such as the properties of a structure or the elements of a tuple. Because these are value types, mutating any piece of the value mutates the whole value, meaning read or write access to one of the properties requires read or write access to the whole value. For example, overlapping write accesses to the elements of a tuple produces a conflict:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">var</span> <span class="nv">playerInformation</span> = (<span class="nv">health</span>: <span class="m">10</span>, <span class="nv">energy</span>: <span class="m">20</span>)
</li><li><span class="nv">balance</span>(&amp;<span class="nv">playerInformation</span>.<span class="nv">health</span>, &amp;<span class="nv">playerInformation</span>.<span class="nv">energy</span>)
</li><li><span class="c">// Error: conflicting access to properties of playerInformation</span>
</li></ol></div></div></div>
<p>In the example above, calling <code class="docutils literal notranslate"><span class="pre">balance(_:_:)</span></code> on the elements of a tuple produces a conflict because there are overlapping write accesses to <code class="docutils literal notranslate"><span class="pre">playerInformation</span></code>. Both <code class="docutils literal notranslate"><span class="pre">playerInformation.health</span></code> and <code class="docutils literal notranslate"><span class="pre">playerInformation.energy</span></code> are passed as in-out parameters, which means <code class="docutils literal notranslate"><span class="pre">balance(_:_:)</span></code> needs write access to them for the duration of the function call. In both cases, a write access to the tuple element requires a write access to the entire tuple. This means there are two write accesses to <code class="docutils literal notranslate"><span class="pre">playerInformation</span></code> with durations that overlap, causing a conflict.</p>
<p>The code below shows that the same error appears for overlapping write accesses to the properties of a structure that’s stored in a global variable.</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">var</span> <span class="nv">holly</span> = <span class="nv">Player</span>(<span class="nv">name</span>: <span class="s">&quot;Holly&quot;</span>, <span class="nv">health</span>: <span class="m">10</span>, <span class="nv">energy</span>: <span class="m">10</span>)
</li><li><span class="nv">balance</span>(&amp;<span class="nv">holly</span>.<span class="nv">health</span>, &amp;<span class="nv">holly</span>.<span class="nv">energy</span>)  <span class="c">// Error</span>
</li></ol></div></div></div>
<p>In practice, most access to the properties of a structure can overlap safely. For example, if the variable <code class="docutils literal notranslate"><span class="pre">holly</span></code> in the example above is changed to a local variable instead of a global variable, the compiler can prove that overlapping access to stored properties of the structure is safe:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">func</span> <span class="nv">someFunction</span>() {
</li><li>    <span class="k">var</span> <span class="nv">oscar</span> = <span class="nv">Player</span>(<span class="nv">name</span>: <span class="s">&quot;Oscar&quot;</span>, <span class="nv">health</span>: <span class="m">10</span>, <span class="nv">energy</span>: <span class="m">10</span>)
</li><li>    <span class="nv">balance</span>(&amp;<span class="nv">oscar</span>.<span class="nv">health</span>, &amp;<span class="nv">oscar</span>.<span class="nv">energy</span>)  <span class="c">// OK</span>
</li><li>}
</li></ol></div></div></div>
<p>In the example above, Oscar’s health and energy are passed as the two in-out parameters to <code class="docutils literal notranslate"><span class="pre">balance(_:_:)</span></code>. The compiler can prove that memory safety is preserved because the two stored properties don’t interact in any way.</p>
<p>The restriction against overlapping access to properties of a structure isn’t always necessary to preserve memory safety. Memory safety is the desired guarantee, but exclusive access is a stricter requirement than memory safety—which means some code preserves memory safety, even though it violates exclusive access to memory. Swift allows this memory-safe code if the compiler can prove that the nonexclusive access to memory is still safe. Specifically, it can prove that overlapping access to properties of a structure is safe if the following conditions apply:</p>
<ul class="simple">
<li><p>You’re accessing only stored properties of an instance, not computed properties or class properties.</p></li>
<li><p>The structure is the value of a local variable, not a global variable.</p></li>
<li><p>The structure is either not captured by any closures, or it’s captured only by nonescaping closures.</p></li>
</ul>
<p>If the compiler can’t prove the access is safe, it doesn’t allow the access.</p>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>