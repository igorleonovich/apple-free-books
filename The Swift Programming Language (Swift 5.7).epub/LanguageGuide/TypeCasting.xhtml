<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Type Casting</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="type-casting">
<h1>Type Casting</h1>
<p><em>Type casting</em> is a way to check the type of an instance, or to treat that instance as a different superclass or subclass from somewhere else in its own class hierarchy.</p>
<p>Type casting in Swift is implemented with the <code class="docutils literal notranslate"><span class="pre">is</span></code> and <code class="docutils literal notranslate"><span class="pre">as</span></code> operators. These two operators provide a simple and expressive way to check the type of a value or cast a value to a different type.</p>
<p>You can also use type casting to check whether a type conforms to a protocol, as described in <a class="reference internal" href="Protocols.xhtml#ID283"><span class="std std-ref">Checking for Protocol Conformance</span></a>.</p>
<div class="section" id="ID339">
<h2>Defining a Class Hierarchy for Type Casting</h2>
<p>You can use type casting with a hierarchy of classes and subclasses to check the type of a particular class instance and to cast that instance to another class within the same hierarchy. The three code snippets below define a hierarchy of classes and an array containing instances of those classes, for use in an example of type casting.</p>
<p>The first snippet defines a new base class called <code class="docutils literal notranslate"><span class="pre">MediaItem</span></code>. This class provides basic functionality for any kind of item that appears in a digital media library. Specifically, it declares a <code class="docutils literal notranslate"><span class="pre">name</span></code> property of type <code class="docutils literal notranslate"><span class="pre">String</span></code>, and an <code class="docutils literal notranslate"><span class="pre">init</span> <span class="pre">name</span></code> initializer. (It’s assumed that all media items, including all movies and songs, will have a name.)</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">class</span> <span class="nv">MediaItem</span> {
</li><li>    <span class="k">var</span> <span class="nv">name</span>: <span class="nc">String</span>
</li><li>    <span class="k">init</span>(<span class="nv">name</span>: <span class="nc">String</span>) {
</li><li>        <span class="k">self</span>.<span class="nv">name</span> = <span class="nv">name</span>
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>The next snippet defines two subclasses of <code class="docutils literal notranslate"><span class="pre">MediaItem</span></code>. The first subclass, <code class="docutils literal notranslate"><span class="pre">Movie</span></code>, encapsulates additional information about a movie or film. It adds a <code class="docutils literal notranslate"><span class="pre">director</span></code> property on top of the base <code class="docutils literal notranslate"><span class="pre">MediaItem</span></code> class, with a corresponding initializer. The second subclass, <code class="docutils literal notranslate"><span class="pre">Song</span></code>, adds an <code class="docutils literal notranslate"><span class="pre">artist</span></code> property and initializer on top of the base class:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">class</span> <span class="nv">Movie</span>: <span class="nc">MediaItem</span> {
</li><li>    <span class="k">var</span> <span class="nv">director</span>: <span class="nc">String</span>
</li><li>    <span class="k">init</span>(<span class="nv">name</span>: <span class="nc">String</span>, <span class="nv">director</span>: <span class="nc">String</span>) {
</li><li>        <span class="k">self</span>.<span class="nv">director</span> = <span class="nv">director</span>
</li><li>        <span class="k">super</span>.<span class="nv">init</span>(<span class="nv">name</span>: <span class="nv">name</span>)
</li><li>    }
</li><li>}
</li><li>
</li><li><span class="k">class</span> <span class="nv">Song</span>: <span class="nc">MediaItem</span> {
</li><li>    <span class="k">var</span> <span class="nv">artist</span>: <span class="nc">String</span>
</li><li>    <span class="k">init</span>(<span class="nv">name</span>: <span class="nc">String</span>, <span class="nv">artist</span>: <span class="nc">String</span>) {
</li><li>        <span class="k">self</span>.<span class="nv">artist</span> = <span class="nv">artist</span>
</li><li>        <span class="k">super</span>.<span class="nv">init</span>(<span class="nv">name</span>: <span class="nv">name</span>)
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>The final snippet creates a constant array called <code class="docutils literal notranslate"><span class="pre">library</span></code>, which contains two <code class="docutils literal notranslate"><span class="pre">Movie</span></code> instances and three <code class="docutils literal notranslate"><span class="pre">Song</span></code> instances. The type of the <code class="docutils literal notranslate"><span class="pre">library</span></code> array is inferred by initializing it with the contents of an array literal. Swift’s type checker is able to deduce that <code class="docutils literal notranslate"><span class="pre">Movie</span></code> and <code class="docutils literal notranslate"><span class="pre">Song</span></code> have a common superclass of <code class="docutils literal notranslate"><span class="pre">MediaItem</span></code>, and so it infers a type of <code class="docutils literal notranslate"><span class="pre">[MediaItem]</span></code> for the <code class="docutils literal notranslate"><span class="pre">library</span></code> array:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">let</span> <span class="nv">library</span> = [
</li><li>    <span class="nv">Movie</span>(<span class="nv">name</span>: <span class="s">&quot;Casablanca&quot;</span>, <span class="nv">director</span>: <span class="s">&quot;Michael Curtiz&quot;</span>),
</li><li>    <span class="nv">Song</span>(<span class="nv">name</span>: <span class="s">&quot;Blue Suede Shoes&quot;</span>, <span class="nv">artist</span>: <span class="s">&quot;Elvis Presley&quot;</span>),
</li><li>    <span class="nv">Movie</span>(<span class="nv">name</span>: <span class="s">&quot;Citizen Kane&quot;</span>, <span class="nv">director</span>: <span class="s">&quot;Orson Welles&quot;</span>),
</li><li>    <span class="nv">Song</span>(<span class="nv">name</span>: <span class="s">&quot;The One And Only&quot;</span>, <span class="nv">artist</span>: <span class="s">&quot;Chesney Hawkes&quot;</span>),
</li><li>    <span class="nv">Song</span>(<span class="nv">name</span>: <span class="s">&quot;Never Gonna Give You Up&quot;</span>, <span class="nv">artist</span>: <span class="s">&quot;Rick Astley&quot;</span>)
</li><li>]
</li><li><span class="c">// the type of &quot;library&quot; is inferred to be [MediaItem]</span>
</li></ol></div></div></div>
<p>The items stored in <code class="docutils literal notranslate"><span class="pre">library</span></code> are still <code class="docutils literal notranslate"><span class="pre">Movie</span></code> and <code class="docutils literal notranslate"><span class="pre">Song</span></code> instances behind the scenes. However, if you iterate over the contents of this array, the items you receive back are typed as <code class="docutils literal notranslate"><span class="pre">MediaItem</span></code>, and not as <code class="docutils literal notranslate"><span class="pre">Movie</span></code> or <code class="docutils literal notranslate"><span class="pre">Song</span></code>. In order to work with them as their native type, you need to <em>check</em> their type, or <em>downcast</em> them to a different type, as described below.</p>
</div>
<div class="section" id="ID340">
<h2>Checking Type</h2>
<p>Use the <em>type check operator</em> (<code class="docutils literal notranslate"><span class="pre">is</span></code>) to check whether an instance is of a certain subclass type. The type check operator returns <code class="docutils literal notranslate"><span class="pre">true</span></code> if the instance is of that subclass type and <code class="docutils literal notranslate"><span class="pre">false</span></code> if it’s not.</p>
<p>The example below defines two variables, <code class="docutils literal notranslate"><span class="pre">movieCount</span></code> and <code class="docutils literal notranslate"><span class="pre">songCount</span></code>, which count the number of <code class="docutils literal notranslate"><span class="pre">Movie</span></code> and <code class="docutils literal notranslate"><span class="pre">Song</span></code> instances in the <code class="docutils literal notranslate"><span class="pre">library</span></code> array:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">var</span> <span class="nv">movieCount</span> = <span class="m">0</span>
</li><li><span class="k">var</span> <span class="nv">songCount</span> = <span class="m">0</span>
</li><li>
</li><li><span class="k">for</span> <span class="nv">item</span> <span class="k">in</span> <span class="nv">library</span> {
</li><li>    <span class="k">if</span> <span class="nv">item</span> <span class="k">is</span> <span class="nc">Movie</span> {
</li><li>        <span class="nv">movieCount</span> += <span class="m">1</span>
</li><li>    } <span class="k">else</span> <span class="k">if</span> <span class="nv">item</span> <span class="k">is</span> <span class="nc">Song</span> {
</li><li>        <span class="nv">songCount</span> += <span class="m">1</span>
</li><li>    }
</li><li>}
</li><li>
</li><li><span class="nv">print</span>(<span class="s">&quot;Media library contains </span>\<span class="p">(</span><span class="nv">movieCount</span><span class="p">)</span><span class="s"> movies and </span>\<span class="p">(</span><span class="nv">songCount</span><span class="p">)</span><span class="s"> songs&quot;</span>)
</li><li><span class="c">// Prints &quot;Media library contains 2 movies and 3 songs&quot;</span>
</li></ol></div></div></div>
<p>This example iterates through all items in the <code class="docutils literal notranslate"><span class="pre">library</span></code> array. On each pass, the <code class="docutils literal notranslate"><span class="pre">for</span></code>-<code class="docutils literal notranslate"><span class="pre">in</span></code> loop sets the <code class="docutils literal notranslate"><span class="pre">item</span></code> constant to the next <code class="docutils literal notranslate"><span class="pre">MediaItem</span></code> in the array.</p>
<p><code class="docutils literal notranslate"><span class="pre">item</span> <span class="pre">is</span> <span class="pre">Movie</span></code> returns <code class="docutils literal notranslate"><span class="pre">true</span></code> if the current <code class="docutils literal notranslate"><span class="pre">MediaItem</span></code> is a <code class="docutils literal notranslate"><span class="pre">Movie</span></code> instance and <code class="docutils literal notranslate"><span class="pre">false</span></code> if it’s not. Similarly, <code class="docutils literal notranslate"><span class="pre">item</span> <span class="pre">is</span> <span class="pre">Song</span></code> checks whether the item is a <code class="docutils literal notranslate"><span class="pre">Song</span></code> instance. At the end of the <code class="docutils literal notranslate"><span class="pre">for</span></code>-<code class="docutils literal notranslate"><span class="pre">in</span></code> loop, the values of <code class="docutils literal notranslate"><span class="pre">movieCount</span></code> and <code class="docutils literal notranslate"><span class="pre">songCount</span></code> contain a count of how many <code class="docutils literal notranslate"><span class="pre">MediaItem</span></code> instances were found of each type.</p>
</div>
<div class="section" id="ID341">
<h2>Downcasting</h2>
<p>A constant or variable of a certain class type may actually refer to an instance of a subclass behind the scenes. Where you believe this is the case, you can try to <em>downcast</em> to the subclass type with a <em>type cast operator</em> (<code class="docutils literal notranslate"><span class="pre">as?</span></code> or <code class="docutils literal notranslate"><span class="pre">as!</span></code>).</p>
<p>Because downcasting can fail, the type cast operator comes in two different forms. The conditional form, <code class="docutils literal notranslate"><span class="pre">as?</span></code>, returns an optional value of the type you are trying to downcast to. The forced form, <code class="docutils literal notranslate"><span class="pre">as!</span></code>, attempts the downcast and force-unwraps the result as a single compound action.</p>
<p>Use the conditional form of the type cast operator (<code class="docutils literal notranslate"><span class="pre">as?</span></code>) when you aren’t sure if the downcast will succeed. This form of the operator will always return an optional value, and the value will be <code class="docutils literal notranslate"><span class="pre">nil</span></code> if the downcast was not possible. This enables you to check for a successful downcast.</p>
<p>Use the forced form of the type cast operator (<code class="docutils literal notranslate"><span class="pre">as!</span></code>) only when you are sure that the downcast will always succeed. This form of the operator will trigger a runtime error if you try to downcast to an incorrect class type.</p>
<p>The example below iterates over each <code class="docutils literal notranslate"><span class="pre">MediaItem</span></code> in <code class="docutils literal notranslate"><span class="pre">library</span></code>, and prints an appropriate description for each item. To do this, it needs to access each item as a true <code class="docutils literal notranslate"><span class="pre">Movie</span></code> or <code class="docutils literal notranslate"><span class="pre">Song</span></code>, and not just as a <code class="docutils literal notranslate"><span class="pre">MediaItem</span></code>. This is necessary in order for it to be able to access the <code class="docutils literal notranslate"><span class="pre">director</span></code> or <code class="docutils literal notranslate"><span class="pre">artist</span></code> property of a <code class="docutils literal notranslate"><span class="pre">Movie</span></code> or <code class="docutils literal notranslate"><span class="pre">Song</span></code> for use in the description.</p>
<p>In this example, each item in the array might be a <code class="docutils literal notranslate"><span class="pre">Movie</span></code>, or it might be a <code class="docutils literal notranslate"><span class="pre">Song</span></code>. You don’t know in advance which actual class to use for each item, and so it’s appropriate to use the conditional form of the type cast operator (<code class="docutils literal notranslate"><span class="pre">as?</span></code>) to check the downcast each time through the loop:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">for</span> <span class="nv">item</span> <span class="k">in</span> <span class="nv">library</span> {
</li><li>    <span class="k">if</span> <span class="k">let</span> <span class="nv">movie</span> = <span class="nv">item</span> <span class="k">as</span>? <span class="nc">Movie</span> {
</li><li>        <span class="nv">print</span>(<span class="s">&quot;Movie: </span>\<span class="p">(</span><span class="nv">movie</span>.<span class="nv">name</span><span class="p">)</span><span class="s">, dir. </span>\<span class="p">(</span><span class="nv">movie</span>.<span class="nv">director</span><span class="p">)</span><span class="s">&quot;</span>)
</li><li>    } <span class="k">else</span> <span class="k">if</span> <span class="k">let</span> <span class="nv">song</span> = <span class="nv">item</span> <span class="k">as</span>? <span class="nc">Song</span> {
</li><li>        <span class="nv">print</span>(<span class="s">&quot;Song: </span>\<span class="p">(</span><span class="nv">song</span>.<span class="nv">name</span><span class="p">)</span><span class="s">, by </span>\<span class="p">(</span><span class="nv">song</span>.<span class="nv">artist</span><span class="p">)</span><span class="s">&quot;</span>)
</li><li>    }
</li><li>}
</li><li>
</li><li><span class="c">// Movie: Casablanca, dir. Michael Curtiz</span>
</li><li><span class="c">// Song: Blue Suede Shoes, by Elvis Presley</span>
</li><li><span class="c">// Movie: Citizen Kane, dir. Orson Welles</span>
</li><li><span class="c">// Song: The One And Only, by Chesney Hawkes</span>
</li><li><span class="c">// Song: Never Gonna Give You Up, by Rick Astley</span>
</li></ol></div></div></div>
<p>The example starts by trying to downcast the current <code class="docutils literal notranslate"><span class="pre">item</span></code> as a <code class="docutils literal notranslate"><span class="pre">Movie</span></code>. Because <code class="docutils literal notranslate"><span class="pre">item</span></code> is a <code class="docutils literal notranslate"><span class="pre">MediaItem</span></code> instance, it’s possible that it <em>might</em> be a <code class="docutils literal notranslate"><span class="pre">Movie</span></code>; equally, it’s also possible that it might be a <code class="docutils literal notranslate"><span class="pre">Song</span></code>, or even just a base <code class="docutils literal notranslate"><span class="pre">MediaItem</span></code>. Because of this uncertainty, the <code class="docutils literal notranslate"><span class="pre">as?</span></code> form of the type cast operator returns an <em>optional</em> value when attempting to downcast to a subclass type. The result of <code class="docutils literal notranslate"><span class="pre">item</span> <span class="pre">as?</span> <span class="pre">Movie</span></code> is of type <code class="docutils literal notranslate"><span class="pre">Movie?</span></code>, or “optional <code class="docutils literal notranslate"><span class="pre">Movie</span></code>”.</p>
<p>Downcasting to <code class="docutils literal notranslate"><span class="pre">Movie</span></code> fails when applied to the <code class="docutils literal notranslate"><span class="pre">Song</span></code> instances in the library array. To cope with this, the example above uses optional binding to check whether the optional <code class="docutils literal notranslate"><span class="pre">Movie</span></code> actually contains a value (that is, to find out whether the downcast succeeded.) This optional binding is written “<code class="docutils literal notranslate"><span class="pre">if</span> <span class="pre">let</span> <span class="pre">movie</span> <span class="pre">=</span> <span class="pre">item</span> <span class="pre">as?</span> <span class="pre">Movie</span></code>”, which can be read as:</p>
<p>“Try to access <code class="docutils literal notranslate"><span class="pre">item</span></code> as a <code class="docutils literal notranslate"><span class="pre">Movie</span></code>. If this is successful, set a new temporary constant called <code class="docutils literal notranslate"><span class="pre">movie</span></code> to the value stored in the returned optional <code class="docutils literal notranslate"><span class="pre">Movie</span></code>.”</p>
<p>If the downcasting succeeds, the properties of <code class="docutils literal notranslate"><span class="pre">movie</span></code> are then used to print a description for that <code class="docutils literal notranslate"><span class="pre">Movie</span></code> instance, including the name of its <code class="docutils literal notranslate"><span class="pre">director</span></code>. A similar principle is used to check for <code class="docutils literal notranslate"><span class="pre">Song</span></code> instances, and to print an appropriate description (including <code class="docutils literal notranslate"><span class="pre">artist</span></code> name) whenever a <code class="docutils literal notranslate"><span class="pre">Song</span></code> is found in the library.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Casting doesn’t actually modify the instance or change its values. The underlying instance remains the same; it’s simply treated and accessed as an instance of the type to which it has been cast.</p>
</div>
</div>
<div class="section" id="ID342">
<h2>Type Casting for Any and AnyObject</h2>
<p>Swift provides two special types for working with nonspecific types:</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">Any</span></code> can represent an instance of any type at all, including function types.</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">AnyObject</span></code> can represent an instance of any class type.</p></li>
</ul>
<p>Use <code class="docutils literal notranslate"><span class="pre">Any</span></code> and <code class="docutils literal notranslate"><span class="pre">AnyObject</span></code> only when you explicitly need the behavior and capabilities they provide. It’s always better to be specific about the types you expect to work with in your code.</p>
<p>Here’s an example of using <code class="docutils literal notranslate"><span class="pre">Any</span></code> to work with a mix of different types, including function types and nonclass types. The example creates an array called <code class="docutils literal notranslate"><span class="pre">things</span></code>, which can store values of type <code class="docutils literal notranslate"><span class="pre">Any</span></code>:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">var</span> <span class="nv">things</span>: [<span class="k">Any</span>] = []
</li><li>
</li><li><span class="nv">things</span>.<span class="nv">append</span>(<span class="m">0</span>)
</li><li><span class="nv">things</span>.<span class="nv">append</span>(<span class="m">0.0</span>)
</li><li><span class="nv">things</span>.<span class="nv">append</span>(<span class="m">42</span>)
</li><li><span class="nv">things</span>.<span class="nv">append</span>(<span class="m">3.14159</span>)
</li><li><span class="nv">things</span>.<span class="nv">append</span>(<span class="s">&quot;hello&quot;</span>)
</li><li><span class="nv">things</span>.<span class="nv">append</span>((<span class="m">3.0</span>, <span class="m">5.0</span>))
</li><li><span class="nv">things</span>.<span class="nv">append</span>(<span class="nv">Movie</span>(<span class="nv">name</span>: <span class="s">&quot;Ghostbusters&quot;</span>, <span class="nv">director</span>: <span class="s">&quot;Ivan Reitman&quot;</span>))
</li><li><span class="nv">things</span>.<span class="nv">append</span>({ (<span class="nv">name</span>: <span class="nc">String</span>) -&gt; <span class="nc">String</span> <span class="k">in</span> <span class="s">&quot;Hello, </span>\<span class="p">(</span><span class="nv">name</span><span class="p">)</span><span class="s">&quot;</span> })
</li></ol></div></div></div>
<p>The <code class="docutils literal notranslate"><span class="pre">things</span></code> array contains two <code class="docutils literal notranslate"><span class="pre">Int</span></code> values, two <code class="docutils literal notranslate"><span class="pre">Double</span></code> values, a <code class="docutils literal notranslate"><span class="pre">String</span></code> value, a tuple of type <code class="docutils literal notranslate"><span class="pre">(Double,</span> <span class="pre">Double)</span></code>, the movie “Ghostbusters”, and a closure expression that takes a <code class="docutils literal notranslate"><span class="pre">String</span></code> value and returns another <code class="docutils literal notranslate"><span class="pre">String</span></code> value.</p>
<p>To discover the specific type of a constant or variable that’s known only to be of type <code class="docutils literal notranslate"><span class="pre">Any</span></code> or <code class="docutils literal notranslate"><span class="pre">AnyObject</span></code>, you can use an <code class="docutils literal notranslate"><span class="pre">is</span></code> or <code class="docutils literal notranslate"><span class="pre">as</span></code> pattern in a <code class="docutils literal notranslate"><span class="pre">switch</span></code> statement’s cases. The example below iterates over the items in the <code class="docutils literal notranslate"><span class="pre">things</span></code> array and queries the type of each item with a <code class="docutils literal notranslate"><span class="pre">switch</span></code> statement. Several of the <code class="docutils literal notranslate"><span class="pre">switch</span></code> statement’s cases bind their matched value to a constant of the specified type to enable its value to be printed:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">for</span> <span class="nv">thing</span> <span class="k">in</span> <span class="nv">things</span> {
</li><li>    <span class="k">switch</span> <span class="nv">thing</span> {
</li><li>    <span class="k">case</span> <span class="m">0</span> <span class="k">as</span> <span class="nc">Int</span>:
</li><li>        <span class="nv">print</span>(<span class="s">&quot;zero as an Int&quot;</span>)
</li><li>    <span class="k">case</span> <span class="m">0</span> <span class="k">as</span> <span class="nc">Double</span>:
</li><li>        <span class="nv">print</span>(<span class="s">&quot;zero as a Double&quot;</span>)
</li><li>    <span class="k">case</span> <span class="k">let</span> <span class="nv">someInt</span> <span class="k">as</span> <span class="nc">Int</span>:
</li><li>        <span class="nv">print</span>(<span class="s">&quot;an integer value of </span>\<span class="p">(</span><span class="nv">someInt</span><span class="p">)</span><span class="s">&quot;</span>)
</li><li>    <span class="k">case</span> <span class="k">let</span> <span class="nv">someDouble</span> <span class="k">as</span> <span class="nc">Double</span> <span class="k">where</span> <span class="nv">someDouble</span> &gt; <span class="m">0</span>:
</li><li>        <span class="nv">print</span>(<span class="s">&quot;a positive double value of </span>\<span class="p">(</span><span class="nv">someDouble</span><span class="p">)</span><span class="s">&quot;</span>)
</li><li>    <span class="k">case</span> <span class="k">is</span> <span class="nc">Double</span>:
</li><li>        <span class="nv">print</span>(<span class="s">&quot;some other double value that I don&#39;t want to print&quot;</span>)
</li><li>    <span class="k">case</span> <span class="k">let</span> <span class="nv">someString</span> <span class="k">as</span> <span class="nc">String</span>:
</li><li>        <span class="nv">print</span>(<span class="s">&quot;a string value of \&quot;</span>\<span class="p">(</span><span class="nv">someString</span><span class="p">)</span><span class="s">\&quot;&quot;</span>)
</li><li>    <span class="k">case</span> <span class="k">let</span> (<span class="nv">x</span>, <span class="nv">y</span>) <span class="k">as</span> (<span class="nc">Double</span>, <span class="nc">Double</span>):
</li><li>        <span class="nv">print</span>(<span class="s">&quot;an (x, y) point at </span>\<span class="p">(</span><span class="nv">x</span><span class="p">)</span><span class="s">, </span>\<span class="p">(</span><span class="nv">y</span><span class="p">)</span><span class="s">&quot;</span>)
</li><li>    <span class="k">case</span> <span class="k">let</span> <span class="nv">movie</span> <span class="k">as</span> <span class="nc">Movie</span>:
</li><li>        <span class="nv">print</span>(<span class="s">&quot;a movie called </span>\<span class="p">(</span><span class="nv">movie</span>.<span class="nv">name</span><span class="p">)</span><span class="s">, dir. </span>\<span class="p">(</span><span class="nv">movie</span>.<span class="nv">director</span><span class="p">)</span><span class="s">&quot;</span>)
</li><li>    <span class="k">case</span> <span class="k">let</span> <span class="nv">stringConverter</span> <span class="k">as</span> (<span class="nc">String</span>) -&gt; <span class="nc">String</span>:
</li><li>        <span class="nv">print</span>(<span class="nv">stringConverter</span>(<span class="s">&quot;Michael&quot;</span>))
</li><li>    <span class="k">default</span>:
</li><li>        <span class="nv">print</span>(<span class="s">&quot;something else&quot;</span>)
</li><li>    }
</li><li>}
</li><li>
</li><li><span class="c">// zero as an Int</span>
</li><li><span class="c">// zero as a Double</span>
</li><li><span class="c">// an integer value of 42</span>
</li><li><span class="c">// a positive double value of 3.14159</span>
</li><li><span class="c">// a string value of &quot;hello&quot;</span>
</li><li><span class="c">// an (x, y) point at 3.0, 5.0</span>
</li><li><span class="c">// a movie called Ghostbusters, dir. Ivan Reitman</span>
</li><li><span class="c">// Hello, Michael</span>
</li></ol></div></div></div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>The <code class="docutils literal notranslate"><span class="pre">Any</span></code> type represents values of any type, including optional types. Swift gives you a warning if you use an optional value where a value of type <code class="docutils literal notranslate"><span class="pre">Any</span></code> is expected. If you really do need to use an optional value as an <code class="docutils literal notranslate"><span class="pre">Any</span></code> value, you can use the <code class="docutils literal notranslate"><span class="pre">as</span></code> operator to explicitly cast the optional to <code class="docutils literal notranslate"><span class="pre">Any</span></code>, as shown below.</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">let</span> <span class="nv">optionalNumber</span>: <span class="nc">Int</span>? = <span class="m">3</span>
</li><li><span class="nv">things</span>.<span class="nv">append</span>(<span class="nv">optionalNumber</span>)        <span class="c">// Warning</span>
</li><li><span class="nv">things</span>.<span class="nv">append</span>(<span class="nv">optionalNumber</span> <span class="k">as</span> <span class="k">Any</span>) <span class="c">// No warning</span>
</li></ol></div></div></div>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>