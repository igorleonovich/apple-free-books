<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Collection Types</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="collection-types">
<h1>Collection Types</h1>
<p>Swift provides three primary <em>collection types</em>, known as arrays, sets, and dictionaries, for storing collections of values. Arrays are ordered collections of values. Sets are unordered collections of unique values. Dictionaries are unordered collections of key-value associations.</p>
<img alt="../_images/CollectionTypes_intro_2x.png" class="align-center" src="../_images/CollectionTypes_intro_2x.png" style="width: 669.0px;" />
<p>Arrays, sets, and dictionaries in Swift are always clear about the types of values and keys that they can store. This means that you can’t insert a value of the wrong type into a collection by mistake. It also means you can be confident about the type of values you will retrieve from a collection.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Swift’s array, set, and dictionary types are implemented as <em>generic collections</em>. For more about generic types and collections, see <a class="reference internal" href="Generics.xhtml"><span class="doc">Generics</span></a>.</p>
</div>
<div class="section" id="ID106">
<h2>Mutability of Collections</h2>
<p>If you create an array, a set, or a dictionary, and assign it to a variable, the collection that’s created will be <em>mutable</em>. This means that you can change (or <em>mutate</em>) the collection after it’s created by adding, removing, or changing items in the collection. If you assign an array, a set, or a dictionary to a constant, that collection is <em>immutable</em>, and its size and contents can’t be changed.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>It’s good practice to create immutable collections in all cases where the collection doesn’t need to change. Doing so makes it easier for you to reason about your code and enables the Swift compiler to optimize the performance of the collections you create.</p>
</div>
</div>
<div class="section" id="ID107">
<h2>Arrays</h2>
<p>An <em>array</em> stores values of the same type in an ordered list. The same value can appear in an array multiple times at different positions.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Swift’s <code class="docutils literal notranslate"><span class="pre">Array</span></code> type is bridged to Foundation’s <code class="docutils literal notranslate"><span class="pre">NSArray</span></code> class.</p>
<p>For more information about using <code class="docutils literal notranslate"><span class="pre">Array</span></code> with Foundation and Cocoa, see <a class="reference external" href="https://developer.apple.com/documentation/swift/array#2846730">Bridging Between Array and NSArray</a><span class="link-target"> [https://developer.apple.com/documentation/swift/array#2846730]</span>.</p>
</div>
<div class="section" id="ID108">
<h3>Array Type Shorthand Syntax</h3>
<p>The type of a Swift array is written in full as <code class="docutils literal notranslate"><span class="pre">Array&lt;Element&gt;</span></code>, where <code class="docutils literal notranslate"><span class="pre">Element</span></code> is the type of values the array is allowed to store. You can also write the type of an array in shorthand form as <code class="docutils literal notranslate"><span class="pre">[Element]</span></code>. Although the two forms are functionally identical, the shorthand form is preferred and is used throughout this guide when referring to the type of an array.</p>
</div>
<div class="section" id="ID500">
<h3>Creating an Empty Array</h3>
<p>You can create an empty array of a certain type using initializer syntax:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">var</span> <span class="nv">someInts</span>: [<span class="nc">Int</span>] = []
</li><li><span class="nv">print</span>(<span class="s">&quot;someInts is of type [Int] with </span>\<span class="p">(</span><span class="nv">someInts</span>.<span class="nv">count</span><span class="p">)</span><span class="s"> items.&quot;</span>)
</li><li><span class="c">// Prints &quot;someInts is of type [Int] with 0 items.&quot;</span>
</li></ol></div></div></div>
<p>Note that the type of the <code class="docutils literal notranslate"><span class="pre">someInts</span></code> variable is inferred to be <code class="docutils literal notranslate"><span class="pre">[Int]</span></code> from the type of the initializer.</p>
<p>Alternatively, if the context already provides type information, such as a function argument or an already typed variable or constant, you can create an empty array with an empty array literal, which is written as <code class="docutils literal notranslate"><span class="pre">[]</span></code> (an empty pair of square brackets):</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="nv">someInts</span>.<span class="nv">append</span>(<span class="m">3</span>)
</li><li><span class="c">// someInts now contains 1 value of type Int</span>
</li><li><span class="nv">someInts</span> = []
</li><li><span class="c">// someInts is now an empty array, but is still of type [Int]</span>
</li></ol></div></div></div>
</div>
<div class="section" id="ID501">
<h3>Creating an Array with a Default Value</h3>
<p>Swift’s <code class="docutils literal notranslate"><span class="pre">Array</span></code> type also provides an initializer for creating an array of a certain size with all of its values set to the same default value. You pass this initializer a default value of the appropriate type (called <code class="docutils literal notranslate"><span class="pre">repeating</span></code>): and the number of times that value is repeated in the new array (called <code class="docutils literal notranslate"><span class="pre">count</span></code>):</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">var</span> <span class="nv">threeDoubles</span> = <span class="nv">Array</span>(<span class="nv">repeating</span>: <span class="m">0.0</span>, <span class="nv">count</span>: <span class="m">3</span>)
</li><li><span class="c">// threeDoubles is of type [Double], and equals [0.0, 0.0, 0.0]</span>
</li></ol></div></div></div>
</div>
<div class="section" id="ID502">
<h3>Creating an Array by Adding Two Arrays Together</h3>
<p>You can create a new array by adding together two existing arrays with compatible types with the addition operator (<code class="docutils literal notranslate"><span class="pre">+</span></code>). The new array’s type is inferred from the type of the two arrays you add together:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">var</span> <span class="nv">anotherThreeDoubles</span> = <span class="nv">Array</span>(<span class="nv">repeating</span>: <span class="m">2.5</span>, <span class="nv">count</span>: <span class="m">3</span>)
</li><li><span class="c">// anotherThreeDoubles is of type [Double], and equals [2.5, 2.5, 2.5]</span>
</li><li>
</li><li><span class="k">var</span> <span class="nv">sixDoubles</span> = <span class="nv">threeDoubles</span> + <span class="nv">anotherThreeDoubles</span>
</li><li><span class="c">// sixDoubles is inferred as [Double], and equals [0.0, 0.0, 0.0, 2.5, 2.5, 2.5]</span>
</li></ol></div></div></div>
</div>
<div class="section" id="ID109">
<h3>Creating an Array with an Array Literal</h3>
<p>You can also initialize an array with an <em>array literal</em>, which is a shorthand way to write one or more values as an array collection. An array literal is written as a list of values, separated by commas, surrounded by a pair of square brackets:</p>
<div class="syntax-outline highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li>[<span class="gi">value 1</span>, <span class="gi">value 2</span>, <span class="gi">value 3</span>]
</li></ol></div></div></div>
<p>The example below creates an array called <code class="docutils literal notranslate"><span class="pre">shoppingList</span></code> to store <code class="docutils literal notranslate"><span class="pre">String</span></code> values:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">var</span> <span class="nv">shoppingList</span>: [<span class="nc">String</span>] = [<span class="s">&quot;Eggs&quot;</span>, <span class="s">&quot;Milk&quot;</span>]
</li><li><span class="c">// shoppingList has been initialized with two initial items</span>
</li></ol></div></div></div>
<p>The <code class="docutils literal notranslate"><span class="pre">shoppingList</span></code> variable is declared as “an array of string values”, written as <code class="docutils literal notranslate"><span class="pre">[String]</span></code>. Because this particular array has specified a value type of <code class="docutils literal notranslate"><span class="pre">String</span></code>, it’s allowed to store <code class="docutils literal notranslate"><span class="pre">String</span></code> values only. Here, the <code class="docutils literal notranslate"><span class="pre">shoppingList</span></code> array is initialized with two <code class="docutils literal notranslate"><span class="pre">String</span></code> values (<code class="docutils literal notranslate"><span class="pre">&quot;Eggs&quot;</span></code> and <code class="docutils literal notranslate"><span class="pre">&quot;Milk&quot;</span></code>), written within an array literal.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>The <code class="docutils literal notranslate"><span class="pre">shoppingList</span></code> array is declared as a variable (with the <code class="docutils literal notranslate"><span class="pre">var</span></code> introducer) and not a constant (with the <code class="docutils literal notranslate"><span class="pre">let</span></code> introducer) because more items are added to the shopping list in the examples below.</p>
</div>
<p>In this case, the array literal contains two <code class="docutils literal notranslate"><span class="pre">String</span></code> values and nothing else. This matches the type of the <code class="docutils literal notranslate"><span class="pre">shoppingList</span></code> variable’s declaration (an array that can only contain <code class="docutils literal notranslate"><span class="pre">String</span></code> values), and so the assignment of the array literal is permitted as a way to initialize <code class="docutils literal notranslate"><span class="pre">shoppingList</span></code> with two initial items.</p>
<p>Thanks to Swift’s type inference, you don’t have to write the type of the array if you’re initializing it with an array literal containing values of the same type. The initialization of <code class="docutils literal notranslate"><span class="pre">shoppingList</span></code> could have been written in a shorter form instead:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">var</span> <span class="nv">shoppingList</span> = [<span class="s">&quot;Eggs&quot;</span>, <span class="s">&quot;Milk&quot;</span>]
</li></ol></div></div></div>
<p>Because all values in the array literal are of the same type, Swift can infer that <code class="docutils literal notranslate"><span class="pre">[String]</span></code> is the correct type to use for the <code class="docutils literal notranslate"><span class="pre">shoppingList</span></code> variable.</p>
</div>
<div class="section" id="ID110">
<h3>Accessing and Modifying an Array</h3>
<p>You access and modify an array through its methods and properties, or by using subscript syntax.</p>
<p>To find out the number of items in an array, check its read-only <code class="docutils literal notranslate"><span class="pre">count</span></code> property:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="nv">print</span>(<span class="s">&quot;The shopping list contains </span>\<span class="p">(</span><span class="nv">shoppingList</span>.<span class="nv">count</span><span class="p">)</span><span class="s"> items.&quot;</span>)
</li><li><span class="c">// Prints &quot;The shopping list contains 2 items.&quot;</span>
</li></ol></div></div></div>
<p>Use the Boolean <code class="docutils literal notranslate"><span class="pre">isEmpty</span></code> property as a shortcut for checking whether the <code class="docutils literal notranslate"><span class="pre">count</span></code> property is equal to <code class="docutils literal notranslate"><span class="pre">0</span></code>:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">if</span> <span class="nv">shoppingList</span>.<span class="nv">isEmpty</span> {
</li><li>    <span class="nv">print</span>(<span class="s">&quot;The shopping list is empty.&quot;</span>)
</li><li>} <span class="k">else</span> {
</li><li>    <span class="nv">print</span>(<span class="s">&quot;The shopping list isn&#39;t empty.&quot;</span>)
</li><li>}
</li><li><span class="c">// Prints &quot;The shopping list isn&#39;t empty.&quot;</span>
</li></ol></div></div></div>
<p>You can add a new item to the end of an array by calling the array’s <code class="docutils literal notranslate"><span class="pre">append(_:)</span></code> method:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="nv">shoppingList</span>.<span class="nv">append</span>(<span class="s">&quot;Flour&quot;</span>)
</li><li><span class="c">// shoppingList now contains 3 items, and someone is making pancakes</span>
</li></ol></div></div></div>
<p>Alternatively, append an array of one or more compatible items with the addition assignment operator (<code class="docutils literal notranslate"><span class="pre">+=</span></code>):</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="nv">shoppingList</span> += [<span class="s">&quot;Baking Powder&quot;</span>]
</li><li><span class="c">// shoppingList now contains 4 items</span>
</li><li><span class="nv">shoppingList</span> += [<span class="s">&quot;Chocolate Spread&quot;</span>, <span class="s">&quot;Cheese&quot;</span>, <span class="s">&quot;Butter&quot;</span>]
</li><li><span class="c">// shoppingList now contains 7 items</span>
</li></ol></div></div></div>
<p>Retrieve a value from the array by using <em>subscript syntax</em>, passing the index of the value you want to retrieve within square brackets immediately after the name of the array:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">var</span> <span class="nv">firstItem</span> = <span class="nv">shoppingList</span>[<span class="m">0</span>]
</li><li><span class="c">// firstItem is equal to &quot;Eggs&quot;</span>
</li></ol></div></div></div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>The first item in the array has an index of <code class="docutils literal notranslate"><span class="pre">0</span></code>, not <code class="docutils literal notranslate"><span class="pre">1</span></code>. Arrays in Swift are always zero-indexed.</p>
</div>
<p>You can use subscript syntax to change an existing value at a given index:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="nv">shoppingList</span>[<span class="m">0</span>] = <span class="s">&quot;Six eggs&quot;</span>
</li><li><span class="c">// the first item in the list is now equal to &quot;Six eggs&quot; rather than &quot;Eggs&quot;</span>
</li></ol></div></div></div>
<p>When you use subscript syntax, the index you specify needs to be valid. For example, writing <code class="docutils literal notranslate"><span class="pre">shoppingList[shoppingList.count]</span> <span class="pre">=</span> <span class="pre">&quot;Salt&quot;</span></code> to try to append an item to the end of the array results in a runtime error.</p>
<p>You can also use subscript syntax to change a range of values at once, even if the replacement set of values has a different length than the range you are replacing. The following example replaces <code class="docutils literal notranslate"><span class="pre">&quot;Chocolate</span> <span class="pre">Spread&quot;</span></code>, <code class="docutils literal notranslate"><span class="pre">&quot;Cheese&quot;</span></code>, and <code class="docutils literal notranslate"><span class="pre">&quot;Butter&quot;</span></code> with <code class="docutils literal notranslate"><span class="pre">&quot;Bananas&quot;</span></code> and <code class="docutils literal notranslate"><span class="pre">&quot;Apples&quot;</span></code>:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="nv">shoppingList</span>[<span class="m">4</span>...<span class="m">6</span>] = [<span class="s">&quot;Bananas&quot;</span>, <span class="s">&quot;Apples&quot;</span>]
</li><li><span class="c">// shoppingList now contains 6 items</span>
</li></ol></div></div></div>
<p>To insert an item into the array at a specified index, call the array’s <code class="docutils literal notranslate"><span class="pre">insert(_:at:)</span></code> method:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="nv">shoppingList</span>.<span class="nv">insert</span>(<span class="s">&quot;Maple Syrup&quot;</span>, <span class="nv">at</span>: <span class="m">0</span>)
</li><li><span class="c">// shoppingList now contains 7 items</span>
</li><li><span class="c">// &quot;Maple Syrup&quot; is now the first item in the list</span>
</li></ol></div></div></div>
<p>This call to the <code class="docutils literal notranslate"><span class="pre">insert(_:at:)</span></code> method inserts a new item with a value of <code class="docutils literal notranslate"><span class="pre">&quot;Maple</span> <span class="pre">Syrup&quot;</span></code> at the very beginning of the shopping list, indicated by an index of <code class="docutils literal notranslate"><span class="pre">0</span></code>.</p>
<p>Similarly, you remove an item from the array with the <code class="docutils literal notranslate"><span class="pre">remove(at:)</span></code> method. This method removes the item at the specified index and returns the removed item (although you can ignore the returned value if you don’t need it):</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">let</span> <span class="nv">mapleSyrup</span> = <span class="nv">shoppingList</span>.<span class="nv">remove</span>(<span class="nv">at</span>: <span class="m">0</span>)
</li><li><span class="c">// the item that was at index 0 has just been removed</span>
</li><li><span class="c">// shoppingList now contains 6 items, and no Maple Syrup</span>
</li><li><span class="c">// the mapleSyrup constant is now equal to the removed &quot;Maple Syrup&quot; string</span>
</li></ol></div></div></div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>If you try to access or modify a value for an index that’s outside of an array’s existing bounds, you will trigger a runtime error. You can check that an index is valid before using it by comparing it to the array’s <code class="docutils literal notranslate"><span class="pre">count</span></code> property. The largest valid index in an array is <code class="docutils literal notranslate"><span class="pre">count</span> <span class="pre">-</span> <span class="pre">1</span></code> because arrays are indexed from zero—however, when <code class="docutils literal notranslate"><span class="pre">count</span></code> is <code class="docutils literal notranslate"><span class="pre">0</span></code> (meaning the array is empty), there are no valid indexes.</p>
</div>
<p>Any gaps in an array are closed when an item is removed, and so the value at index <code class="docutils literal notranslate"><span class="pre">0</span></code> is once again equal to <code class="docutils literal notranslate"><span class="pre">&quot;Six</span> <span class="pre">eggs&quot;</span></code>:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="nv">firstItem</span> = <span class="nv">shoppingList</span>[<span class="m">0</span>]
</li><li><span class="c">// firstItem is now equal to &quot;Six eggs&quot;</span>
</li></ol></div></div></div>
<p>If you want to remove the final item from an array, use the <code class="docutils literal notranslate"><span class="pre">removeLast()</span></code> method rather than the <code class="docutils literal notranslate"><span class="pre">remove(at:)</span></code> method to avoid the need to query the array’s <code class="docutils literal notranslate"><span class="pre">count</span></code> property. Like the <code class="docutils literal notranslate"><span class="pre">remove(at:)</span></code> method, <code class="docutils literal notranslate"><span class="pre">removeLast()</span></code> returns the removed item:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">let</span> <span class="nv">apples</span> = <span class="nv">shoppingList</span>.<span class="nv">removeLast</span>()
</li><li><span class="c">// the last item in the array has just been removed</span>
</li><li><span class="c">// shoppingList now contains 5 items, and no apples</span>
</li><li><span class="c">// the apples constant is now equal to the removed &quot;Apples&quot; string</span>
</li></ol></div></div></div>
</div>
<div class="section" id="ID111">
<h3>Iterating Over an Array</h3>
<p>You can iterate over the entire set of values in an array with the <code class="docutils literal notranslate"><span class="pre">for</span></code>-<code class="docutils literal notranslate"><span class="pre">in</span></code> loop:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">for</span> <span class="nv">item</span> <span class="k">in</span> <span class="nv">shoppingList</span> {
</li><li>    <span class="nv">print</span>(<span class="nv">item</span>)
</li><li>}
</li><li><span class="c">// Six eggs</span>
</li><li><span class="c">// Milk</span>
</li><li><span class="c">// Flour</span>
</li><li><span class="c">// Baking Powder</span>
</li><li><span class="c">// Bananas</span>
</li></ol></div></div></div>
<p>If you need the integer index of each item as well as its value, use the <code class="docutils literal notranslate"><span class="pre">enumerated()</span></code> method to iterate over the array instead. For each item in the array, the <code class="docutils literal notranslate"><span class="pre">enumerated()</span></code> method returns a tuple composed of an integer and the item. The integers start at zero and count up by one for each item; if you enumerate over a whole array, these integers match the items’ indices. You can decompose the tuple into temporary constants or variables as part of the iteration:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">for</span> (<span class="nv">index</span>, <span class="nv">value</span>) <span class="k">in</span> <span class="nv">shoppingList</span>.<span class="nv">enumerated</span>() {
</li><li>    <span class="nv">print</span>(<span class="s">&quot;Item </span>\<span class="p">(</span><span class="nv">index</span> + <span class="m">1</span><span class="p">)</span><span class="s">: </span>\<span class="p">(</span><span class="nv">value</span><span class="p">)</span><span class="s">&quot;</span>)
</li><li>}
</li><li><span class="c">// Item 1: Six eggs</span>
</li><li><span class="c">// Item 2: Milk</span>
</li><li><span class="c">// Item 3: Flour</span>
</li><li><span class="c">// Item 4: Baking Powder</span>
</li><li><span class="c">// Item 5: Bananas</span>
</li></ol></div></div></div>
<p>For more about the <code class="docutils literal notranslate"><span class="pre">for</span></code>-<code class="docutils literal notranslate"><span class="pre">in</span></code> loop, see <a class="reference internal" href="ControlFlow.xhtml#ID121"><span class="std std-ref">For-In Loops</span></a>.</p>
</div>
</div>
<div class="section" id="ID484">
<h2>Sets</h2>
<p>A <em>set</em> stores distinct values of the same type in a collection with no defined ordering. You can use a set instead of an array when the order of items isn’t important, or when you need to ensure that an item only appears once.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Swift’s <code class="docutils literal notranslate"><span class="pre">Set</span></code> type is bridged to Foundation’s <code class="docutils literal notranslate"><span class="pre">NSSet</span></code> class.</p>
<p>For more information about using <code class="docutils literal notranslate"><span class="pre">Set</span></code> with Foundation and Cocoa, see <a class="reference external" href="https://developer.apple.com/documentation/swift/set#2845530">Bridging Between Set and NSSet</a><span class="link-target"> [https://developer.apple.com/documentation/swift/set#2845530]</span>.</p>
</div>
<div class="section" id="ID493">
<h3>Hash Values for Set Types</h3>
<p>A type must be <em>hashable</em> in order to be stored in a set—that is, the type must provide a way to compute a <em>hash value</em> for itself. A hash value is an <code class="docutils literal notranslate"><span class="pre">Int</span></code> value that’s the same for all objects that compare equally, such that if <code class="docutils literal notranslate"><span class="pre">a</span> <span class="pre">==</span> <span class="pre">b</span></code>, the hash value of <code class="docutils literal notranslate"><span class="pre">a</span></code> is equal to the hash value of <code class="docutils literal notranslate"><span class="pre">b</span></code>.</p>
<p>All of Swift’s basic types (such as <code class="docutils literal notranslate"><span class="pre">String</span></code>, <code class="docutils literal notranslate"><span class="pre">Int</span></code>, <code class="docutils literal notranslate"><span class="pre">Double</span></code>, and <code class="docutils literal notranslate"><span class="pre">Bool</span></code>) are hashable by default, and can be used as set value types or dictionary key types. Enumeration case values without associated values (as described in <a class="reference internal" href="Enumerations.xhtml"><span class="doc">Enumerations</span></a>) are also hashable by default.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>You can use your own custom types as set value types or dictionary key types by making them conform to the <code class="docutils literal notranslate"><span class="pre">Hashable</span></code> protocol from the Swift standard library. For information about implementing the required <code class="docutils literal notranslate"><span class="pre">hash(into:)</span></code> method, see <a class="reference external" href="https://developer.apple.com/documentation/swift/hashable"><code class="docutils literal notranslate"><span class="pre">Hashable</span></code></a><span class="link-target"> [https://developer.apple.com/documentation/swift/hashable]</span>. For information about conforming to protocols, see <a class="reference internal" href="Protocols.xhtml"><span class="doc">Protocols</span></a>.</p>
</div>
</div>
<div class="section" id="ID485">
<h3>Set Type Syntax</h3>
<p>The type of a Swift set is written as <code class="docutils literal notranslate"><span class="pre">Set&lt;Element&gt;</span></code>, where <code class="docutils literal notranslate"><span class="pre">Element</span></code> is the type that the set is allowed to store. Unlike arrays, sets don’t have an equivalent shorthand form.</p>
</div>
<div class="section" id="ID503">
<h3>Creating and Initializing an Empty Set</h3>
<p>You can create an empty set of a certain type using initializer syntax:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">var</span> <span class="nv">letters</span> = <span class="nv">Set</span>&lt;<span class="nc">Character</span>&gt;()
</li><li><span class="nv">print</span>(<span class="s">&quot;letters is of type Set&lt;Character&gt; with </span>\<span class="p">(</span><span class="nv">letters</span>.<span class="nv">count</span><span class="p">)</span><span class="s"> items.&quot;</span>)
</li><li><span class="c">// Prints &quot;letters is of type Set&lt;Character&gt; with 0 items.&quot;</span>
</li></ol></div></div></div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>The type of the <code class="docutils literal notranslate"><span class="pre">letters</span></code> variable is inferred to be <code class="docutils literal notranslate"><span class="pre">Set&lt;Character&gt;</span></code>, from the type of the initializer.</p>
</div>
<p>Alternatively, if the context already provides type information, such as a function argument or an already typed variable or constant, you can create an empty set with an empty array literal:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="nv">letters</span>.<span class="nv">insert</span>(<span class="s">&quot;a&quot;</span>)
</li><li><span class="c">// letters now contains 1 value of type Character</span>
</li><li><span class="nv">letters</span> = []
</li><li><span class="c">// letters is now an empty set, but is still of type Set&lt;Character&gt;</span>
</li></ol></div></div></div>
</div>
<div class="section" id="ID504">
<h3>Creating a Set with an Array Literal</h3>
<p>You can also initialize a set with an array literal, as a shorthand way to write one or more values as a set collection.</p>
<p>The example below creates a set called <code class="docutils literal notranslate"><span class="pre">favoriteGenres</span></code> to store <code class="docutils literal notranslate"><span class="pre">String</span></code> values:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">var</span> <span class="nv">favoriteGenres</span>: <span class="nc">Set</span>&lt;<span class="nc">String</span>&gt; = [<span class="s">&quot;Rock&quot;</span>, <span class="s">&quot;Classical&quot;</span>, <span class="s">&quot;Hip hop&quot;</span>]
</li><li><span class="c">// favoriteGenres has been initialized with three initial items</span>
</li></ol></div></div></div>
<p>The <code class="docutils literal notranslate"><span class="pre">favoriteGenres</span></code> variable is declared as “a set of <code class="docutils literal notranslate"><span class="pre">String</span></code> values”, written as <code class="docutils literal notranslate"><span class="pre">Set&lt;String&gt;</span></code>. Because this particular set has specified a value type of <code class="docutils literal notranslate"><span class="pre">String</span></code>, it’s <em>only</em> allowed to store <code class="docutils literal notranslate"><span class="pre">String</span></code> values. Here, the <code class="docutils literal notranslate"><span class="pre">favoriteGenres</span></code> set is initialized with three <code class="docutils literal notranslate"><span class="pre">String</span></code> values (<code class="docutils literal notranslate"><span class="pre">&quot;Rock&quot;</span></code>, <code class="docutils literal notranslate"><span class="pre">&quot;Classical&quot;</span></code>, and <code class="docutils literal notranslate"><span class="pre">&quot;Hip</span> <span class="pre">hop&quot;</span></code>), written within an array literal.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>The <code class="docutils literal notranslate"><span class="pre">favoriteGenres</span></code> set is declared as a variable (with the <code class="docutils literal notranslate"><span class="pre">var</span></code> introducer) and not a constant (with the <code class="docutils literal notranslate"><span class="pre">let</span></code> introducer) because items are added and removed in the examples below.</p>
</div>
<p>A set type can’t be inferred from an array literal alone, so the type <code class="docutils literal notranslate"><span class="pre">Set</span></code> must be explicitly declared. However, because of Swift’s type inference, you don’t have to write the type of the set’s elements if you’re initializing it with an array literal that contains values of just one type. The initialization of <code class="docutils literal notranslate"><span class="pre">favoriteGenres</span></code> could have been written in a shorter form instead:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">var</span> <span class="nv">favoriteGenres</span>: <span class="nc">Set</span> = [<span class="s">&quot;Rock&quot;</span>, <span class="s">&quot;Classical&quot;</span>, <span class="s">&quot;Hip hop&quot;</span>]
</li></ol></div></div></div>
<p>Because all values in the array literal are of the same type, Swift can infer that <code class="docutils literal notranslate"><span class="pre">Set&lt;String&gt;</span></code> is the correct type to use for the <code class="docutils literal notranslate"><span class="pre">favoriteGenres</span></code> variable.</p>
</div>
<div class="section" id="ID488">
<h3>Accessing and Modifying a Set</h3>
<p>You access and modify a set through its methods and properties.</p>
<p>To find out the number of items in a set, check its read-only <code class="docutils literal notranslate"><span class="pre">count</span></code> property:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="nv">print</span>(<span class="s">&quot;I have </span>\<span class="p">(</span><span class="nv">favoriteGenres</span>.<span class="nv">count</span><span class="p">)</span><span class="s"> favorite music genres.&quot;</span>)
</li><li><span class="c">// Prints &quot;I have 3 favorite music genres.&quot;</span>
</li></ol></div></div></div>
<p>Use the Boolean <code class="docutils literal notranslate"><span class="pre">isEmpty</span></code> property as a shortcut for checking whether the <code class="docutils literal notranslate"><span class="pre">count</span></code> property is equal to <code class="docutils literal notranslate"><span class="pre">0</span></code>:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">if</span> <span class="nv">favoriteGenres</span>.<span class="nv">isEmpty</span> {
</li><li>    <span class="nv">print</span>(<span class="s">&quot;As far as music goes, I&#39;m not picky.&quot;</span>)
</li><li>} <span class="k">else</span> {
</li><li>    <span class="nv">print</span>(<span class="s">&quot;I have particular music preferences.&quot;</span>)
</li><li>}
</li><li><span class="c">// Prints &quot;I have particular music preferences.&quot;</span>
</li></ol></div></div></div>
<p>You can add a new item into a set by calling the set’s <code class="docutils literal notranslate"><span class="pre">insert(_:)</span></code> method:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="nv">favoriteGenres</span>.<span class="nv">insert</span>(<span class="s">&quot;Jazz&quot;</span>)
</li><li><span class="c">// favoriteGenres now contains 4 items</span>
</li></ol></div></div></div>
<p>You can remove an item from a set by calling the set’s <code class="docutils literal notranslate"><span class="pre">remove(_:)</span></code> method, which removes the item if it’s a member of the set, and returns the removed value, or returns <code class="docutils literal notranslate"><span class="pre">nil</span></code> if the set didn’t contain it. Alternatively, all items in a set can be removed with its <code class="docutils literal notranslate"><span class="pre">removeAll()</span></code> method.</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">if</span> <span class="k">let</span> <span class="nv">removedGenre</span> = <span class="nv">favoriteGenres</span>.<span class="nv">remove</span>(<span class="s">&quot;Rock&quot;</span>) {
</li><li>    <span class="nv">print</span>(<span class="s">&quot;</span>\<span class="p">(</span><span class="nv">removedGenre</span><span class="p">)</span><span class="s">? I&#39;m over it.&quot;</span>)
</li><li>} <span class="k">else</span> {
</li><li>    <span class="nv">print</span>(<span class="s">&quot;I never much cared for that.&quot;</span>)
</li><li>}
</li><li><span class="c">// Prints &quot;Rock? I&#39;m over it.&quot;</span>
</li></ol></div></div></div>
<p>To check whether a set contains a particular item, use the <code class="docutils literal notranslate"><span class="pre">contains(_:)</span></code> method.</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">if</span> <span class="nv">favoriteGenres</span>.<span class="nv">contains</span>(<span class="s">&quot;Funk&quot;</span>) {
</li><li>    <span class="nv">print</span>(<span class="s">&quot;I get up on the good foot.&quot;</span>)
</li><li>} <span class="k">else</span> {
</li><li>    <span class="nv">print</span>(<span class="s">&quot;It&#39;s too funky in here.&quot;</span>)
</li><li>}
</li><li><span class="c">// Prints &quot;It&#39;s too funky in here.&quot;</span>
</li></ol></div></div></div>
</div>
<div class="section" id="ID489">
<h3>Iterating Over a Set</h3>
<p>You can iterate over the values in a set with a <code class="docutils literal notranslate"><span class="pre">for</span></code>-<code class="docutils literal notranslate"><span class="pre">in</span></code> loop.</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">for</span> <span class="nv">genre</span> <span class="k">in</span> <span class="nv">favoriteGenres</span> {
</li><li>    <span class="nv">print</span>(<span class="s">&quot;</span>\<span class="p">(</span><span class="nv">genre</span><span class="p">)</span><span class="s">&quot;</span>)
</li><li>}
</li><li><span class="c">// Classical</span>
</li><li><span class="c">// Jazz</span>
</li><li><span class="c">// Hip hop</span>
</li></ol></div></div></div>
<p>For more about the <code class="docutils literal notranslate"><span class="pre">for</span></code>-<code class="docutils literal notranslate"><span class="pre">in</span></code> loop, see <a class="reference internal" href="ControlFlow.xhtml#ID121"><span class="std std-ref">For-In Loops</span></a>.</p>
<p>Swift’s <code class="docutils literal notranslate"><span class="pre">Set</span></code> type doesn’t have a defined ordering. To iterate over the values of a set in a specific order, use the <code class="docutils literal notranslate"><span class="pre">sorted()</span></code> method, which returns the set’s elements as an array sorted using the <code class="docutils literal notranslate"><span class="pre">&lt;</span></code> operator.</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">for</span> <span class="nv">genre</span> <span class="k">in</span> <span class="nv">favoriteGenres</span>.<span class="nv">sorted</span>() {
</li><li>    <span class="nv">print</span>(<span class="s">&quot;</span>\<span class="p">(</span><span class="nv">genre</span><span class="p">)</span><span class="s">&quot;</span>)
</li><li>}
</li><li><span class="c">// Classical</span>
</li><li><span class="c">// Hip hop</span>
</li><li><span class="c">// Jazz</span>
</li></ol></div></div></div>
</div>
</div>
<div class="section" id="ID490">
<h2>Performing Set Operations</h2>
<p>You can efficiently perform fundamental set operations, such as combining two sets together, determining which values two sets have in common, or determining whether two sets contain all, some, or none of the same values.</p>
<div class="section" id="ID505">
<h3>Fundamental Set Operations</h3>
<p>The illustration below depicts two sets—<code class="docutils literal notranslate"><span class="pre">a</span></code> and <code class="docutils literal notranslate"><span class="pre">b</span></code>—with the results of various set operations represented by the shaded regions.</p>
<img alt="../_images/setVennDiagram_2x.png" class="align-center" src="../_images/setVennDiagram_2x.png" style="width: 453.0px;" />
<ul class="simple">
<li><p>Use the <code class="docutils literal notranslate"><span class="pre">intersection(_:)</span></code> method to create a new set with only the values common to both sets.</p></li>
<li><p>Use the <code class="docutils literal notranslate"><span class="pre">symmetricDifference(_:)</span></code> method to create a new set with values in either set, but not both.</p></li>
<li><p>Use the <code class="docutils literal notranslate"><span class="pre">union(_:)</span></code> method to create a new set with all of the values in both sets.</p></li>
<li><p>Use the <code class="docutils literal notranslate"><span class="pre">subtracting(_:)</span></code> method to create a new set with values not in the specified set.</p></li>
</ul>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">let</span> <span class="nv">oddDigits</span>: <span class="nc">Set</span> = [<span class="m">1</span>, <span class="m">3</span>, <span class="m">5</span>, <span class="m">7</span>, <span class="m">9</span>]
</li><li><span class="k">let</span> <span class="nv">evenDigits</span>: <span class="nc">Set</span> = [<span class="m">0</span>, <span class="m">2</span>, <span class="m">4</span>, <span class="m">6</span>, <span class="m">8</span>]
</li><li><span class="k">let</span> <span class="nv">singleDigitPrimeNumbers</span>: <span class="nc">Set</span> = [<span class="m">2</span>, <span class="m">3</span>, <span class="m">5</span>, <span class="m">7</span>]
</li><li>
</li><li><span class="nv">oddDigits</span>.<span class="nv">union</span>(<span class="nv">evenDigits</span>).<span class="nv">sorted</span>()
</li><li><span class="c">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span>
</li><li><span class="nv">oddDigits</span>.<span class="nv">intersection</span>(<span class="nv">evenDigits</span>).<span class="nv">sorted</span>()
</li><li><span class="c">// []</span>
</li><li><span class="nv">oddDigits</span>.<span class="nv">subtracting</span>(<span class="nv">singleDigitPrimeNumbers</span>).<span class="nv">sorted</span>()
</li><li><span class="c">// [1, 9]</span>
</li><li><span class="nv">oddDigits</span>.<span class="nv">symmetricDifference</span>(<span class="nv">singleDigitPrimeNumbers</span>).<span class="nv">sorted</span>()
</li><li><span class="c">// [1, 2, 9]</span>
</li></ol></div></div></div>
</div>
<div class="section" id="ID506">
<h3>Set Membership and Equality</h3>
<p>The illustration below depicts three sets—<code class="docutils literal notranslate"><span class="pre">a</span></code>, <code class="docutils literal notranslate"><span class="pre">b</span></code> and <code class="docutils literal notranslate"><span class="pre">c</span></code>—with overlapping regions representing elements shared among sets. Set <code class="docutils literal notranslate"><span class="pre">a</span></code> is a <em>superset</em> of set <code class="docutils literal notranslate"><span class="pre">b</span></code>, because <code class="docutils literal notranslate"><span class="pre">a</span></code> contains all elements in <code class="docutils literal notranslate"><span class="pre">b</span></code>. Conversely, set <code class="docutils literal notranslate"><span class="pre">b</span></code> is a <em>subset</em> of set <code class="docutils literal notranslate"><span class="pre">a</span></code>, because all elements in <code class="docutils literal notranslate"><span class="pre">b</span></code> are also contained by <code class="docutils literal notranslate"><span class="pre">a</span></code>. Set <code class="docutils literal notranslate"><span class="pre">b</span></code> and set <code class="docutils literal notranslate"><span class="pre">c</span></code> are <em>disjoint</em> with one another, because they share no elements in common.</p>
<img alt="../_images/setEulerDiagram_2x.png" class="align-center" src="../_images/setEulerDiagram_2x.png" style="width: 623.0px;" />
<ul class="simple">
<li><p>Use the “is equal” operator (<code class="docutils literal notranslate"><span class="pre">==</span></code>) to determine whether two sets contain all of the same values.</p></li>
<li><p>Use the <code class="docutils literal notranslate"><span class="pre">isSubset(of:)</span></code> method to determine whether all of the values of a set are contained in the specified set.</p></li>
<li><p>Use the <code class="docutils literal notranslate"><span class="pre">isSuperset(of:)</span></code> method to determine whether a set contains all of the values in a specified set.</p></li>
<li><p>Use the <code class="docutils literal notranslate"><span class="pre">isStrictSubset(of:)</span></code> or <code class="docutils literal notranslate"><span class="pre">isStrictSuperset(of:)</span></code> methods to determine whether a set is a subset or superset, but not equal to, a specified set.</p></li>
<li><p>Use the <code class="docutils literal notranslate"><span class="pre">isDisjoint(with:)</span></code> method to determine whether two sets have no values in common.</p></li>
</ul>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">let</span> <span class="nv">houseAnimals</span>: <span class="nc">Set</span> = [<span class="s">&quot;🐶&quot;</span>, <span class="s">&quot;🐱&quot;</span>]
</li><li><span class="k">let</span> <span class="nv">farmAnimals</span>: <span class="nc">Set</span> = [<span class="s">&quot;🐮&quot;</span>, <span class="s">&quot;🐔&quot;</span>, <span class="s">&quot;🐑&quot;</span>, <span class="s">&quot;🐶&quot;</span>, <span class="s">&quot;🐱&quot;</span>]
</li><li><span class="k">let</span> <span class="nv">cityAnimals</span>: <span class="nc">Set</span> = [<span class="s">&quot;🐦&quot;</span>, <span class="s">&quot;🐭&quot;</span>]
</li><li>
</li><li><span class="nv">houseAnimals</span>.<span class="nv">isSubset</span>(<span class="nv">of</span>: <span class="nv">farmAnimals</span>)
</li><li><span class="c">// true</span>
</li><li><span class="nv">farmAnimals</span>.<span class="nv">isSuperset</span>(<span class="nv">of</span>: <span class="nv">houseAnimals</span>)
</li><li><span class="c">// true</span>
</li><li><span class="nv">farmAnimals</span>.<span class="nv">isDisjoint</span>(<span class="nv">with</span>: <span class="nv">cityAnimals</span>)
</li><li><span class="c">// true</span>
</li></ol></div></div></div>
</div>
</div>
<div class="section" id="ID113">
<h2>Dictionaries</h2>
<p>A <em>dictionary</em> stores associations between keys of the same type and values of the same type in a collection with no defined ordering. Each value is associated with a unique <em>key</em>, which acts as an identifier for that value within the dictionary. Unlike items in an array, items in a dictionary don’t have a specified order. You use a dictionary when you need to look up values based on their identifier, in much the same way that a real-world dictionary is used to look up the definition for a particular word.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Swift’s <code class="docutils literal notranslate"><span class="pre">Dictionary</span></code> type is bridged to Foundation’s <code class="docutils literal notranslate"><span class="pre">NSDictionary</span></code> class.</p>
<p>For more information about using <code class="docutils literal notranslate"><span class="pre">Dictionary</span></code> with Foundation and Cocoa, see <a class="reference external" href="https://developer.apple.com/documentation/swift/dictionary#2846239">Bridging Between Dictionary and NSDictionary</a><span class="link-target"> [https://developer.apple.com/documentation/swift/dictionary#2846239]</span>.</p>
</div>
<div class="section" id="ID114">
<h3>Dictionary Type Shorthand Syntax</h3>
<p>The type of a Swift dictionary is written in full as <code class="docutils literal notranslate"><span class="pre">Dictionary&lt;Key,</span> <span class="pre">Value&gt;</span></code>, where <code class="docutils literal notranslate"><span class="pre">Key</span></code> is the type of value that can be used as a dictionary key, and <code class="docutils literal notranslate"><span class="pre">Value</span></code> is the type of value that the dictionary stores for those keys.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>A dictionary <code class="docutils literal notranslate"><span class="pre">Key</span></code> type must conform to the <code class="docutils literal notranslate"><span class="pre">Hashable</span></code> protocol, like a set’s value type.</p>
</div>
<p>You can also write the type of a dictionary in shorthand form as <code class="docutils literal notranslate"><span class="pre">[Key:</span> <span class="pre">Value]</span></code>. Although the two forms are functionally identical, the shorthand form is preferred and is used throughout this guide when referring to the type of a dictionary.</p>
</div>
<div class="section" id="ID118">
<h3>Creating an Empty Dictionary</h3>
<p>As with arrays, you can create an empty <code class="docutils literal notranslate"><span class="pre">Dictionary</span></code> of a certain type by using initializer syntax:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">var</span> <span class="nv">namesOfIntegers</span>: [<span class="nc">Int</span>: <span class="nc">String</span>] = [:]
</li><li><span class="c">// namesOfIntegers is an empty [Int: String] dictionary</span>
</li></ol></div></div></div>
<p>This example creates an empty dictionary of type <code class="docutils literal notranslate"><span class="pre">[Int:</span> <span class="pre">String]</span></code> to store human-readable names of integer values. Its keys are of type <code class="docutils literal notranslate"><span class="pre">Int</span></code>, and its values are of type <code class="docutils literal notranslate"><span class="pre">String</span></code>.</p>
<p>If the context already provides type information, you can create an empty dictionary with an empty dictionary literal, which is written as <code class="docutils literal notranslate"><span class="pre">[:]</span></code> (a colon inside a pair of square brackets):</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="nv">namesOfIntegers</span>[<span class="m">16</span>] = <span class="s">&quot;sixteen&quot;</span>
</li><li><span class="c">// namesOfIntegers now contains 1 key-value pair</span>
</li><li><span class="nv">namesOfIntegers</span> = [:]
</li><li><span class="c">// namesOfIntegers is once again an empty dictionary of type [Int: String]</span>
</li></ol></div></div></div>
</div>
<div class="section" id="ID507">
<h3>Creating a Dictionary with a Dictionary Literal</h3>
<p>You can also initialize a dictionary with a <em>dictionary literal</em>, which has a similar syntax to the array literal seen earlier. A dictionary literal is a shorthand way to write one or more key-value pairs as a <code class="docutils literal notranslate"><span class="pre">Dictionary</span></code> collection.</p>
<p>A <em>key-value pair</em> is a combination of a key and a value. In a dictionary literal, the key and value in each key-value pair are separated by a colon. The key-value pairs are written as a list, separated by commas, surrounded by a pair of square brackets:</p>
<div class="syntax-outline highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li>[<span class="gi">key 1</span>: <span class="gi">value 1</span>, <span class="gi">key 2</span>: <span class="gi">value 2</span>, <span class="gi">key 3</span>: <span class="gi">value 3</span>]
</li></ol></div></div></div>
<p>The example below creates a dictionary to store the names of international airports. In this dictionary, the keys are three-letter International Air Transport Association codes, and the values are airport names:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">var</span> <span class="nv">airports</span>: [<span class="nc">String</span>: <span class="nc">String</span>] = [<span class="s">&quot;YYZ&quot;</span>: <span class="s">&quot;Toronto Pearson&quot;</span>, <span class="s">&quot;DUB&quot;</span>: <span class="s">&quot;Dublin&quot;</span>]
</li></ol></div></div></div>
<p>The <code class="docutils literal notranslate"><span class="pre">airports</span></code> dictionary is declared as having a type of <code class="docutils literal notranslate"><span class="pre">[String:</span> <span class="pre">String]</span></code>, which means “a <code class="docutils literal notranslate"><span class="pre">Dictionary</span></code> whose keys are of type <code class="docutils literal notranslate"><span class="pre">String</span></code>, and whose values are also of type <code class="docutils literal notranslate"><span class="pre">String</span></code>”.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>The <code class="docutils literal notranslate"><span class="pre">airports</span></code> dictionary is declared as a variable (with the <code class="docutils literal notranslate"><span class="pre">var</span></code> introducer), and not a constant (with the <code class="docutils literal notranslate"><span class="pre">let</span></code> introducer), because more airports are added to the dictionary in the examples below.</p>
</div>
<p>The <code class="docutils literal notranslate"><span class="pre">airports</span></code> dictionary is initialized with a dictionary literal containing two key-value pairs. The first pair has a key of <code class="docutils literal notranslate"><span class="pre">&quot;YYZ&quot;</span></code> and a value of <code class="docutils literal notranslate"><span class="pre">&quot;Toronto</span> <span class="pre">Pearson&quot;</span></code>. The second pair has a key of <code class="docutils literal notranslate"><span class="pre">&quot;DUB&quot;</span></code> and a value of <code class="docutils literal notranslate"><span class="pre">&quot;Dublin&quot;</span></code>.</p>
<p>This dictionary literal contains two <code class="docutils literal notranslate"><span class="pre">String:</span> <span class="pre">String</span></code> pairs. This key-value type matches the type of the <code class="docutils literal notranslate"><span class="pre">airports</span></code> variable declaration (a dictionary with only <code class="docutils literal notranslate"><span class="pre">String</span></code> keys, and only <code class="docutils literal notranslate"><span class="pre">String</span></code> values), and so the assignment of the dictionary literal is permitted as a way to initialize the <code class="docutils literal notranslate"><span class="pre">airports</span></code> dictionary with two initial items.</p>
<p>As with arrays, you don’t have to write the type of the dictionary if you’re initializing it with a dictionary literal whose keys and values have consistent types. The initialization of <code class="docutils literal notranslate"><span class="pre">airports</span></code> could have been written in a shorter form instead:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">var</span> <span class="nv">airports</span> = [<span class="s">&quot;YYZ&quot;</span>: <span class="s">&quot;Toronto Pearson&quot;</span>, <span class="s">&quot;DUB&quot;</span>: <span class="s">&quot;Dublin&quot;</span>]
</li></ol></div></div></div>
<p>Because all keys in the literal are of the same type as each other, and likewise all values are of the same type as each other, Swift can infer that <code class="docutils literal notranslate"><span class="pre">[String:</span> <span class="pre">String]</span></code> is the correct type to use for the <code class="docutils literal notranslate"><span class="pre">airports</span></code> dictionary.</p>
</div>
<div class="section" id="ID116">
<h3>Accessing and Modifying a Dictionary</h3>
<p>You access and modify a dictionary through its methods and properties, or by using subscript syntax.</p>
<p>As with an array, you find out the number of items in a <code class="docutils literal notranslate"><span class="pre">Dictionary</span></code> by checking its read-only <code class="docutils literal notranslate"><span class="pre">count</span></code> property:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="nv">print</span>(<span class="s">&quot;The airports dictionary contains </span>\<span class="p">(</span><span class="nv">airports</span>.<span class="nv">count</span><span class="p">)</span><span class="s"> items.&quot;</span>)
</li><li><span class="c">// Prints &quot;The airports dictionary contains 2 items.&quot;</span>
</li></ol></div></div></div>
<p>Use the Boolean <code class="docutils literal notranslate"><span class="pre">isEmpty</span></code> property as a shortcut for checking whether the <code class="docutils literal notranslate"><span class="pre">count</span></code> property is equal to <code class="docutils literal notranslate"><span class="pre">0</span></code>:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">if</span> <span class="nv">airports</span>.<span class="nv">isEmpty</span> {
</li><li>    <span class="nv">print</span>(<span class="s">&quot;The airports dictionary is empty.&quot;</span>)
</li><li>} <span class="k">else</span> {
</li><li>    <span class="nv">print</span>(<span class="s">&quot;The airports dictionary isn&#39;t empty.&quot;</span>)
</li><li>}
</li><li><span class="c">// Prints &quot;The airports dictionary isn&#39;t empty.&quot;</span>
</li></ol></div></div></div>
<p>You can add a new item to a dictionary with subscript syntax. Use a new key of the appropriate type as the subscript index, and assign a new value of the appropriate type:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="nv">airports</span>[<span class="s">&quot;LHR&quot;</span>] = <span class="s">&quot;London&quot;</span>
</li><li><span class="c">// the airports dictionary now contains 3 items</span>
</li></ol></div></div></div>
<p>You can also use subscript syntax to change the value associated with a particular key:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="nv">airports</span>[<span class="s">&quot;LHR&quot;</span>] = <span class="s">&quot;London Heathrow&quot;</span>
</li><li><span class="c">// the value for &quot;LHR&quot; has been changed to &quot;London Heathrow&quot;</span>
</li></ol></div></div></div>
<p>As an alternative to subscripting, use a dictionary’s <code class="docutils literal notranslate"><span class="pre">updateValue(_:forKey:)</span></code> method to set or update the value for a particular key. Like the subscript examples above, the <code class="docutils literal notranslate"><span class="pre">updateValue(_:forKey:)</span></code> method sets a value for a key if none exists, or updates the value if that key already exists. Unlike a subscript, however, the <code class="docutils literal notranslate"><span class="pre">updateValue(_:forKey:)</span></code> method returns the <em>old</em> value after performing an update. This enables you to check whether or not an update took place.</p>
<p>The <code class="docutils literal notranslate"><span class="pre">updateValue(_:forKey:)</span></code> method returns an optional value of the dictionary’s value type. For a dictionary that stores <code class="docutils literal notranslate"><span class="pre">String</span></code> values, for example, the method returns a value of type <code class="docutils literal notranslate"><span class="pre">String?</span></code>, or “optional <code class="docutils literal notranslate"><span class="pre">String</span></code>”. This optional value contains the old value for that key if one existed before the update, or <code class="docutils literal notranslate"><span class="pre">nil</span></code> if no value existed:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">if</span> <span class="k">let</span> <span class="nv">oldValue</span> = <span class="nv">airports</span>.<span class="nv">updateValue</span>(<span class="s">&quot;Dublin Airport&quot;</span>, <span class="nv">forKey</span>: <span class="s">&quot;DUB&quot;</span>) {
</li><li>    <span class="nv">print</span>(<span class="s">&quot;The old value for DUB was </span>\<span class="p">(</span><span class="nv">oldValue</span><span class="p">)</span><span class="s">.&quot;</span>)
</li><li>}
</li><li><span class="c">// Prints &quot;The old value for DUB was Dublin.&quot;</span>
</li></ol></div></div></div>
<p>You can also use subscript syntax to retrieve a value from the dictionary for a particular key. Because it’s possible to request a key for which no value exists, a dictionary’s subscript returns an optional value of the dictionary’s value type. If the dictionary contains a value for the requested key, the subscript returns an optional value containing the existing value for that key. Otherwise, the subscript returns <code class="docutils literal notranslate"><span class="pre">nil</span></code>:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">if</span> <span class="k">let</span> <span class="nv">airportName</span> = <span class="nv">airports</span>[<span class="s">&quot;DUB&quot;</span>] {
</li><li>    <span class="nv">print</span>(<span class="s">&quot;The name of the airport is </span>\<span class="p">(</span><span class="nv">airportName</span><span class="p">)</span><span class="s">.&quot;</span>)
</li><li>} <span class="k">else</span> {
</li><li>    <span class="nv">print</span>(<span class="s">&quot;That airport isn&#39;t in the airports dictionary.&quot;</span>)
</li><li>}
</li><li><span class="c">// Prints &quot;The name of the airport is Dublin Airport.&quot;</span>
</li></ol></div></div></div>
<p>You can use subscript syntax to remove a key-value pair from a dictionary by assigning a value of <code class="docutils literal notranslate"><span class="pre">nil</span></code> for that key:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="nv">airports</span>[<span class="s">&quot;APL&quot;</span>] = <span class="s">&quot;Apple International&quot;</span>
</li><li><span class="c">// &quot;Apple International&quot; isn&#39;t the real airport for APL, so delete it</span>
</li><li><span class="nv">airports</span>[<span class="s">&quot;APL&quot;</span>] = <span class="k">nil</span>
</li><li><span class="c">// APL has now been removed from the dictionary</span>
</li></ol></div></div></div>
<p>Alternatively, remove a key-value pair from a dictionary with the <code class="docutils literal notranslate"><span class="pre">removeValue(forKey:)</span></code> method. This method removes the key-value pair if it exists and returns the removed value, or returns <code class="docutils literal notranslate"><span class="pre">nil</span></code> if no value existed:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">if</span> <span class="k">let</span> <span class="nv">removedValue</span> = <span class="nv">airports</span>.<span class="nv">removeValue</span>(<span class="nv">forKey</span>: <span class="s">&quot;DUB&quot;</span>) {
</li><li>    <span class="nv">print</span>(<span class="s">&quot;The removed airport&#39;s name is </span>\<span class="p">(</span><span class="nv">removedValue</span><span class="p">)</span><span class="s">.&quot;</span>)
</li><li>} <span class="k">else</span> {
</li><li>    <span class="nv">print</span>(<span class="s">&quot;The airports dictionary doesn&#39;t contain a value for DUB.&quot;</span>)
</li><li>}
</li><li><span class="c">// Prints &quot;The removed airport&#39;s name is Dublin Airport.&quot;</span>
</li></ol></div></div></div>
</div>
<div class="section" id="ID117">
<h3>Iterating Over a Dictionary</h3>
<p>You can iterate over the key-value pairs in a dictionary with a <code class="docutils literal notranslate"><span class="pre">for</span></code>-<code class="docutils literal notranslate"><span class="pre">in</span></code> loop. Each item in the dictionary is returned as a <code class="docutils literal notranslate"><span class="pre">(key,</span> <span class="pre">value)</span></code> tuple, and you can decompose the tuple’s members into temporary constants or variables as part of the iteration:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">for</span> (<span class="nv">airportCode</span>, <span class="nv">airportName</span>) <span class="k">in</span> <span class="nv">airports</span> {
</li><li>    <span class="nv">print</span>(<span class="s">&quot;</span>\<span class="p">(</span><span class="nv">airportCode</span><span class="p">)</span><span class="s">: </span>\<span class="p">(</span><span class="nv">airportName</span><span class="p">)</span><span class="s">&quot;</span>)
</li><li>}
</li><li><span class="c">// LHR: London Heathrow</span>
</li><li><span class="c">// YYZ: Toronto Pearson</span>
</li></ol></div></div></div>
<p>For more about the <code class="docutils literal notranslate"><span class="pre">for</span></code>-<code class="docutils literal notranslate"><span class="pre">in</span></code> loop, see <a class="reference internal" href="ControlFlow.xhtml#ID121"><span class="std std-ref">For-In Loops</span></a>.</p>
<p>You can also retrieve an iterable collection of a dictionary’s keys or values by accessing its <code class="docutils literal notranslate"><span class="pre">keys</span></code> and <code class="docutils literal notranslate"><span class="pre">values</span></code> properties:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">for</span> <span class="nv">airportCode</span> <span class="k">in</span> <span class="nv">airports</span>.<span class="nv">keys</span> {
</li><li>    <span class="nv">print</span>(<span class="s">&quot;Airport code: </span>\<span class="p">(</span><span class="nv">airportCode</span><span class="p">)</span><span class="s">&quot;</span>)
</li><li>}
</li><li><span class="c">// Airport code: LHR</span>
</li><li><span class="c">// Airport code: YYZ</span>
</li><li>
</li><li><span class="k">for</span> <span class="nv">airportName</span> <span class="k">in</span> <span class="nv">airports</span>.<span class="nv">values</span> {
</li><li>    <span class="nv">print</span>(<span class="s">&quot;Airport name: </span>\<span class="p">(</span><span class="nv">airportName</span><span class="p">)</span><span class="s">&quot;</span>)
</li><li>}
</li><li><span class="c">// Airport name: London Heathrow</span>
</li><li><span class="c">// Airport name: Toronto Pearson</span>
</li></ol></div></div></div>
<p>If you need to use a dictionary’s keys or values with an API that takes an <code class="docutils literal notranslate"><span class="pre">Array</span></code> instance, initialize a new array with the <code class="docutils literal notranslate"><span class="pre">keys</span></code> or <code class="docutils literal notranslate"><span class="pre">values</span></code> property:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">let</span> <span class="nv">airportCodes</span> = [<span class="nv">String</span>](<span class="nv">airports</span>.<span class="nv">keys</span>)
</li><li><span class="c">// airportCodes is [&quot;LHR&quot;, &quot;YYZ&quot;]</span>
</li><li>
</li><li><span class="k">let</span> <span class="nv">airportNames</span> = [<span class="nv">String</span>](<span class="nv">airports</span>.<span class="nv">values</span>)
</li><li><span class="c">// airportNames is [&quot;London Heathrow&quot;, &quot;Toronto Pearson&quot;]</span>
</li></ol></div></div></div>
<p>Swift’s <code class="docutils literal notranslate"><span class="pre">Dictionary</span></code> type doesn’t have a defined ordering. To iterate over the keys or values of a dictionary in a specific order, use the <code class="docutils literal notranslate"><span class="pre">sorted()</span></code> method on its <code class="docutils literal notranslate"><span class="pre">keys</span></code> or <code class="docutils literal notranslate"><span class="pre">values</span></code> property.</p>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>