<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Subscripts</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="subscripts">
<h1>Subscripts</h1>
<p>Classes, structures, and enumerations can define <em>subscripts</em>, which are shortcuts for accessing the member elements of a collection, list, or sequence. You use subscripts to set and retrieve values by index without needing separate methods for setting and retrieval. For example, you access elements in an <code class="docutils literal notranslate"><span class="pre">Array</span></code> instance as <code class="docutils literal notranslate"><span class="pre">someArray[index]</span></code> and elements in a <code class="docutils literal notranslate"><span class="pre">Dictionary</span></code> instance as <code class="docutils literal notranslate"><span class="pre">someDictionary[key]</span></code>.</p>
<p>You can define multiple subscripts for a single type, and the appropriate subscript overload to use is selected based on the type of index value you pass to the subscript. Subscripts aren’t limited to a single dimension, and you can define subscripts with multiple input parameters to suit your custom type’s needs.</p>
<div class="section" id="ID306">
<h2>Subscript Syntax</h2>
<p>Subscripts enable you to query instances of a type by writing one or more values in square brackets after the instance name. Their syntax is similar to both instance method syntax and computed property syntax. You write subscript definitions with the <code class="docutils literal notranslate"><span class="pre">subscript</span></code> keyword, and specify one or more input parameters and a return type, in the same way as instance methods. Unlike instance methods, subscripts can be read-write or read-only. This behavior is communicated by a getter and setter in the same way as for computed properties:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">subscript</span>(<span class="nv">index</span>: <span class="nc">Int</span>) -&gt; <span class="nc">Int</span> {
</li><li>    <span class="k">get</span> {
</li><li>        <span class="c">// Return an appropriate subscript value here.</span>
</li><li>    }
</li><li>    <span class="k">set</span>(<span class="nv">newValue</span>) {
</li><li>        <span class="c">// Perform a suitable setting action here.</span>
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>The type of <code class="docutils literal notranslate"><span class="pre">newValue</span></code> is the same as the return value of the subscript. As with computed properties, you can choose not to specify the setter’s <code class="docutils literal notranslate"><span class="pre">(newValue)</span></code> parameter. A default parameter called <code class="docutils literal notranslate"><span class="pre">newValue</span></code> is provided to your setter if you don’t provide one yourself.</p>
<p>As with read-only computed properties, you can simplify the declaration of a read-only subscript by removing the <code class="docutils literal notranslate"><span class="pre">get</span></code> keyword and its braces:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">subscript</span>(<span class="nv">index</span>: <span class="nc">Int</span>) -&gt; <span class="nc">Int</span> {
</li><li>    <span class="c">// Return an appropriate subscript value here.</span>
</li><li>}
</li></ol></div></div></div>
<p>Here’s an example of a read-only subscript implementation, which defines a <code class="docutils literal notranslate"><span class="pre">TimesTable</span></code> structure to represent an <em>n</em>-times-table of integers:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">struct</span> <span class="nv">TimesTable</span> {
</li><li>    <span class="k">let</span> <span class="nv">multiplier</span>: <span class="nc">Int</span>
</li><li>    <span class="k">subscript</span>(<span class="nv">index</span>: <span class="nc">Int</span>) -&gt; <span class="nc">Int</span> {
</li><li>        <span class="k">return</span> <span class="nv">multiplier</span> * <span class="nv">index</span>
</li><li>    }
</li><li>}
</li><li><span class="k">let</span> <span class="nv">threeTimesTable</span> = <span class="nv">TimesTable</span>(<span class="nv">multiplier</span>: <span class="m">3</span>)
</li><li><span class="nv">print</span>(<span class="s">&quot;six times three is </span>\<span class="p">(</span><span class="nv">threeTimesTable</span>[<span class="m">6</span>]<span class="p">)</span><span class="s">&quot;</span>)
</li><li><span class="c">// Prints &quot;six times three is 18&quot;</span>
</li></ol></div></div></div>
<p>In this example, a new instance of <code class="docutils literal notranslate"><span class="pre">TimesTable</span></code> is created to represent the three-times-table. This is indicated by passing a value of <code class="docutils literal notranslate"><span class="pre">3</span></code> to the structure’s <code class="docutils literal notranslate"><span class="pre">initializer</span></code> as the value to use for the instance’s <code class="docutils literal notranslate"><span class="pre">multiplier</span></code> parameter.</p>
<p>You can query the <code class="docutils literal notranslate"><span class="pre">threeTimesTable</span></code> instance by calling its subscript, as shown in the call to <code class="docutils literal notranslate"><span class="pre">threeTimesTable[6]</span></code>. This requests the sixth entry in the three-times-table, which returns a value of <code class="docutils literal notranslate"><span class="pre">18</span></code>, or <code class="docutils literal notranslate"><span class="pre">3</span></code> times <code class="docutils literal notranslate"><span class="pre">6</span></code>.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>An <em>n</em>-times-table is based on a fixed mathematical rule. It isn’t appropriate to set <code class="docutils literal notranslate"><span class="pre">threeTimesTable[someIndex]</span></code> to a new value, and so the subscript for <code class="docutils literal notranslate"><span class="pre">TimesTable</span></code> is defined as a read-only subscript.</p>
</div>
</div>
<div class="section" id="ID307">
<h2>Subscript Usage</h2>
<p>The exact meaning of “subscript” depends on the context in which it’s used. Subscripts are typically used as a shortcut for accessing the member elements in a collection, list, or sequence. You are free to implement subscripts in the most appropriate way for your particular class or structure’s functionality.</p>
<p>For example, Swift’s <code class="docutils literal notranslate"><span class="pre">Dictionary</span></code> type implements a subscript to set and retrieve the values stored in a <code class="docutils literal notranslate"><span class="pre">Dictionary</span></code> instance. You can set a value in a dictionary by providing a key of the dictionary’s key type within subscript brackets, and assigning a value of the dictionary’s value type to the subscript:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">var</span> <span class="nv">numberOfLegs</span> = [<span class="s">&quot;spider&quot;</span>: <span class="m">8</span>, <span class="s">&quot;ant&quot;</span>: <span class="m">6</span>, <span class="s">&quot;cat&quot;</span>: <span class="m">4</span>]
</li><li><span class="nv">numberOfLegs</span>[<span class="s">&quot;bird&quot;</span>] = <span class="m">2</span>
</li></ol></div></div></div>
<p>The example above defines a variable called <code class="docutils literal notranslate"><span class="pre">numberOfLegs</span></code> and initializes it with a dictionary literal containing three key-value pairs. The type of the <code class="docutils literal notranslate"><span class="pre">numberOfLegs</span></code> dictionary is inferred to be <code class="docutils literal notranslate"><span class="pre">[String:</span> <span class="pre">Int]</span></code>. After creating the dictionary, this example uses subscript assignment to add a <code class="docutils literal notranslate"><span class="pre">String</span></code> key of <code class="docutils literal notranslate"><span class="pre">&quot;bird&quot;</span></code> and an <code class="docutils literal notranslate"><span class="pre">Int</span></code> value of <code class="docutils literal notranslate"><span class="pre">2</span></code> to the dictionary.</p>
<p>For more information about <code class="docutils literal notranslate"><span class="pre">Dictionary</span></code> subscripting, see <a class="reference internal" href="CollectionTypes.xhtml#ID116"><span class="std std-ref">Accessing and Modifying a Dictionary</span></a>.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Swift’s <code class="docutils literal notranslate"><span class="pre">Dictionary</span></code> type implements its key-value subscripting as a subscript that takes and returns an <em>optional</em> type. For the <code class="docutils literal notranslate"><span class="pre">numberOfLegs</span></code> dictionary above, the key-value subscript takes and returns a value of type <code class="docutils literal notranslate"><span class="pre">Int?</span></code>, or “optional int”. The <code class="docutils literal notranslate"><span class="pre">Dictionary</span></code> type uses an optional subscript type to model the fact that not every key will have a value, and to give a way to delete a value for a key by assigning a <code class="docutils literal notranslate"><span class="pre">nil</span></code> value for that key.</p>
</div>
</div>
<div class="section" id="ID308">
<h2>Subscript Options</h2>
<p>Subscripts can take any number of input parameters, and these input parameters can be of any type. Subscripts can also return a value of any type.</p>
<p>Like functions, subscripts can take a varying number of parameters and provide default values for their parameters, as discussed in <a class="reference internal" href="Functions.xhtml#ID171"><span class="std std-ref">Variadic Parameters</span></a> and <a class="reference internal" href="Functions.xhtml#ID169"><span class="std std-ref">Default Parameter Values</span></a>. However, unlike functions, subscripts can’t use in-out parameters.</p>
<p>A class or structure can provide as many subscript implementations as it needs, and the appropriate subscript to be used will be inferred based on the types of the value or values that are contained within the subscript brackets at the point that the subscript is used. This definition of multiple subscripts is known as <em>subscript overloading</em>.</p>
<p>While it’s most common for a subscript to take a single parameter, you can also define a subscript with multiple parameters if it’s appropriate for your type. The following example defines a <code class="docutils literal notranslate"><span class="pre">Matrix</span></code> structure, which represents a two-dimensional matrix of <code class="docutils literal notranslate"><span class="pre">Double</span></code> values. The <code class="docutils literal notranslate"><span class="pre">Matrix</span></code> structure’s subscript takes two integer parameters:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">struct</span> <span class="nv">Matrix</span> {
</li><li>    <span class="k">let</span> <span class="nv">rows</span>: <span class="nc">Int</span>, <span class="nv">columns</span>: <span class="nc">Int</span>
</li><li>    <span class="k">var</span> <span class="nv">grid</span>: [<span class="nc">Double</span>]
</li><li>    <span class="k">init</span>(<span class="nv">rows</span>: <span class="nc">Int</span>, <span class="nv">columns</span>: <span class="nc">Int</span>) {
</li><li>        <span class="k">self</span>.<span class="nv">rows</span> = <span class="nv">rows</span>
</li><li>        <span class="k">self</span>.<span class="nv">columns</span> = <span class="nv">columns</span>
</li><li>        <span class="nv">grid</span> = <span class="nv">Array</span>(<span class="nv">repeating</span>: <span class="m">0.0</span>, <span class="nv">count</span>: <span class="nv">rows</span> * <span class="nv">columns</span>)
</li><li>    }
</li><li>    <span class="k">func</span> <span class="nv">indexIsValid</span>(<span class="nv">row</span>: <span class="nc">Int</span>, <span class="nv">column</span>: <span class="nc">Int</span>) -&gt; <span class="nc">Bool</span> {
</li><li>        <span class="k">return</span> <span class="nv">row</span> &gt;= <span class="m">0</span> &amp;&amp; <span class="nv">row</span> &lt; <span class="nv">rows</span> &amp;&amp; <span class="nv">column</span> &gt;= <span class="m">0</span> &amp;&amp; <span class="nv">column</span> &lt; <span class="nv">columns</span>
</li><li>    }
</li><li>    <span class="k">subscript</span>(<span class="nv">row</span>: <span class="nc">Int</span>, <span class="nv">column</span>: <span class="nc">Int</span>) -&gt; <span class="nc">Double</span> {
</li><li>        <span class="k">get</span> {
</li><li>            <span class="nv">assert</span>(<span class="nv">indexIsValid</span>(<span class="nv">row</span>: <span class="nv">row</span>, <span class="nv">column</span>: <span class="nv">column</span>), <span class="s">&quot;Index out of range&quot;</span>)
</li><li>            <span class="k">return</span> <span class="nv">grid</span>[(<span class="nv">row</span> * <span class="nv">columns</span>) + <span class="nv">column</span>]
</li><li>        }
</li><li>        <span class="k">set</span> {
</li><li>            <span class="nv">assert</span>(<span class="nv">indexIsValid</span>(<span class="nv">row</span>: <span class="nv">row</span>, <span class="nv">column</span>: <span class="nv">column</span>), <span class="s">&quot;Index out of range&quot;</span>)
</li><li>            <span class="nv">grid</span>[(<span class="nv">row</span> * <span class="nv">columns</span>) + <span class="nv">column</span>] = <span class="nv">newValue</span>
</li><li>        }
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p><code class="docutils literal notranslate"><span class="pre">Matrix</span></code> provides an initializer that takes two parameters called <code class="docutils literal notranslate"><span class="pre">rows</span></code> and <code class="docutils literal notranslate"><span class="pre">columns</span></code>, and creates an array that’s large enough to store <code class="docutils literal notranslate"><span class="pre">rows</span> <span class="pre">*</span> <span class="pre">columns</span></code> values of type <code class="docutils literal notranslate"><span class="pre">Double</span></code>. Each position in the matrix is given an initial value of <code class="docutils literal notranslate"><span class="pre">0.0</span></code>. To achieve this, the array’s size, and an initial cell value of <code class="docutils literal notranslate"><span class="pre">0.0</span></code>, are passed to an array initializer that creates and initializes a new array of the correct size. This initializer is described in more detail in <a class="reference internal" href="CollectionTypes.xhtml#ID501"><span class="std std-ref">Creating an Array with a Default Value</span></a>.</p>
<p>You can construct a new <code class="docutils literal notranslate"><span class="pre">Matrix</span></code> instance by passing an appropriate row and column count to its initializer:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">var</span> <span class="nv">matrix</span> = <span class="nv">Matrix</span>(<span class="nv">rows</span>: <span class="m">2</span>, <span class="nv">columns</span>: <span class="m">2</span>)
</li></ol></div></div></div>
<p>The example above creates a new <code class="docutils literal notranslate"><span class="pre">Matrix</span></code> instance with two rows and two columns. The <code class="docutils literal notranslate"><span class="pre">grid</span></code> array for this <code class="docutils literal notranslate"><span class="pre">Matrix</span></code> instance is effectively a flattened version of the matrix, as read from top left to bottom right:</p>
<img alt="../_images/subscriptMatrix01_2x.png" class="align-center" src="../_images/subscriptMatrix01_2x.png" style="width: 396.0px;" />
<p>Values in the matrix can be set by passing row and column values into the subscript, separated by a comma:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="nv">matrix</span>[<span class="m">0</span>, <span class="m">1</span>] = <span class="m">1.5</span>
</li><li><span class="nv">matrix</span>[<span class="m">1</span>, <span class="m">0</span>] = <span class="m">3.2</span>
</li></ol></div></div></div>
<p>These two statements call the subscript’s setter to set a value of <code class="docutils literal notranslate"><span class="pre">1.5</span></code> in the top right position of the matrix (where <code class="docutils literal notranslate"><span class="pre">row</span></code> is <code class="docutils literal notranslate"><span class="pre">0</span></code> and <code class="docutils literal notranslate"><span class="pre">column</span></code> is <code class="docutils literal notranslate"><span class="pre">1</span></code>), and <code class="docutils literal notranslate"><span class="pre">3.2</span></code> in the bottom left position (where <code class="docutils literal notranslate"><span class="pre">row</span></code> is <code class="docutils literal notranslate"><span class="pre">1</span></code> and <code class="docutils literal notranslate"><span class="pre">column</span></code> is <code class="docutils literal notranslate"><span class="pre">0</span></code>):</p>
<img alt="../_images/subscriptMatrix02_2x.png" class="align-center" src="../_images/subscriptMatrix02_2x.png" style="width: 187.0px;" />
<p>The <code class="docutils literal notranslate"><span class="pre">Matrix</span></code> subscript’s getter and setter both contain an assertion to check that the subscript’s <code class="docutils literal notranslate"><span class="pre">row</span></code> and <code class="docutils literal notranslate"><span class="pre">column</span></code> values are valid. To assist with these assertions, <code class="docutils literal notranslate"><span class="pre">Matrix</span></code> includes a convenience method called <code class="docutils literal notranslate"><span class="pre">indexIsValid(row:column:)</span></code>, which checks whether the requested <code class="docutils literal notranslate"><span class="pre">row</span></code> and <code class="docutils literal notranslate"><span class="pre">column</span></code> are inside the bounds of the matrix:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">func</span> <span class="nv">indexIsValid</span>(<span class="nv">row</span>: <span class="nc">Int</span>, <span class="nv">column</span>: <span class="nc">Int</span>) -&gt; <span class="nc">Bool</span> {
</li><li>    <span class="k">return</span> <span class="nv">row</span> &gt;= <span class="m">0</span> &amp;&amp; <span class="nv">row</span> &lt; <span class="nv">rows</span> &amp;&amp; <span class="nv">column</span> &gt;= <span class="m">0</span> &amp;&amp; <span class="nv">column</span> &lt; <span class="nv">columns</span>
</li><li>}
</li></ol></div></div></div>
<p>An assertion is triggered if you try to access a subscript that’s outside of the matrix bounds:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">let</span> <span class="nv">someValue</span> = <span class="nv">matrix</span>[<span class="m">2</span>, <span class="m">2</span>]
</li><li><span class="c">// This triggers an assert, because [2, 2] is outside of the matrix bounds.</span>
</li></ol></div></div></div>
</div>
<div class="section" id="ID609">
<h2>Type Subscripts</h2>
<p>Instance subscripts, as described above, are subscripts that you call on an instance of a particular type. You can also define subscripts that are called on the type itself. This kind of subscript is called a <em>type subscript</em>. You indicate a type subscript by writing the <code class="docutils literal notranslate"><span class="pre">static</span></code> keyword before the <code class="docutils literal notranslate"><span class="pre">subscript</span></code> keyword. Classes can use the <code class="docutils literal notranslate"><span class="pre">class</span></code> keyword instead, to allow subclasses to override the superclass’s implementation of that subscript. The example below shows how you define and call a type subscript:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">enum</span> <span class="nv">Planet</span>: <span class="nc">Int</span> {
</li><li>    <span class="k">case</span> <span class="nv">mercury</span> = <span class="m">1</span>, <span class="nv">venus</span>, <span class="nv">earth</span>, <span class="nv">mars</span>, <span class="nv">jupiter</span>, <span class="nv">saturn</span>, <span class="nv">uranus</span>, <span class="nv">neptune</span>
</li><li>    <span class="k">static</span> <span class="k">subscript</span>(<span class="nv">n</span>: <span class="nc">Int</span>) -&gt; <span class="nc">Planet</span> {
</li><li>        <span class="k">return</span> <span class="nv">Planet</span>(<span class="nv">rawValue</span>: <span class="nv">n</span>)!
</li><li>    }
</li><li>}
</li><li><span class="k">let</span> <span class="nv">mars</span> = <span class="nv">Planet</span>[<span class="m">4</span>]
</li><li><span class="nv">print</span>(<span class="nv">mars</span>)
</li></ol></div></div></div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>