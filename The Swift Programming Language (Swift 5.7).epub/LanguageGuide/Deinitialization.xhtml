<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Deinitialization</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="deinitialization">
<h1>Deinitialization</h1>
<p>A <em>deinitializer</em> is called immediately before a class instance is deallocated. You write deinitializers with the <code class="docutils literal notranslate"><span class="pre">deinit</span></code> keyword, similar to how initializers are written with the <code class="docutils literal notranslate"><span class="pre">init</span></code> keyword. Deinitializers are only available on class types.</p>
<div class="section" id="ID143">
<h2>How Deinitialization Works</h2>
<p>Swift automatically deallocates your instances when they’re no longer needed, to free up resources. Swift handles the memory management of instances through <em>automatic reference counting</em> (<em>ARC</em>), as described in <a class="reference internal" href="AutomaticReferenceCounting.xhtml"><span class="doc">Automatic Reference Counting</span></a>. Typically you don’t need to perform manual cleanup when your instances are deallocated. However, when you are working with your own resources, you might need to perform some additional cleanup yourself. For example, if you create a custom class to open a file and write some data to it, you might need to close the file before the class instance is deallocated.</p>
<p>Class definitions can have at most one deinitializer per class. The deinitializer doesn’t take any parameters and is written without parentheses:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">deinit</span> {
</li><li>    <span class="c">// perform the deinitialization</span>
</li><li>}
</li></ol></div></div></div>
<p>Deinitializers are called automatically, just before instance deallocation takes place. You aren’t allowed to call a deinitializer yourself. Superclass deinitializers are inherited by their subclasses, and the superclass deinitializer is called automatically at the end of a subclass deinitializer implementation. Superclass deinitializers are always called, even if a subclass doesn’t provide its own deinitializer.</p>
<p>Because an instance isn’t deallocated until after its deinitializer is called, a deinitializer can access all properties of the instance it’s called on and can modify its behavior based on those properties (such as looking up the name of a file that needs to be closed).</p>
</div>
<div class="section" id="ID144">
<h2>Deinitializers in Action</h2>
<p>Here’s an example of a deinitializer in action. This example defines two new types, <code class="docutils literal notranslate"><span class="pre">Bank</span></code> and <code class="docutils literal notranslate"><span class="pre">Player</span></code>, for a simple game. The <code class="docutils literal notranslate"><span class="pre">Bank</span></code> class manages a made-up currency, which can never have more than 10,000 coins in circulation. There can only ever be one <code class="docutils literal notranslate"><span class="pre">Bank</span></code> in the game, and so the <code class="docutils literal notranslate"><span class="pre">Bank</span></code> is implemented as a class with type properties and methods to store and manage its current state:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">class</span> <span class="nv">Bank</span> {
</li><li>    <span class="k">static</span> <span class="k">var</span> <span class="nv">coinsInBank</span> = <span class="m">10_000</span>
</li><li>    <span class="k">static</span> <span class="k">func</span> <span class="nv">distribute</span>(<span class="nv">coins</span> <span class="nv">numberOfCoinsRequested</span>: <span class="nc">Int</span>) -&gt; <span class="nc">Int</span> {
</li><li>        <span class="k">let</span> <span class="nv">numberOfCoinsToVend</span> = <span class="nv">min</span>(<span class="nv">numberOfCoinsRequested</span>, <span class="nv">coinsInBank</span>)
</li><li>        <span class="nv">coinsInBank</span> -= <span class="nv">numberOfCoinsToVend</span>
</li><li>        <span class="k">return</span> <span class="nv">numberOfCoinsToVend</span>
</li><li>    }
</li><li>    <span class="k">static</span> <span class="k">func</span> <span class="nv">receive</span>(<span class="nv">coins</span>: <span class="nc">Int</span>) {
</li><li>        <span class="nv">coinsInBank</span> += <span class="nv">coins</span>
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p><code class="docutils literal notranslate"><span class="pre">Bank</span></code> keeps track of the current number of coins it holds with its <code class="docutils literal notranslate"><span class="pre">coinsInBank</span></code> property. It also offers two methods—<code class="docutils literal notranslate"><span class="pre">distribute(coins:)</span></code> and <code class="docutils literal notranslate"><span class="pre">receive(coins:)</span></code>—to handle the distribution and collection of coins.</p>
<p>The <code class="docutils literal notranslate"><span class="pre">distribute(coins:)</span></code> method checks that there are enough coins in the bank before distributing them. If there aren’t enough coins, <code class="docutils literal notranslate"><span class="pre">Bank</span></code> returns a smaller number than the number that was requested (and returns zero if no coins are left in the bank). It returns an integer value to indicate the actual number of coins that were provided.</p>
<p>The <code class="docutils literal notranslate"><span class="pre">receive(coins:)</span></code> method simply adds the received number of coins back into the bank’s coin store.</p>
<p>The <code class="docutils literal notranslate"><span class="pre">Player</span></code> class describes a player in the game. Each player has a certain number of coins stored in their purse at any time. This is represented by the player’s <code class="docutils literal notranslate"><span class="pre">coinsInPurse</span></code> property:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">class</span> <span class="nv">Player</span> {
</li><li>    <span class="k">var</span> <span class="nv">coinsInPurse</span>: <span class="nc">Int</span>
</li><li>    <span class="k">init</span>(<span class="nv">coins</span>: <span class="nc">Int</span>) {
</li><li>        <span class="nv">coinsInPurse</span> = <span class="nv">Bank</span>.<span class="nv">distribute</span>(<span class="nv">coins</span>: <span class="nv">coins</span>)
</li><li>    }
</li><li>    <span class="k">func</span> <span class="nv">win</span>(<span class="nv">coins</span>: <span class="nc">Int</span>) {
</li><li>        <span class="nv">coinsInPurse</span> += <span class="nv">Bank</span>.<span class="nv">distribute</span>(<span class="nv">coins</span>: <span class="nv">coins</span>)
</li><li>    }
</li><li>    <span class="k">deinit</span> {
</li><li>        <span class="nv">Bank</span>.<span class="nv">receive</span>(<span class="nv">coins</span>: <span class="nv">coinsInPurse</span>)
</li><li>    }
</li><li>}
</li></ol></div></div></div>
<p>Each <code class="docutils literal notranslate"><span class="pre">Player</span></code> instance is initialized with a starting allowance of a specified number of coins from the bank during initialization, although a <code class="docutils literal notranslate"><span class="pre">Player</span></code> instance may receive fewer than that number if not enough coins are available.</p>
<p>The <code class="docutils literal notranslate"><span class="pre">Player</span></code> class defines a <code class="docutils literal notranslate"><span class="pre">win(coins:)</span></code> method, which retrieves a certain number of coins from the bank and adds them to the player’s purse. The <code class="docutils literal notranslate"><span class="pre">Player</span></code> class also implements a deinitializer, which is called just before a <code class="docutils literal notranslate"><span class="pre">Player</span></code> instance is deallocated. Here, the deinitializer simply returns all of the player’s coins to the bank:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">var</span> <span class="nv">playerOne</span>: <span class="nc">Player</span>? = <span class="nv">Player</span>(<span class="nv">coins</span>: <span class="m">100</span>)
</li><li><span class="nv">print</span>(<span class="s">&quot;A new player has joined the game with </span>\<span class="p">(</span><span class="nv">playerOne</span>!.<span class="nv">coinsInPurse</span><span class="p">)</span><span class="s"> coins&quot;</span>)
</li><li><span class="c">// Prints &quot;A new player has joined the game with 100 coins&quot;</span>
</li><li><span class="nv">print</span>(<span class="s">&quot;There are now </span>\<span class="p">(</span><span class="nv">Bank</span>.<span class="nv">coinsInBank</span><span class="p">)</span><span class="s"> coins left in the bank&quot;</span>)
</li><li><span class="c">// Prints &quot;There are now 9900 coins left in the bank&quot;</span>
</li></ol></div></div></div>
<p>A new <code class="docutils literal notranslate"><span class="pre">Player</span></code> instance is created, with a request for 100 coins if they’re available. This <code class="docutils literal notranslate"><span class="pre">Player</span></code> instance is stored in an optional <code class="docutils literal notranslate"><span class="pre">Player</span></code> variable called <code class="docutils literal notranslate"><span class="pre">playerOne</span></code>. An optional variable is used here, because players can leave the game at any point. The optional lets you track whether there’s currently a player in the game.</p>
<p>Because <code class="docutils literal notranslate"><span class="pre">playerOne</span></code> is an optional, it’s qualified with an exclamation point (<code class="docutils literal notranslate"><span class="pre">!</span></code>) when its <code class="docutils literal notranslate"><span class="pre">coinsInPurse</span></code> property is accessed to print its default number of coins, and whenever its <code class="docutils literal notranslate"><span class="pre">win(coins:)</span></code> method is called:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="nv">playerOne</span>!.<span class="nv">win</span>(<span class="nv">coins</span>: <span class="m">2_000</span>)
</li><li><span class="nv">print</span>(<span class="s">&quot;PlayerOne won 2000 coins &amp; now has </span>\<span class="p">(</span><span class="nv">playerOne</span>!.<span class="nv">coinsInPurse</span><span class="p">)</span><span class="s"> coins&quot;</span>)
</li><li><span class="c">// Prints &quot;PlayerOne won 2000 coins &amp; now has 2100 coins&quot;</span>
</li><li><span class="nv">print</span>(<span class="s">&quot;The bank now only has </span>\<span class="p">(</span><span class="nv">Bank</span>.<span class="nv">coinsInBank</span><span class="p">)</span><span class="s"> coins left&quot;</span>)
</li><li><span class="c">// Prints &quot;The bank now only has 7900 coins left&quot;</span>
</li></ol></div></div></div>
<p>Here, the player has won 2,000 coins. The player’s purse now contains 2,100 coins, and the bank has only 7,900 coins left.</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="nv">playerOne</span> = <span class="k">nil</span>
</li><li><span class="nv">print</span>(<span class="s">&quot;PlayerOne has left the game&quot;</span>)
</li><li><span class="c">// Prints &quot;PlayerOne has left the game&quot;</span>
</li><li><span class="nv">print</span>(<span class="s">&quot;The bank now has </span>\<span class="p">(</span><span class="nv">Bank</span>.<span class="nv">coinsInBank</span><span class="p">)</span><span class="s"> coins&quot;</span>)
</li><li><span class="c">// Prints &quot;The bank now has 10000 coins&quot;</span>
</li></ol></div></div></div>
<p>The player has now left the game. This is indicated by setting the optional <code class="docutils literal notranslate"><span class="pre">playerOne</span></code> variable to <code class="docutils literal notranslate"><span class="pre">nil</span></code>, meaning “no <code class="docutils literal notranslate"><span class="pre">Player</span></code> instance.” At the point that this happens, the <code class="docutils literal notranslate"><span class="pre">playerOne</span></code> variable’s reference to the <code class="docutils literal notranslate"><span class="pre">Player</span></code> instance is broken. No other properties or variables are still referring to the <code class="docutils literal notranslate"><span class="pre">Player</span></code> instance, and so it’s deallocated in order to free up its memory. Just before this happens, its deinitializer is called automatically, and its coins are returned to the bank.</p>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>