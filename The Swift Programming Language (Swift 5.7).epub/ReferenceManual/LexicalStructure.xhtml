<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Lexical Structure</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="lexical-structure">
<h1>Lexical Structure</h1>
<p>The <em>lexical structure</em> of Swift describes what sequence of characters form valid tokens of the language. These valid tokens form the lowest-level building blocks of the language and are used to describe the rest of the language in subsequent chapters. A token consists of an identifier, keyword, punctuation, literal, or operator.</p>
<p>In most cases, tokens are generated from the characters of a Swift source file by considering the longest possible substring from the input text, within the constraints of the grammar that are specified below. This behavior is referred to as <em>longest match</em> or <em>maximal munch</em>.</p>
<div class="section" id="ID411">
<h2>Whitespace and Comments</h2>
<p>Whitespace has two uses: to separate tokens in the source file and to distinguish between prefix, postfix, and infix operators (see <a class="reference internal" href="#ID418"><span class="std std-ref">Operators</span></a>), but is otherwise ignored. The following characters are considered whitespace: space (U+0020), line feed (U+000A), carriage return (U+000D), horizontal tab (U+0009), vertical tab (U+000B), form feed (U+000C) and null (U+0000).</p>
<p>Comments are treated as whitespace by the compiler. Single line comments begin with <code class="docutils literal notranslate"><span class="pre">//</span></code> and continue until a line feed (U+000A) or carriage return (U+000D). Multiline comments begin with <code class="docutils literal notranslate"><span class="pre">/*</span></code> and end with <code class="docutils literal notranslate"><span class="pre">*/</span></code>. Nesting multiline comments is allowed, but the comment markers must be balanced.</p>
<p>Comments can contain additional formatting and markup, as described in <a class="reference external" href="https://developer.apple.com/library/content/documentation/Xcode/Reference/xcode_markup_formatting_ref/index.html">Markup Formatting Reference</a><span class="link-target"> [https://developer.apple.com/library/content/documentation/Xcode/Reference/xcode_markup_formatting_ref/index.html]</span>.</p>
<div class="admonition grammar"><p class="first admonition-title">Grammar of whitespace</p><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_whitespace"></a>whitespace</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_whitespace-item">whitespace-item</a></span>  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_whitespace">whitespace</a></span> <sub>opt</sub></p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_whitespace-item"></a>whitespace-item</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_line-break">line-break</a></span> </p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_whitespace-item_1107"></a>whitespace-item</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_inline-space">inline-space</a></span> </p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_whitespace-item_1108"></a>whitespace-item</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_comment">comment</a></span> </p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_whitespace-item_1109"></a>whitespace-item</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_multiline-comment">multiline-comment</a></span> </p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_whitespace-item_1110"></a>whitespace-item</span><span class="arrow"> → </span> U+0000, U+000B, or U+000C</p></div><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_line-break"></a>line-break</span><span class="arrow"> → </span> U+000A</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_line-break_1111"></a>line-break</span><span class="arrow"> → </span> U+000D</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_line-break_1112"></a>line-break</span><span class="arrow"> → </span> U+000D followed by U+000A</p></div><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_inline-spaces"></a>inline-spaces</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_inline-space">inline-space</a></span>  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_inline-spaces">inline-spaces</a></span> <sub>opt</sub></p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_inline-space"></a>inline-space</span><span class="arrow"> → </span> U+0009 or U+0020</p></div><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_comment"></a>comment</span><span class="arrow"> → </span> <code>//</code> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_comment-text">comment-text</a></span>  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_line-break">line-break</a></span> </p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_multiline-comment"></a>multiline-comment</span><span class="arrow"> → </span> <code>/*</code> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_multiline-comment-text">multiline-comment-text</a></span>  <code>*/</code></p></div><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_comment-text"></a>comment-text</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_comment-text-item">comment-text-item</a></span>  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_comment-text">comment-text</a></span> <sub>opt</sub></p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_comment-text-item"></a>comment-text-item</span><span class="arrow"> → </span> Any Unicode scalar value except U+000A or U+000D</p></div><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_multiline-comment-text"></a>multiline-comment-text</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_multiline-comment-text-item">multiline-comment-text-item</a></span>  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_multiline-comment-text">multiline-comment-text</a></span> <sub>opt</sub></p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_multiline-comment-text-item"></a>multiline-comment-text-item</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_multiline-comment">multiline-comment</a></span> </p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_multiline-comment-text-item_1113"></a>multiline-comment-text-item</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_comment-text-item">comment-text-item</a></span> </p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_multiline-comment-text-item_1114"></a>multiline-comment-text-item</span><span class="arrow"> → </span> Any Unicode scalar value except  <code>/*</code> or  <code>*/</code></p></div></div></div>
<div class="section" id="ID412">
<h2>Identifiers</h2>
<p><em>Identifiers</em> begin with an uppercase or lowercase letter A through Z, an underscore (<code class="docutils literal notranslate"><span class="pre">_</span></code>), a noncombining alphanumeric Unicode character in the Basic Multilingual Plane, or a character outside the Basic Multilingual Plane that isn’t in a Private Use Area. After the first character, digits and combining Unicode characters are also allowed.</p>
<p>Treat identifiers that begin with an underscore as internal, even if their declaration has the <code class="docutils literal notranslate"><span class="pre">public</span></code> access-level modifier. This convention lets framework authors mark part of an API that clients must not interact with or depend on, even though some limitation requires the declaration to be public. In addition, identifiers that begin with two underscores are reserved for the Swift compiler and standard library.</p>
<p>To use a reserved word as an identifier, put a backtick (<code class="docutils literal notranslate"><span class="pre">`</span></code>) before and after it. For example, <code class="docutils literal notranslate"><span class="pre">class</span></code> isn’t a valid identifier, but <code class="docutils literal notranslate"><span class="pre">`class`</span></code> is valid. The backticks aren’t considered part of the identifier; <code class="docutils literal notranslate"><span class="pre">`x`</span></code> and <code class="docutils literal notranslate"><span class="pre">x</span></code> have the same meaning.</p>
<p>Inside a closure with no explicit parameter names, the parameters are implicitly named <code class="docutils literal notranslate"><span class="pre">$0</span></code>, <code class="docutils literal notranslate"><span class="pre">$1</span></code>, <code class="docutils literal notranslate"><span class="pre">$2</span></code>, and so on. These names are valid identifiers within the scope of the closure.</p>
<p>The compiler synthesizes identifiers that begin with a dollar sign (<code class="docutils literal notranslate"><span class="pre">$</span></code>) for properties that have a property wrapper projection. Your code can interact with these identifiers, but you can’t declare identifiers with that prefix. For more information, see the <a class="reference internal" href="Attributes.xhtml#ID621"><span class="std std-ref">propertyWrapper</span></a> section of the <a class="reference internal" href="Attributes.xhtml"><span class="doc">Attributes</span></a> chapter.</p>
<div class="admonition grammar"><p class="first admonition-title">Grammar of an identifier</p><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_identifier"></a>identifier</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_identifier-head">identifier-head</a></span>  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_identifier-characters">identifier-characters</a></span> <sub>opt</sub></p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_identifier_1115"></a>identifier</span><span class="arrow"> → </span> <code>`</code> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_identifier-head">identifier-head</a></span>  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_identifier-characters">identifier-characters</a></span> <sub>opt</sub> <code>`</code></p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_identifier_1116"></a>identifier</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_implicit-parameter-name">implicit-parameter-name</a></span> </p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_identifier_1117"></a>identifier</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_property-wrapper-projection">property-wrapper-projection</a></span> </p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_identifier-list"></a>identifier-list</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_identifier">identifier</a></span>  |  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_identifier">identifier</a></span>  <code>,</code> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_identifier-list">identifier-list</a></span> </p></div><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_identifier-head"></a>identifier-head</span><span class="arrow"> → </span> Upper- or lowercase letter A through Z</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_identifier-head_1118"></a>identifier-head</span><span class="arrow"> → </span> <code>_</code></p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_identifier-head_1119"></a>identifier-head</span><span class="arrow"> → </span> U+00A8, U+00AA, U+00AD, U+00AF, U+00B2–U+00B5, or U+00B7–U+00BA</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_identifier-head_1120"></a>identifier-head</span><span class="arrow"> → </span> U+00BC–U+00BE, U+00C0–U+00D6, U+00D8–U+00F6, or U+00F8–U+00FF</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_identifier-head_1121"></a>identifier-head</span><span class="arrow"> → </span> U+0100–U+02FF, U+0370–U+167F, U+1681–U+180D, or U+180F–U+1DBF</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_identifier-head_1122"></a>identifier-head</span><span class="arrow"> → </span> U+1E00–U+1FFF</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_identifier-head_1123"></a>identifier-head</span><span class="arrow"> → </span> U+200B–U+200D, U+202A–U+202E, U+203F–U+2040, U+2054, or U+2060–U+206F</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_identifier-head_1124"></a>identifier-head</span><span class="arrow"> → </span> U+2070–U+20CF, U+2100–U+218F, U+2460–U+24FF, or U+2776–U+2793</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_identifier-head_1125"></a>identifier-head</span><span class="arrow"> → </span> U+2C00–U+2DFF or U+2E80–U+2FFF</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_identifier-head_1126"></a>identifier-head</span><span class="arrow"> → </span> U+3004–U+3007, U+3021–U+302F, U+3031–U+303F, or U+3040–U+D7FF</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_identifier-head_1127"></a>identifier-head</span><span class="arrow"> → </span> U+F900–U+FD3D, U+FD40–U+FDCF, U+FDF0–U+FE1F, or U+FE30–U+FE44</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_identifier-head_1128"></a>identifier-head</span><span class="arrow"> → </span> U+FE47–U+FFFD</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_identifier-head_1129"></a>identifier-head</span><span class="arrow"> → </span> U+10000–U+1FFFD, U+20000–U+2FFFD, U+30000–U+3FFFD, or U+40000–U+4FFFD</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_identifier-head_1130"></a>identifier-head</span><span class="arrow"> → </span> U+50000–U+5FFFD, U+60000–U+6FFFD, U+70000–U+7FFFD, or U+80000–U+8FFFD</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_identifier-head_1131"></a>identifier-head</span><span class="arrow"> → </span> U+90000–U+9FFFD, U+A0000–U+AFFFD, U+B0000–U+BFFFD, or U+C0000–U+CFFFD</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_identifier-head_1132"></a>identifier-head</span><span class="arrow"> → </span> U+D0000–U+DFFFD or U+E0000–U+EFFFD</p></div><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_identifier-character"></a>identifier-character</span><span class="arrow"> → </span> Digit 0 through 9</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_identifier-character_1133"></a>identifier-character</span><span class="arrow"> → </span> U+0300–U+036F, U+1DC0–U+1DFF, U+20D0–U+20FF, or U+FE20–U+FE2F</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_identifier-character_1134"></a>identifier-character</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_identifier-head">identifier-head</a></span> </p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_identifier-characters"></a>identifier-characters</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_identifier-character">identifier-character</a></span>  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_identifier-characters">identifier-characters</a></span> <sub>opt</sub></p></div><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_implicit-parameter-name"></a>implicit-parameter-name</span><span class="arrow"> → </span> <code>$</code> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_decimal-digits">decimal-digits</a></span> </p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_property-wrapper-projection"></a>property-wrapper-projection</span><span class="arrow"> → </span> <code>$</code> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_identifier-characters">identifier-characters</a></span> </p></div></div></div>
<div class="section" id="ID413">
<h2>Keywords and Punctuation</h2>
<p>The following keywords are reserved and can’t be used as identifiers, unless they’re escaped with backticks, as described above in <a class="reference internal" href="#ID412"><span class="std std-ref">Identifiers</span></a>. Keywords other than <code class="docutils literal notranslate"><span class="pre">inout</span></code>, <code class="docutils literal notranslate"><span class="pre">var</span></code>, and <code class="docutils literal notranslate"><span class="pre">let</span></code> can be used as parameter names in a function declaration or function call without being escaped with backticks. When a member has the same name as a keyword, references to that member don’t need to be escaped with backticks, except when there’s ambiguity between referring to the member and using the keyword—for example, <code class="docutils literal notranslate"><span class="pre">self</span></code>, <code class="docutils literal notranslate"><span class="pre">Type</span></code>, and <code class="docutils literal notranslate"><span class="pre">Protocol</span></code> have special meaning in an explicit member expression, so they must be escaped with backticks in that context.</p>
<ul class="simple">
<li><p>Keywords used in declarations: <code class="docutils literal notranslate"><span class="pre">associatedtype</span></code>, <code class="docutils literal notranslate"><span class="pre">class</span></code>, <code class="docutils literal notranslate"><span class="pre">deinit</span></code>, <code class="docutils literal notranslate"><span class="pre">enum</span></code>, <code class="docutils literal notranslate"><span class="pre">extension</span></code>, <code class="docutils literal notranslate"><span class="pre">fileprivate</span></code>, <code class="docutils literal notranslate"><span class="pre">func</span></code>, <code class="docutils literal notranslate"><span class="pre">import</span></code>, <code class="docutils literal notranslate"><span class="pre">init</span></code>, <code class="docutils literal notranslate"><span class="pre">inout</span></code>, <code class="docutils literal notranslate"><span class="pre">internal</span></code>, <code class="docutils literal notranslate"><span class="pre">let</span></code>, <code class="docutils literal notranslate"><span class="pre">open</span></code>, <code class="docutils literal notranslate"><span class="pre">operator</span></code>, <code class="docutils literal notranslate"><span class="pre">private</span></code>, <code class="docutils literal notranslate"><span class="pre">precedencegroup</span></code>, <code class="docutils literal notranslate"><span class="pre">protocol</span></code>, <code class="docutils literal notranslate"><span class="pre">public</span></code>, <code class="docutils literal notranslate"><span class="pre">rethrows</span></code>, <code class="docutils literal notranslate"><span class="pre">static</span></code>, <code class="docutils literal notranslate"><span class="pre">struct</span></code>, <code class="docutils literal notranslate"><span class="pre">subscript</span></code>, <code class="docutils literal notranslate"><span class="pre">typealias</span></code>, and <code class="docutils literal notranslate"><span class="pre">var</span></code>.</p></li>
</ul>
<ul class="simple">
<li><p>Keywords used in statements: <code class="docutils literal notranslate"><span class="pre">break</span></code>, <code class="docutils literal notranslate"><span class="pre">case</span></code>, <code class="docutils literal notranslate"><span class="pre">catch</span></code>, <code class="docutils literal notranslate"><span class="pre">continue</span></code>, <code class="docutils literal notranslate"><span class="pre">default</span></code>, <code class="docutils literal notranslate"><span class="pre">defer</span></code>, <code class="docutils literal notranslate"><span class="pre">do</span></code>, <code class="docutils literal notranslate"><span class="pre">else</span></code>, <code class="docutils literal notranslate"><span class="pre">fallthrough</span></code>, <code class="docutils literal notranslate"><span class="pre">for</span></code>, <code class="docutils literal notranslate"><span class="pre">guard</span></code>, <code class="docutils literal notranslate"><span class="pre">if</span></code>, <code class="docutils literal notranslate"><span class="pre">in</span></code>, <code class="docutils literal notranslate"><span class="pre">repeat</span></code>, <code class="docutils literal notranslate"><span class="pre">return</span></code>, <code class="docutils literal notranslate"><span class="pre">throw</span></code>, <code class="docutils literal notranslate"><span class="pre">switch</span></code>, <code class="docutils literal notranslate"><span class="pre">where</span></code>, and <code class="docutils literal notranslate"><span class="pre">while</span></code>.</p></li>
<li><p>Keywords used in expressions and types: <code class="docutils literal notranslate"><span class="pre">Any</span></code>, <code class="docutils literal notranslate"><span class="pre">as</span></code>, <code class="docutils literal notranslate"><span class="pre">catch</span></code>, <code class="docutils literal notranslate"><span class="pre">false</span></code>, <code class="docutils literal notranslate"><span class="pre">is</span></code>, <code class="docutils literal notranslate"><span class="pre">nil</span></code>, <code class="docutils literal notranslate"><span class="pre">rethrows</span></code>, <code class="docutils literal notranslate"><span class="pre">self</span></code>, <code class="docutils literal notranslate"><span class="pre">Self</span></code>, <code class="docutils literal notranslate"><span class="pre">super</span></code>, <code class="docutils literal notranslate"><span class="pre">throw</span></code>, <code class="docutils literal notranslate"><span class="pre">throws</span></code>, <code class="docutils literal notranslate"><span class="pre">true</span></code>, and <code class="docutils literal notranslate"><span class="pre">try</span></code>.</p></li>
<li><p>Keywords used in patterns: <code class="docutils literal notranslate"><span class="pre">_</span></code>.</p></li>
<li><p>Keywords that begin with a number sign (<code class="docutils literal notranslate"><span class="pre">#</span></code>): <code class="docutils literal notranslate"><span class="pre">#available</span></code>, <code class="docutils literal notranslate"><span class="pre">#colorLiteral</span></code>, <code class="docutils literal notranslate"><span class="pre">#column</span></code>, <code class="docutils literal notranslate"><span class="pre">#dsohandle</span></code>, <code class="docutils literal notranslate"><span class="pre">#elseif</span></code>, <code class="docutils literal notranslate"><span class="pre">#else</span></code>, <code class="docutils literal notranslate"><span class="pre">#endif</span></code>, <code class="docutils literal notranslate"><span class="pre">#error</span></code>, <code class="docutils literal notranslate"><span class="pre">#fileID</span></code>, <code class="docutils literal notranslate"><span class="pre">#fileLiteral</span></code>, <code class="docutils literal notranslate"><span class="pre">#filePath</span></code>, <code class="docutils literal notranslate"><span class="pre">#file</span></code>, <code class="docutils literal notranslate"><span class="pre">#function</span></code>, <code class="docutils literal notranslate"><span class="pre">#if</span></code>, <code class="docutils literal notranslate"><span class="pre">#imageLiteral</span></code>, <code class="docutils literal notranslate"><span class="pre">#keyPath</span></code>, <code class="docutils literal notranslate"><span class="pre">#line</span></code>, <code class="docutils literal notranslate"><span class="pre">#selector</span></code>, <code class="docutils literal notranslate"><span class="pre">#sourceLocation</span></code>, and <code class="docutils literal notranslate"><span class="pre">#warning</span></code>.</p></li>
</ul>
<ul class="simple">
<li><p>Keywords reserved in particular contexts: <code class="docutils literal notranslate"><span class="pre">associativity</span></code>, <code class="docutils literal notranslate"><span class="pre">convenience</span></code>, <code class="docutils literal notranslate"><span class="pre">didSet</span></code>, <code class="docutils literal notranslate"><span class="pre">dynamic</span></code>, <code class="docutils literal notranslate"><span class="pre">final</span></code>, <code class="docutils literal notranslate"><span class="pre">get</span></code>, <code class="docutils literal notranslate"><span class="pre">indirect</span></code>, <code class="docutils literal notranslate"><span class="pre">infix</span></code>, <code class="docutils literal notranslate"><span class="pre">lazy</span></code>, <code class="docutils literal notranslate"><span class="pre">left</span></code>, <code class="docutils literal notranslate"><span class="pre">mutating</span></code>, <code class="docutils literal notranslate"><span class="pre">none</span></code>, <code class="docutils literal notranslate"><span class="pre">nonmutating</span></code>, <code class="docutils literal notranslate"><span class="pre">optional</span></code>, <code class="docutils literal notranslate"><span class="pre">override</span></code>, <code class="docutils literal notranslate"><span class="pre">postfix</span></code>, <code class="docutils literal notranslate"><span class="pre">precedence</span></code>, <code class="docutils literal notranslate"><span class="pre">prefix</span></code>, <code class="docutils literal notranslate"><span class="pre">Protocol</span></code>, <code class="docutils literal notranslate"><span class="pre">required</span></code>, <code class="docutils literal notranslate"><span class="pre">right</span></code>, <code class="docutils literal notranslate"><span class="pre">set</span></code>, <code class="docutils literal notranslate"><span class="pre">some</span></code>, <code class="docutils literal notranslate"><span class="pre">Type</span></code>, <code class="docutils literal notranslate"><span class="pre">unowned</span></code>, <code class="docutils literal notranslate"><span class="pre">weak</span></code>, and <code class="docutils literal notranslate"><span class="pre">willSet</span></code>. Outside the context in which they appear in the grammar, they can be used as identifiers.</p></li>
</ul>
<p>The following tokens are reserved as punctuation and can’t be used as custom operators: <code class="docutils literal notranslate"><span class="pre">(</span></code>, <code class="docutils literal notranslate"><span class="pre">)</span></code>, <code class="docutils literal notranslate"><span class="pre">{</span></code>, <code class="docutils literal notranslate"><span class="pre">}</span></code>, <code class="docutils literal notranslate"><span class="pre">[</span></code>, <code class="docutils literal notranslate"><span class="pre">]</span></code>, <code class="docutils literal notranslate"><span class="pre">.</span></code>, <code class="docutils literal notranslate"><span class="pre">,</span></code>, <code class="docutils literal notranslate"><span class="pre">:</span></code>, <code class="docutils literal notranslate"><span class="pre">;</span></code>, <code class="docutils literal notranslate"><span class="pre">=</span></code>, <code class="docutils literal notranslate"><span class="pre">&#64;</span></code>, <code class="docutils literal notranslate"><span class="pre">#</span></code>, <code class="docutils literal notranslate"><span class="pre">&amp;</span></code> (as a prefix operator), <code class="docutils literal notranslate"><span class="pre">-&gt;</span></code>, <code class="docutils literal notranslate"><span class="pre">`</span></code>, <code class="docutils literal notranslate"><span class="pre">?</span></code>, and <code class="docutils literal notranslate"><span class="pre">!</span></code> (as a postfix operator).</p>
</div>
<div class="section" id="ID414">
<h2>Literals</h2>
<p>A <em>literal</em> is the source code representation of a value of a type, such as a number or string.</p>
<p>The following are examples of literals:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="m">42</span>               <span class="c">// Integer literal</span>
</li><li><span class="m">3.14159</span>          <span class="c">// Floating-point literal</span>
</li><li><span class="s">&quot;Hello, world!&quot;</span>  <span class="c">// String literal</span>
</li><li>/<span class="nv">Hello</span>, .*/      <span class="c">// Regular expression literal</span>
</li><li><span class="k">true</span>             <span class="c">// Boolean literal</span>
</li></ol></div></div></div>
<p>A literal doesn’t have a type on its own. Instead, a literal is parsed as having infinite precision and Swift’s type inference attempts to infer a type for the literal. For example, in the declaration <code class="docutils literal notranslate"><span class="pre">let</span> <span class="pre">x:</span> <span class="pre">Int8</span> <span class="pre">=</span> <span class="pre">42</span></code>, Swift uses the explicit type annotation (<code class="docutils literal notranslate"><span class="pre">:</span> <span class="pre">Int8</span></code>) to infer that the type of the integer literal <code class="docutils literal notranslate"><span class="pre">42</span></code> is <code class="docutils literal notranslate"><span class="pre">Int8</span></code>. If there isn’t suitable type information available, Swift infers that the literal’s type is one of the default literal types defined in the Swift standard library and listed in the table below. When specifying the type annotation for a literal value, the annotation’s type must be a type that can be instantiated from that literal value. That is, the type must conform to the Swift standard library protocols listed in the table below.</p>
<table class="docutils align-default">
<colgroup>
<col style="width: 19%" />
<col style="width: 12%" />
<col style="width: 69%" />
</colgroup>
<thead>
<tr class="row-odd"><th class="head"><p>Literal</p></th>
<th class="head"><p>Default type</p></th>
<th class="head"><p>Protocol</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p>Integer</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">Int</span></code></p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">ExpressibleByIntegerLiteral</span></code></p></td>
</tr>
<tr class="row-odd"><td><p>Floating-point</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">Double</span></code></p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">ExpressibleByFloatLiteral</span></code></p></td>
</tr>
<tr class="row-even"><td><p>String</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">String</span></code></p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">ExpressibleByStringLiteral</span></code>, <code class="docutils literal notranslate"><span class="pre">ExpressibleByUnicodeScalarLiteral</span></code> for string literals that contain only a single Unicode scalar, <code class="docutils literal notranslate"><span class="pre">ExpressibleByExtendedGraphemeClusterLiteral</span></code> for string literals that contain only a single extended grapheme cluster</p></td>
</tr>
<tr class="row-odd"><td><p>Regular expression</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">Regex</span></code></p></td>
<td><p>None</p></td>
</tr>
<tr class="row-even"><td><p>Boolean</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">Bool</span></code></p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">ExpressibleByBooleanLiteral</span></code></p></td>
</tr>
</tbody>
</table>
<p>For example, in the declaration <code class="docutils literal notranslate"><span class="pre">let</span> <span class="pre">str</span> <span class="pre">=</span> <span class="pre">&quot;Hello,</span> <span class="pre">world&quot;</span></code>, the default inferred type of the string literal <code class="docutils literal notranslate"><span class="pre">&quot;Hello,</span> <span class="pre">world&quot;</span></code> is <code class="docutils literal notranslate"><span class="pre">String</span></code>. Also, <code class="docutils literal notranslate"><span class="pre">Int8</span></code> conforms to the <code class="docutils literal notranslate"><span class="pre">ExpressibleByIntegerLiteral</span></code> protocol, and therefore it can be used in the type annotation for the integer literal <code class="docutils literal notranslate"><span class="pre">42</span></code> in the declaration <code class="docutils literal notranslate"><span class="pre">let</span> <span class="pre">x:</span> <span class="pre">Int8</span> <span class="pre">=</span> <span class="pre">42</span></code>.</p>
<div class="admonition grammar"><p class="first admonition-title">Grammar of a literal</p><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_literal"></a>literal</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_numeric-literal">numeric-literal</a></span>  |  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_string-literal">string-literal</a></span>  |  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_regular-expression-literal">regular-expression-literal</a></span>  |  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_boolean-literal">boolean-literal</a></span>  |  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_nil-literal">nil-literal</a></span> </p></div><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_numeric-literal"></a>numeric-literal</span><span class="arrow"> → </span> <code>-</code><sub>opt</sub> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_integer-literal">integer-literal</a></span>  |  <code>-</code><sub>opt</sub> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_floating-point-literal">floating-point-literal</a></span> </p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_boolean-literal"></a>boolean-literal</span><span class="arrow"> → </span> <code>true</code> |  <code>false</code></p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_nil-literal"></a>nil-literal</span><span class="arrow"> → </span> <code>nil</code></p></div></div><div class="section" id="ID415">
<h3>Integer Literals</h3>
<p><em>Integer literals</em> represent integer values of unspecified precision. By default, integer literals are expressed in decimal; you can specify an alternate base using a prefix. Binary literals begin with <code class="docutils literal notranslate"><span class="pre">0b</span></code>, octal literals begin with <code class="docutils literal notranslate"><span class="pre">0o</span></code>, and hexadecimal literals begin with <code class="docutils literal notranslate"><span class="pre">0x</span></code>.</p>
<p>Decimal literals contain the digits <code class="docutils literal notranslate"><span class="pre">0</span></code> through <code class="docutils literal notranslate"><span class="pre">9</span></code>. Binary literals contain <code class="docutils literal notranslate"><span class="pre">0</span></code> and <code class="docutils literal notranslate"><span class="pre">1</span></code>, octal literals contain <code class="docutils literal notranslate"><span class="pre">0</span></code> through <code class="docutils literal notranslate"><span class="pre">7</span></code>, and hexadecimal literals contain <code class="docutils literal notranslate"><span class="pre">0</span></code> through <code class="docutils literal notranslate"><span class="pre">9</span></code> as well as <code class="docutils literal notranslate"><span class="pre">A</span></code> through <code class="docutils literal notranslate"><span class="pre">F</span></code> in upper- or lowercase.</p>
<p>Negative integers literals are expressed by prepending a minus sign (<code class="docutils literal notranslate"><span class="pre">-</span></code>) to an integer literal, as in <code class="docutils literal notranslate"><span class="pre">-42</span></code>.</p>
<p>Underscores (<code class="docutils literal notranslate"><span class="pre">_</span></code>) are allowed between digits for readability, but they’re ignored and therefore don’t affect the value of the literal. Integer literals can begin with leading zeros (<code class="docutils literal notranslate"><span class="pre">0</span></code>), but they’re likewise ignored and don’t affect the base or value of the literal.</p>
<p>Unless otherwise specified, the default inferred type of an integer literal is the Swift standard library type <code class="docutils literal notranslate"><span class="pre">Int</span></code>. The Swift standard library also defines types for various sizes of signed and unsigned integers, as described in <a class="reference internal" href="../LanguageGuide/TheBasics.xhtml#ID317"><span class="std std-ref">Integers</span></a>.</p>
<div class="admonition grammar"><p class="first admonition-title">Grammar of an integer literal</p><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_integer-literal"></a>integer-literal</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_binary-literal">binary-literal</a></span> </p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_integer-literal_1135"></a>integer-literal</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_octal-literal">octal-literal</a></span> </p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_integer-literal_1136"></a>integer-literal</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_decimal-literal">decimal-literal</a></span> </p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_integer-literal_1137"></a>integer-literal</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_hexadecimal-literal">hexadecimal-literal</a></span> </p></div><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_binary-literal"></a>binary-literal</span><span class="arrow"> → </span> <code>0b</code> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_binary-digit">binary-digit</a></span>  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_binary-literal-characters">binary-literal-characters</a></span> <sub>opt</sub></p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_binary-digit"></a>binary-digit</span><span class="arrow"> → </span> Digit 0 or 1</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_binary-literal-character"></a>binary-literal-character</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_binary-digit">binary-digit</a></span>  |  <code>_</code></p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_binary-literal-characters"></a>binary-literal-characters</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_binary-literal-character">binary-literal-character</a></span>  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_binary-literal-characters">binary-literal-characters</a></span> <sub>opt</sub></p></div><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_octal-literal"></a>octal-literal</span><span class="arrow"> → </span> <code>0o</code> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_octal-digit">octal-digit</a></span>  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_octal-literal-characters">octal-literal-characters</a></span> <sub>opt</sub></p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_octal-digit"></a>octal-digit</span><span class="arrow"> → </span> Digit 0 through 7</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_octal-literal-character"></a>octal-literal-character</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_octal-digit">octal-digit</a></span>  |  <code>_</code></p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_octal-literal-characters"></a>octal-literal-characters</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_octal-literal-character">octal-literal-character</a></span>  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_octal-literal-characters">octal-literal-characters</a></span> <sub>opt</sub></p></div><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_decimal-literal"></a>decimal-literal</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_decimal-digit">decimal-digit</a></span>  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_decimal-literal-characters">decimal-literal-characters</a></span> <sub>opt</sub></p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_decimal-digit"></a>decimal-digit</span><span class="arrow"> → </span> Digit 0 through 9</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_decimal-digits"></a>decimal-digits</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_decimal-digit">decimal-digit</a></span>  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_decimal-digits">decimal-digits</a></span> <sub>opt</sub></p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_decimal-literal-character"></a>decimal-literal-character</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_decimal-digit">decimal-digit</a></span>  |  <code>_</code></p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_decimal-literal-characters"></a>decimal-literal-characters</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_decimal-literal-character">decimal-literal-character</a></span>  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_decimal-literal-characters">decimal-literal-characters</a></span> <sub>opt</sub></p></div><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_hexadecimal-literal"></a>hexadecimal-literal</span><span class="arrow"> → </span> <code>0x</code> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_hexadecimal-digit">hexadecimal-digit</a></span>  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_hexadecimal-literal-characters">hexadecimal-literal-characters</a></span> <sub>opt</sub></p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_hexadecimal-digit"></a>hexadecimal-digit</span><span class="arrow"> → </span> Digit 0 through 9, a through f, or A through F</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_hexadecimal-literal-character"></a>hexadecimal-literal-character</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_hexadecimal-digit">hexadecimal-digit</a></span>  |  <code>_</code></p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_hexadecimal-literal-characters"></a>hexadecimal-literal-characters</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_hexadecimal-literal-character">hexadecimal-literal-character</a></span>  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_hexadecimal-literal-characters">hexadecimal-literal-characters</a></span> <sub>opt</sub></p></div></div></div>
<div class="section" id="ID416">
<h3>Floating-Point Literals</h3>
<p><em>Floating-point literals</em> represent floating-point values of unspecified precision.</p>
<p>By default, floating-point literals are expressed in decimal (with no prefix), but they can also be expressed in hexadecimal (with a <code class="docutils literal notranslate"><span class="pre">0x</span></code> prefix).</p>
<p>Decimal floating-point literals consist of a sequence of decimal digits followed by either a decimal fraction, a decimal exponent, or both. The decimal fraction consists of a decimal point (<code class="docutils literal notranslate"><span class="pre">.</span></code>) followed by a sequence of decimal digits. The exponent consists of an upper- or lowercase <code class="docutils literal notranslate"><span class="pre">e</span></code> prefix followed by a sequence of decimal digits that indicates what power of 10 the value preceding the <code class="docutils literal notranslate"><span class="pre">e</span></code> is multiplied by. For example, <code class="docutils literal notranslate"><span class="pre">1.25e2</span></code> represents 1.25 x 10<sup>2</sup>, which evaluates to <code class="docutils literal notranslate"><span class="pre">125.0</span></code>. Similarly, <code class="docutils literal notranslate"><span class="pre">1.25e-2</span></code> represents 1.25 x 10<sup>-2</sup>, which evaluates to <code class="docutils literal notranslate"><span class="pre">0.0125</span></code>.</p>
<p>Hexadecimal floating-point literals consist of a <code class="docutils literal notranslate"><span class="pre">0x</span></code> prefix, followed by an optional hexadecimal fraction, followed by a hexadecimal exponent. The hexadecimal fraction consists of a decimal point followed by a sequence of hexadecimal digits. The exponent consists of an upper- or lowercase <code class="docutils literal notranslate"><span class="pre">p</span></code> prefix followed by a sequence of decimal digits that indicates what power of 2 the value preceding the <code class="docutils literal notranslate"><span class="pre">p</span></code> is multiplied by. For example, <code class="docutils literal notranslate"><span class="pre">0xFp2</span></code> represents 15 x 2<sup>2</sup>, which evaluates to <code class="docutils literal notranslate"><span class="pre">60</span></code>. Similarly, <code class="docutils literal notranslate"><span class="pre">0xFp-2</span></code> represents 15 x 2<sup>-2</sup>, which evaluates to <code class="docutils literal notranslate"><span class="pre">3.75</span></code>.</p>
<p>Negative floating-point literals are expressed by prepending a minus sign (<code class="docutils literal notranslate"><span class="pre">-</span></code>) to a floating-point literal, as in <code class="docutils literal notranslate"><span class="pre">-42.5</span></code>.</p>
<p>Underscores (<code class="docutils literal notranslate"><span class="pre">_</span></code>) are allowed between digits for readability, but they’re ignored and therefore don’t affect the value of the literal. Floating-point literals can begin with leading zeros (<code class="docutils literal notranslate"><span class="pre">0</span></code>), but they’re likewise ignored and don’t affect the base or value of the literal.</p>
<p>Unless otherwise specified, the default inferred type of a floating-point literal is the Swift standard library type <code class="docutils literal notranslate"><span class="pre">Double</span></code>, which represents a 64-bit floating-point number. The Swift standard library also defines a <code class="docutils literal notranslate"><span class="pre">Float</span></code> type, which represents a 32-bit floating-point number.</p>
<div class="admonition grammar"><p class="first admonition-title">Grammar of a floating-point literal</p><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_floating-point-literal"></a>floating-point-literal</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_decimal-literal">decimal-literal</a></span>  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_decimal-fraction">decimal-fraction</a></span> <sub>opt</sub> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_decimal-exponent">decimal-exponent</a></span> <sub>opt</sub></p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_floating-point-literal_1138"></a>floating-point-literal</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_hexadecimal-literal">hexadecimal-literal</a></span>  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_hexadecimal-fraction">hexadecimal-fraction</a></span> <sub>opt</sub> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_hexadecimal-exponent">hexadecimal-exponent</a></span> </p></div><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_decimal-fraction"></a>decimal-fraction</span><span class="arrow"> → </span> <code>.</code> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_decimal-literal">decimal-literal</a></span> </p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_decimal-exponent"></a>decimal-exponent</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_floating-point-e">floating-point-e</a></span>  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_sign">sign</a></span> <sub>opt</sub> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_decimal-literal">decimal-literal</a></span> </p></div><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_hexadecimal-fraction"></a>hexadecimal-fraction</span><span class="arrow"> → </span> <code>.</code> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_hexadecimal-digit">hexadecimal-digit</a></span>  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_hexadecimal-literal-characters">hexadecimal-literal-characters</a></span> <sub>opt</sub></p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_hexadecimal-exponent"></a>hexadecimal-exponent</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_floating-point-p">floating-point-p</a></span>  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_sign">sign</a></span> <sub>opt</sub> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_decimal-literal">decimal-literal</a></span> </p></div><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_floating-point-e"></a>floating-point-e</span><span class="arrow"> → </span> <code>e</code> |  <code>E</code></p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_floating-point-p"></a>floating-point-p</span><span class="arrow"> → </span> <code>p</code> |  <code>P</code></p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_sign"></a>sign</span><span class="arrow"> → </span> <code>+</code> |  <code>-</code></p></div></div></div>
<div class="section" id="ID417">
<h3>String Literals</h3>
<p>A string literal is a sequence of characters surrounded by quotation marks. A single-line string literal is surrounded by double quotation marks and has the following form:</p>
<div class="syntax-outline highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="s">&quot;</span><span class="gi">characters</span><span class="s">&quot;</span>
</li></ol></div></div></div>
<p>String literals can’t contain an unescaped double quotation mark (<code class="docutils literal notranslate"><span class="pre">&quot;</span></code>), an unescaped backslash (<code class="docutils literal notranslate"><span class="pre">\</span></code>), a carriage return, or a line feed.</p>
<p>A multiline string literal is surrounded by three double quotation marks and has the following form:</p>
<div class="syntax-outline highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="s">&quot;&quot;&quot;</span>
</li><li><span class="gi">characters</span><span class="s"></span>
</li><li><span class="s">&quot;&quot;&quot;</span>
</li></ol></div></div></div>
<p>Unlike a single-line string literal, a multiline string literal can contain unescaped double quotation marks (<code class="docutils literal notranslate"><span class="pre">&quot;</span></code>), carriage returns, and line feeds. It can’t contain three unescaped double quotation marks next to each other.</p>
<p>The line break after the <code class="docutils literal notranslate"><span class="pre">&quot;&quot;&quot;</span></code> that begins the multiline string literal isn’t part of the string. The line break before the <code class="docutils literal notranslate"><span class="pre">&quot;&quot;&quot;</span></code> that ends the literal is also not part of the string. To make a multiline string literal that begins or ends with a line feed, write a blank line as its first or last line.</p>
<p>A multiline string literal can be indented using any combination of spaces and tabs; this indentation isn’t included in the string. The <code class="docutils literal notranslate"><span class="pre">&quot;&quot;&quot;</span></code> that ends the literal determines the indentation: Every nonblank line in the literal must begin with exactly the same indentation that appears before the closing <code class="docutils literal notranslate"><span class="pre">&quot;&quot;&quot;</span></code>; there’s no conversion between tabs and spaces. You can include additional spaces and tabs after that indentation; those spaces and tabs appear in the string.</p>
<p>Line breaks in a multiline string literal are normalized to use the line feed character. Even if your source file has a mix of carriage returns and line feeds, all of the line breaks in the string will be the same.</p>
<p>In a multiline string literal, writing a backslash (<code class="docutils literal notranslate"><span class="pre">\</span></code>) at the end of a line omits that line break from the string. Any whitespace between the backslash and the line break is also omitted. You can use this syntax to hard wrap a multiline string literal in your source code, without changing the value of the resulting string.</p>
<p>Special characters can be included in string literals of both the single-line and multiline forms using the following escape sequences:</p>
<ul class="simple">
<li><p>Null character (<code class="docutils literal notranslate"><span class="pre">\0</span></code>)</p></li>
<li><p>Backslash (<code class="docutils literal notranslate"><span class="pre">\\</span></code>)</p></li>
<li><p>Horizontal tab (<code class="docutils literal notranslate"><span class="pre">\t</span></code>)</p></li>
<li><p>Line feed (<code class="docutils literal notranslate"><span class="pre">\n</span></code>)</p></li>
<li><p>Carriage return (<code class="docutils literal notranslate"><span class="pre">\r</span></code>)</p></li>
<li><p>Double quotation mark (<code class="docutils literal notranslate"><span class="pre">\&quot;</span></code>)</p></li>
<li><p>Single quotation mark (<code class="docutils literal notranslate"><span class="pre">\'</span></code>)</p></li>
<li><p>Unicode scalar (<code class="docutils literal notranslate"><span class="pre">\u{</span></code><em>n</em><code class="docutils literal notranslate"><span class="pre">}</span></code>), where <em>n</em> is a hexadecimal number that has one to eight digits</p></li>
</ul>
<p>The value of an expression can be inserted into a string literal by placing the expression in parentheses after a backslash (<code class="docutils literal notranslate"><span class="pre">\</span></code>). The interpolated expression can contain a string literal, but can’t contain an unescaped backslash, a carriage return, or a line feed.</p>
<p>For example, all of the following string literals have the same value:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="s">&quot;1 2 3&quot;</span>
</li><li><span class="s">&quot;1 2 </span>\<span class="p">(</span><span class="s">&quot;3&quot;</span><span class="p">)</span><span class="s">&quot;</span>
</li><li><span class="s">&quot;1 2 </span>\<span class="p">(</span><span class="m">3</span><span class="p">)</span><span class="s">&quot;</span>
</li><li><span class="s">&quot;1 2 </span>\<span class="p">(</span><span class="m">1</span> + <span class="m">2</span><span class="p">)</span><span class="s">&quot;</span>
</li><li><span class="k">let</span> <span class="nv">x</span> = <span class="m">3</span>; <span class="s">&quot;1 2 </span>\<span class="p">(</span><span class="nv">x</span><span class="p">)</span><span class="s">&quot;</span>
</li></ol></div></div></div>
<p>A string delimited by extended delimiters is a sequence of characters surrounded by quotation marks and a balanced set of one or more number signs (<code class="docutils literal notranslate"><span class="pre">#</span></code>). A string delimited by extended delimiters has the following forms:</p>
<div class="syntax-outline highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="s">#&quot;</span><span class="gi">characters</span><span class="s">&quot;#</span>
</li><li>
</li><li><span class="s">#&quot;&quot;&quot;</span>
</li><li><span class="gi">characters</span><span class="s"></span>
</li><li><span class="s">&quot;&quot;&quot;#</span>
</li></ol></div></div></div>
<p>Special characters in a string delimited by extended delimiters appear in the resulting string as normal characters rather than as special characters. You can use extended delimiters to create strings with characters that would ordinarily have a special effect such as generating a string interpolation, starting an escape sequence, or terminating the string.</p>
<p>The following example shows a string literal and a string delimited by extended delimiters that create equivalent string values:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">let</span> <span class="nv">string</span> = <span class="s">#&quot;\(x) \ &quot; \u{2603}&quot;#</span>
</li><li><span class="k">let</span> <span class="nv">escaped</span> = <span class="s">&quot;\\(x) \\ \&quot; \\u{2603}&quot;</span>
</li><li><span class="nv">print</span>(<span class="nv">string</span>)
</li><li><span class="c">// Prints &quot;\(x) \ &quot; \u{2603}&quot;</span>
</li><li><span class="nv">print</span>(<span class="nv">string</span> == <span class="nv">escaped</span>)
</li><li><span class="c">// Prints &quot;true&quot;</span>
</li></ol></div></div></div>
<p>If you use more than one number sign to form a string delimited by extended delimiters, don’t place whitespace in between the number signs:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="nv">print</span>(<span class="s">###&quot;Line 1\###nLine 2&quot;###</span>) <span class="c">// OK</span>
</li><li><span class="nv">print</span>(# # <span class="s">#&quot;Line 1\# # #nLine 2&quot;#</span> # #) <span class="c">// Error</span>
</li></ol></div></div></div>
<p>Multiline string literals that you create using extended delimiters have the same indentation requirements as regular multiline string literals.</p>
<p>The default inferred type of a string literal is <code class="docutils literal notranslate"><span class="pre">String</span></code>. For more information about the <code class="docutils literal notranslate"><span class="pre">String</span></code> type, see <a class="reference internal" href="../LanguageGuide/StringsAndCharacters.xhtml"><span class="doc">Strings and Characters</span></a> and <a class="reference external" href="https://developer.apple.com/documentation/swift/string"><code class="docutils literal notranslate"><span class="pre">String</span></code></a><span class="link-target"> [https://developer.apple.com/documentation/swift/string]</span>.</p>
<p>String literals that are concatenated by the <code class="docutils literal notranslate"><span class="pre">+</span></code> operator are concatenated at compile time. For example, the values of <code class="docutils literal notranslate"><span class="pre">textA</span></code> and <code class="docutils literal notranslate"><span class="pre">textB</span></code> in the example below are identical—no runtime concatenation is performed.</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">let</span> <span class="nv">textA</span> = <span class="s">&quot;Hello &quot;</span> + <span class="s">&quot;world&quot;</span>
</li><li><span class="k">let</span> <span class="nv">textB</span> = <span class="s">&quot;Hello world&quot;</span>
</li></ol></div></div></div>
<div class="admonition grammar"><p class="first admonition-title">Grammar of a string literal</p><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_string-literal"></a>string-literal</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_static-string-literal">static-string-literal</a></span>  |  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_interpolated-string-literal">interpolated-string-literal</a></span> </p></div><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_string-literal-opening-delimiter"></a>string-literal-opening-delimiter</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_extended-string-literal-delimiter">extended-string-literal-delimiter</a></span> <sub>opt</sub> <code>&quot;</code></p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_string-literal-closing-delimiter"></a>string-literal-closing-delimiter</span><span class="arrow"> → </span> <code>&quot;</code> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_extended-string-literal-delimiter">extended-string-literal-delimiter</a></span> <sub>opt</sub></p></div><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_static-string-literal"></a>static-string-literal</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_string-literal-opening-delimiter">string-literal-opening-delimiter</a></span>  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_quoted-text">quoted-text</a></span> <sub>opt</sub> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_string-literal-closing-delimiter">string-literal-closing-delimiter</a></span> </p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_static-string-literal_1139"></a>static-string-literal</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_multiline-string-literal-opening-delimiter">multiline-string-literal-opening-delimiter</a></span>  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_multiline-quoted-text">multiline-quoted-text</a></span> <sub>opt</sub> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_multiline-string-literal-closing-delimiter">multiline-string-literal-closing-delimiter</a></span> </p></div><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_multiline-string-literal-opening-delimiter"></a>multiline-string-literal-opening-delimiter</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_extended-string-literal-delimiter">extended-string-literal-delimiter</a></span> <sub>opt</sub> <code>&quot;&quot;&quot;</code></p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_multiline-string-literal-closing-delimiter"></a>multiline-string-literal-closing-delimiter</span><span class="arrow"> → </span> <code>&quot;&quot;&quot;</code> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_extended-string-literal-delimiter">extended-string-literal-delimiter</a></span> <sub>opt</sub></p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_extended-string-literal-delimiter"></a>extended-string-literal-delimiter</span><span class="arrow"> → </span> <code>#</code> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_extended-string-literal-delimiter">extended-string-literal-delimiter</a></span> <sub>opt</sub></p></div><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_quoted-text"></a>quoted-text</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_quoted-text-item">quoted-text-item</a></span>  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_quoted-text">quoted-text</a></span> <sub>opt</sub></p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_quoted-text-item"></a>quoted-text-item</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_escaped-character">escaped-character</a></span> </p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_quoted-text-item_1140"></a>quoted-text-item</span><span class="arrow"> → </span> Any Unicode scalar value except  <code>&quot;</code>,  <code>\</code>, U+000A, or U+000D</p></div><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_multiline-quoted-text"></a>multiline-quoted-text</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_multiline-quoted-text-item">multiline-quoted-text-item</a></span>  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_multiline-quoted-text">multiline-quoted-text</a></span> <sub>opt</sub></p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_multiline-quoted-text-item"></a>multiline-quoted-text-item</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_escaped-character">escaped-character</a></span> </p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_multiline-quoted-text-item_1141"></a>multiline-quoted-text-item</span><span class="arrow"> → </span> Any Unicode scalar value except  <code>\</code></p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_multiline-quoted-text-item_1142"></a>multiline-quoted-text-item</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_escaped-newline">escaped-newline</a></span> </p></div><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_interpolated-string-literal"></a>interpolated-string-literal</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_string-literal-opening-delimiter">string-literal-opening-delimiter</a></span>  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_interpolated-text">interpolated-text</a></span> <sub>opt</sub> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_string-literal-closing-delimiter">string-literal-closing-delimiter</a></span> </p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_interpolated-string-literal_1143"></a>interpolated-string-literal</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_multiline-string-literal-opening-delimiter">multiline-string-literal-opening-delimiter</a></span>  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_multiline-interpolated-text">multiline-interpolated-text</a></span> <sub>opt</sub> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_multiline-string-literal-closing-delimiter">multiline-string-literal-closing-delimiter</a></span> </p></div><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_interpolated-text"></a>interpolated-text</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_interpolated-text-item">interpolated-text-item</a></span>  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_interpolated-text">interpolated-text</a></span> <sub>opt</sub></p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_interpolated-text-item"></a>interpolated-text-item</span><span class="arrow"> → </span> <code>\(</code> <span class="syntactic-category"><a href="../ReferenceManual/Expressions.xhtml#grammar_expression">expression</a></span>  <code>)</code> |  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_quoted-text-item">quoted-text-item</a></span> </p></div><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_multiline-interpolated-text"></a>multiline-interpolated-text</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_multiline-interpolated-text-item">multiline-interpolated-text-item</a></span>  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_multiline-interpolated-text">multiline-interpolated-text</a></span> <sub>opt</sub></p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_multiline-interpolated-text-item"></a>multiline-interpolated-text-item</span><span class="arrow"> → </span> <code>\(</code> <span class="syntactic-category"><a href="../ReferenceManual/Expressions.xhtml#grammar_expression">expression</a></span>  <code>)</code> |  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_multiline-quoted-text-item">multiline-quoted-text-item</a></span> </p></div><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_escape-sequence"></a>escape-sequence</span><span class="arrow"> → </span> <code>\</code> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_extended-string-literal-delimiter">extended-string-literal-delimiter</a></span> </p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_escaped-character"></a>escaped-character</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_escape-sequence">escape-sequence</a></span>  <code>0</code> |  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_escape-sequence">escape-sequence</a></span>  <code>\</code> |  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_escape-sequence">escape-sequence</a></span>  <code>t</code> |  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_escape-sequence">escape-sequence</a></span>  <code>n</code> |  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_escape-sequence">escape-sequence</a></span>  <code>r</code> |  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_escape-sequence">escape-sequence</a></span>  <code>&quot;</code> |  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_escape-sequence">escape-sequence</a></span>  <code>'</code></p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_escaped-character_1144"></a>escaped-character</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_escape-sequence">escape-sequence</a></span>  <code>u</code> <code>{</code> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_unicode-scalar-digits">unicode-scalar-digits</a></span>  <code>}</code></p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_unicode-scalar-digits"></a>unicode-scalar-digits</span><span class="arrow"> → </span> Between one and eight hexadecimal digits</p></div><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_escaped-newline"></a>escaped-newline</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_escape-sequence">escape-sequence</a></span>  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_inline-spaces">inline-spaces</a></span> <sub>opt</sub> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_line-break">line-break</a></span> </p></div></div></div>
<div class="section" id="ID650">
<h3>Regular Expression Literals</h3>
<p>A regular expression literal is a sequence of characters surrounded by slashes (<code class="docutils literal notranslate"><span class="pre">/</span></code>) with the following form:</p>
<div class="syntax-outline highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li>/<span class="gi">regular expression</span>/
</li></ol></div></div></div>
<p>Regular expression literals must not begin with an unescaped tab or space, and they can’t contain an unescaped slash (<code class="docutils literal notranslate"><span class="pre">/</span></code>), a carriage return, or a line feed.</p>
<p>Within a regular expression literal, a backslash is understood as a part of that regular expression, not just as an escape character like in string literals. It indicates that the following special character should be interpreted literally, or that the following nonspecial character should be interpreted in a special way. For example, <code class="docutils literal notranslate"><span class="pre">/\(/</span></code> matches a single left parenthesis and <code class="docutils literal notranslate"><span class="pre">/\d/</span></code> matches a single digit.</p>
<p>A regular expression literal delimited by extended delimiters is a sequence of characters surrounded by slashes (<code class="docutils literal notranslate"><span class="pre">/</span></code>) and a balanced set of one or more number signs (<code class="docutils literal notranslate"><span class="pre">#</span></code>). A regular expression literal delimited by extended delimiters has the following forms:</p>
<div class="syntax-outline highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li>#/<span class="gi">regular expression</span>/#
</li><li>
</li><li>#/
</li><li><span class="gi">regular expression</span>
</li><li>/#
</li></ol></div></div></div>
<p>A regular expression literal that uses extended delimiters can begin with an unescaped space or tab, contain unescaped slashes (<code class="docutils literal notranslate"><span class="pre">/</span></code>), and span across multiple lines. For a multiline regular expression literal, the opening delimiter must be at the end of a line, and the closing delimiter must be on its own line. Inside a multiline regular expression literal, the extended regular expression syntax is enabled by default—specifically, whitespace is ignored and comments are allowed.</p>
<p>If you use more than one number sign to form a regular expression literal delimited by extended delimiters, don’t place whitespace in between the number signs:</p>
<div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">let</span> <span class="nv">regex1</span> = ##/<span class="nv">abc</span>/##       <span class="c">// OK</span>
</li><li><span class="k">let</span> <span class="nv">regex2</span> = # #/<span class="nv">abc</span>/# #     <span class="c">// Error</span>
</li></ol></div></div></div>
<p>If you need to make an empty regular expression literal, you must use the extended delimiter syntax.</p>
<div class="admonition grammar"><p class="first admonition-title">Grammar of a regular expression literal</p><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_regular-expression-literal"></a>regular-expression-literal</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_regular-expression-literal-opening-delimiter">regular-expression-literal-opening-delimiter</a></span>  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_regular-expression">regular-expression</a></span>  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_regular-expression-literal-closing-delimiter">regular-expression-literal-closing-delimiter</a></span> </p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_regular-expression"></a>regular-expression</span><span class="arrow"> → </span> Any regular expression</p></div><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_regular-expression-literal-opening-delimiter"></a>regular-expression-literal-opening-delimiter</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_extended-regular-expression-literal-delimiter">extended-regular-expression-literal-delimiter</a></span> <sub>opt</sub> <code>/</code></p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_regular-expression-literal-closing-delimiter"></a>regular-expression-literal-closing-delimiter</span><span class="arrow"> → </span> <code>/</code> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_extended-regular-expression-literal-delimiter">extended-regular-expression-literal-delimiter</a></span> <sub>opt</sub></p></div><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_extended-regular-expression-literal-delimiter"></a>extended-regular-expression-literal-delimiter</span><span class="arrow"> → </span> <code>#</code> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_extended-regular-expression-literal-delimiter">extended-regular-expression-literal-delimiter</a></span> <sub>opt</sub></p></div></div></div>
</div>
<div class="section" id="ID418">
<h2>Operators</h2>
<p>The Swift standard library defines a number of operators for your use, many of which are discussed in <a class="reference internal" href="../LanguageGuide/BasicOperators.xhtml"><span class="doc">Basic Operators</span></a> and <a class="reference internal" href="../LanguageGuide/AdvancedOperators.xhtml"><span class="doc">Advanced Operators</span></a>. The present section describes which characters can be used to define custom operators.</p>
<p>Custom operators can begin with one of the ASCII characters <code class="docutils literal notranslate"><span class="pre">/</span></code>, <code class="docutils literal notranslate"><span class="pre">=</span></code>, <code class="docutils literal notranslate"><span class="pre">-</span></code>, <code class="docutils literal notranslate"><span class="pre">+</span></code>, <code class="docutils literal notranslate"><span class="pre">!</span></code>, <code class="docutils literal notranslate"><span class="pre">*</span></code>, <code class="docutils literal notranslate"><span class="pre">%</span></code>, <code class="docutils literal notranslate"><span class="pre">&lt;</span></code>, <code class="docutils literal notranslate"><span class="pre">&gt;</span></code>, <code class="docutils literal notranslate"><span class="pre">&amp;</span></code>, <code class="docutils literal notranslate"><span class="pre">|</span></code>, <code class="docutils literal notranslate"><span class="pre">^</span></code>, <code class="docutils literal notranslate"><span class="pre">?</span></code>, or <code class="docutils literal notranslate"><span class="pre">~</span></code>, or one of the Unicode characters defined in the grammar below (which include characters from the <em>Mathematical Operators</em>, <em>Miscellaneous Symbols</em>, and <em>Dingbats</em> Unicode blocks, among others). After the first character, combining Unicode characters are also allowed.</p>
<p>You can also define custom operators that begin with a dot (<code class="docutils literal notranslate"><span class="pre">.</span></code>). These operators can contain additional dots. For example, <code class="docutils literal notranslate"><span class="pre">.+.</span></code> is treated as a single operator. If an operator doesn’t begin with a dot, it can’t contain a dot elsewhere. For example, <code class="docutils literal notranslate"><span class="pre">+.+</span></code> is treated as the <code class="docutils literal notranslate"><span class="pre">+</span></code> operator followed by the <code class="docutils literal notranslate"><span class="pre">.+</span></code> operator.</p>
<p>Although you can define custom operators that contain a question mark (<code class="docutils literal notranslate"><span class="pre">?</span></code>), they can’t consist of a single question mark character only. Additionally, although operators can contain an exclamation point (<code class="docutils literal notranslate"><span class="pre">!</span></code>), postfix operators can’t begin with either a question mark or an exclamation point.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>The tokens <code class="docutils literal notranslate"><span class="pre">=</span></code>, <code class="docutils literal notranslate"><span class="pre">-&gt;</span></code>, <code class="docutils literal notranslate"><span class="pre">//</span></code>, <code class="docutils literal notranslate"><span class="pre">/*</span></code>, <code class="docutils literal notranslate"><span class="pre">*/</span></code>, <code class="docutils literal notranslate"><span class="pre">.</span></code>, the prefix operators <code class="docutils literal notranslate"><span class="pre">&lt;</span></code>, <code class="docutils literal notranslate"><span class="pre">&amp;</span></code>, and <code class="docutils literal notranslate"><span class="pre">?</span></code>, the infix operator <code class="docutils literal notranslate"><span class="pre">?</span></code>, and the postfix operators <code class="docutils literal notranslate"><span class="pre">&gt;</span></code>, <code class="docutils literal notranslate"><span class="pre">!</span></code>, and <code class="docutils literal notranslate"><span class="pre">?</span></code> are reserved. These tokens can’t be overloaded, nor can they be used as custom operators.</p>
</div>
<p>The whitespace around an operator is used to determine whether an operator is used as a prefix operator, a postfix operator, or an infix operator. This behavior has the following rules:</p>
<ul class="simple">
<li><p>If an operator has whitespace around both sides or around neither side, it’s treated as an infix operator. As an example, the <code class="docutils literal notranslate"><span class="pre">+++</span></code> operator in <code class="docutils literal notranslate"><span class="pre">a+++b</span></code> and <code class="docutils literal notranslate"><span class="pre">a</span> <span class="pre">+++</span> <span class="pre">b</span></code> is treated as an infix operator.</p></li>
<li><p>If an operator has whitespace on the left side only, it’s treated as a prefix unary operator. As an example, the <code class="docutils literal notranslate"><span class="pre">+++</span></code> operator in <code class="docutils literal notranslate"><span class="pre">a</span> <span class="pre">+++b</span></code> is treated as a prefix unary operator.</p></li>
<li><p>If an operator has whitespace on the right side only, it’s treated as a postfix unary operator. As an example, the <code class="docutils literal notranslate"><span class="pre">+++</span></code> operator in <code class="docutils literal notranslate"><span class="pre">a+++</span> <span class="pre">b</span></code> is treated as a postfix unary operator.</p></li>
<li><p>If an operator has no whitespace on the left but is followed immediately by a dot (<code class="docutils literal notranslate"><span class="pre">.</span></code>), it’s treated as a postfix unary operator. As an example, the <code class="docutils literal notranslate"><span class="pre">+++</span></code> operator in <code class="docutils literal notranslate"><span class="pre">a+++.b</span></code> is treated as a postfix unary operator (<code class="docutils literal notranslate"><span class="pre">a+++</span> <span class="pre">.b</span></code> rather than <code class="docutils literal notranslate"><span class="pre">a</span> <span class="pre">+++</span> <span class="pre">.b</span></code>).</p></li>
</ul>
<p>For the purposes of these rules, the characters <code class="docutils literal notranslate"><span class="pre">(</span></code>, <code class="docutils literal notranslate"><span class="pre">[</span></code>, and <code class="docutils literal notranslate"><span class="pre">{</span></code> before an operator, the characters <code class="docutils literal notranslate"><span class="pre">)</span></code>, <code class="docutils literal notranslate"><span class="pre">]</span></code>, and <code class="docutils literal notranslate"><span class="pre">}</span></code> after an operator, and the characters <code class="docutils literal notranslate"><span class="pre">,</span></code>, <code class="docutils literal notranslate"><span class="pre">;</span></code>, and <code class="docutils literal notranslate"><span class="pre">:</span></code> are also considered whitespace.</p>
<p>If the <code class="docutils literal notranslate"><span class="pre">!</span></code> or <code class="docutils literal notranslate"><span class="pre">?</span></code> predefined operator has no whitespace on the left, it’s treated as a postfix operator, regardless of whether it has whitespace on the right. To use the <code class="docutils literal notranslate"><span class="pre">?</span></code> as the optional-chaining operator, it must not have whitespace on the left. To use it in the ternary conditional (<code class="docutils literal notranslate"><span class="pre">?</span></code> <code class="docutils literal notranslate"><span class="pre">:</span></code>) operator, it must have whitespace around both sides.</p>
<p>If one of the arguments to an infix operator is a regular expression literal, then the operator must have whitespace around both sides.</p>
<p>In certain constructs, operators with a leading <code class="docutils literal notranslate"><span class="pre">&lt;</span></code> or <code class="docutils literal notranslate"><span class="pre">&gt;</span></code> may be split into two or more tokens. The remainder is treated the same way and may be split again. As a result, you don’t need to add whitespace to disambiguate between the closing <code class="docutils literal notranslate"><span class="pre">&gt;</span></code> characters in constructs like <code class="docutils literal notranslate"><span class="pre">Dictionary&lt;String,</span> <span class="pre">Array&lt;Int&gt;&gt;</span></code>. In this example, the closing <code class="docutils literal notranslate"><span class="pre">&gt;</span></code> characters aren’t treated as a single token that may then be misinterpreted as a bit shift <code class="docutils literal notranslate"><span class="pre">&gt;&gt;</span></code> operator.</p>
<p>To learn how to define new, custom operators, see <a class="reference internal" href="../LanguageGuide/AdvancedOperators.xhtml#ID46"><span class="std std-ref">Custom Operators</span></a> and <a class="reference internal" href="Declarations.xhtml#ID380"><span class="std std-ref">Operator Declaration</span></a>. To learn how to overload existing operators, see <a class="reference internal" href="../LanguageGuide/AdvancedOperators.xhtml#ID42"><span class="std std-ref">Operator Methods</span></a>.</p>
<div class="admonition grammar"><p class="first admonition-title">Grammar of operators</p><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_operator"></a>operator</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_operator-head">operator-head</a></span>  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_operator-characters">operator-characters</a></span> <sub>opt</sub></p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_operator_1145"></a>operator</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_dot-operator-head">dot-operator-head</a></span>  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_dot-operator-characters">dot-operator-characters</a></span> </p></div><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_operator-head"></a>operator-head</span><span class="arrow"> → </span> <code>/</code> |  <code>=</code> |  <code>-</code> |  <code>+</code> |  <code>!</code> |  <code>*</code> |  <code>%</code> |  <code>&lt;</code> |  <code>&gt;</code> |  <code>&amp;</code> |  <code>|</code> |  <code>^</code> |  <code>~</code> |  <code>?</code></p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_operator-head_1146"></a>operator-head</span><span class="arrow"> → </span> U+00A1–U+00A7</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_operator-head_1147"></a>operator-head</span><span class="arrow"> → </span> U+00A9 or U+00AB</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_operator-head_1148"></a>operator-head</span><span class="arrow"> → </span> U+00AC or U+00AE</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_operator-head_1149"></a>operator-head</span><span class="arrow"> → </span> U+00B0–U+00B1</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_operator-head_1150"></a>operator-head</span><span class="arrow"> → </span> U+00B6, U+00BB, U+00BF, U+00D7, or U+00F7</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_operator-head_1151"></a>operator-head</span><span class="arrow"> → </span> U+2016–U+2017</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_operator-head_1152"></a>operator-head</span><span class="arrow"> → </span> U+2020–U+2027</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_operator-head_1153"></a>operator-head</span><span class="arrow"> → </span> U+2030–U+203E</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_operator-head_1154"></a>operator-head</span><span class="arrow"> → </span> U+2041–U+2053</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_operator-head_1155"></a>operator-head</span><span class="arrow"> → </span> U+2055–U+205E</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_operator-head_1156"></a>operator-head</span><span class="arrow"> → </span> U+2190–U+23FF</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_operator-head_1157"></a>operator-head</span><span class="arrow"> → </span> U+2500–U+2775</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_operator-head_1158"></a>operator-head</span><span class="arrow"> → </span> U+2794–U+2BFF</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_operator-head_1159"></a>operator-head</span><span class="arrow"> → </span> U+2E00–U+2E7F</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_operator-head_1160"></a>operator-head</span><span class="arrow"> → </span> U+3001–U+3003</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_operator-head_1161"></a>operator-head</span><span class="arrow"> → </span> U+3008–U+3020</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_operator-head_1162"></a>operator-head</span><span class="arrow"> → </span> U+3030</p></div><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_operator-character"></a>operator-character</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_operator-head">operator-head</a></span> </p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_operator-character_1163"></a>operator-character</span><span class="arrow"> → </span> U+0300–U+036F</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_operator-character_1164"></a>operator-character</span><span class="arrow"> → </span> U+1DC0–U+1DFF</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_operator-character_1165"></a>operator-character</span><span class="arrow"> → </span> U+20D0–U+20FF</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_operator-character_1166"></a>operator-character</span><span class="arrow"> → </span> U+FE00–U+FE0F</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_operator-character_1167"></a>operator-character</span><span class="arrow"> → </span> U+FE20–U+FE2F</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_operator-character_1168"></a>operator-character</span><span class="arrow"> → </span> U+E0100–U+E01EF</p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_operator-characters"></a>operator-characters</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_operator-character">operator-character</a></span>  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_operator-characters">operator-characters</a></span> <sub>opt</sub></p></div><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_dot-operator-head"></a>dot-operator-head</span><span class="arrow"> → </span> <code>.</code></p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_dot-operator-character"></a>dot-operator-character</span><span class="arrow"> → </span> <code>.</code> |  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_operator-character">operator-character</a></span> </p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_dot-operator-characters"></a>dot-operator-characters</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_dot-operator-character">dot-operator-character</a></span>  <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_dot-operator-characters">dot-operator-characters</a></span> <sub>opt</sub></p></div><div class="syntax-group"><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_infix-operator"></a>infix-operator</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_operator">operator</a></span> </p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_prefix-operator"></a>prefix-operator</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_operator">operator</a></span> </p><p class="syntax-def"><span class="syntax-def-name"><a id="grammar_postfix-operator"></a>postfix-operator</span><span class="arrow"> → </span> <span class="syntactic-category"><a href="../ReferenceManual/LexicalStructure.xhtml#grammar_operator">operator</a></span> </p></div></div></div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>