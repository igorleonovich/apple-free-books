<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Document Revision History</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="document-revision-history">
<h1>Document Revision History</h1>
<p><strong>2022-09-12</strong></p>
<ul class="simple">
<li><p>Updated for Swift 5.7.</p></li>
<li><p>Added the <a class="reference internal" href="../LanguageGuide/Concurrency.xhtml#ID649"><span class="std std-ref">Sendable Types</span></a> section, with information about sending data between actors and tasks, and added information about the <code class="docutils literal notranslate"><span class="pre">&#64;Sendable</span></code> and <code class="docutils literal notranslate"><span class="pre">&#64;unchecked</span></code> attributes to the <a class="reference internal" href="../ReferenceManual/Attributes.xhtml#ID652"><span class="std std-ref">Sendable</span></a> and <a class="reference internal" href="../ReferenceManual/Attributes.xhtml#ID651"><span class="std std-ref">unchecked</span></a> sections.</p></li>
<li><p>Added the <a class="reference internal" href="../ReferenceManual/LexicalStructure.xhtml#ID650"><span class="std std-ref">Regular Expression Literals</span></a> section with information about creating a regular expression.</p></li>
<li><p>Added information about the short form of <code class="docutils literal notranslate"><span class="pre">if</span></code>-<code class="docutils literal notranslate"><span class="pre">let</span></code> to the <a class="reference internal" href="../LanguageGuide/TheBasics.xhtml#ID333"><span class="std std-ref">Optional Binding</span></a> section.</p></li>
<li><p>Added information about <code class="docutils literal notranslate"><span class="pre">#unavailable</span></code> to the <a class="reference internal" href="../LanguageGuide/ControlFlow.xhtml#ID523"><span class="std std-ref">Checking API Availability</span></a> section.</p></li>
</ul>
<p><strong>2022-03-14</strong></p>
<ul class="simple">
<li><p>Updated for Swift 5.6.</p></li>
<li><p>Updated the <a class="reference internal" href="../ReferenceManual/Expressions.xhtml#ID400"><span class="std std-ref">Explicit Member Expression</span></a> section with information about using <code class="docutils literal notranslate"><span class="pre">#if</span></code> around chained method calls and other postfix expressions.</p></li>
<li><p>Updated the visual styling of figures throughout.</p></li>
</ul>
<p><strong>2021-09-20</strong></p>
<ul class="simple">
<li><p>Updated for Swift 5.5.</p></li>
<li><p>Added information about asynchronous functions, tasks, and actors to the <a class="reference internal" href="../LanguageGuide/Concurrency.xhtml"><span class="doc">Concurrency</span></a> chapter, and to the <a class="reference internal" href="../ReferenceManual/Declarations.xhtml#ID648"><span class="std std-ref">Actor Declaration</span></a>, <a class="reference internal" href="../ReferenceManual/Declarations.xhtml#ID647"><span class="std std-ref">Asynchronous Functions and Methods</span></a>, and <a class="reference internal" href="../ReferenceManual/Expressions.xhtml#ID646"><span class="std std-ref">Await Operator</span></a> sections.</p></li>
<li><p>Updated the <a class="reference internal" href="../ReferenceManual/LexicalStructure.xhtml#ID412"><span class="std std-ref">Identifiers</span></a> section with information about identifiers that start with an underscore.</p></li>
</ul>
<p><strong>2021-04-26</strong></p>
<ul class="simple">
<li><p>Updated for Swift 5.4.</p></li>
<li><p>Added the <a class="reference internal" href="../LanguageGuide/AdvancedOperators.xhtml#ID630"><span class="std std-ref">Result Builders</span></a> and <a class="reference internal" href="../ReferenceManual/Attributes.xhtml#ID633"><span class="std std-ref">resultBuilder</span></a> sections with information about result builders.</p></li>
<li><p>Added the <a class="reference internal" href="../ReferenceManual/Expressions.xhtml#ID632"><span class="std std-ref">Implicit Conversion to a Pointer Type</span></a> section with information about how in-out parameters can be implicitly converted to unsafe pointers in a function call.</p></li>
<li><p>Updated the <a class="reference internal" href="../LanguageGuide/Functions.xhtml#ID171"><span class="std std-ref">Variadic Parameters</span></a> and <a class="reference internal" href="../ReferenceManual/Declarations.xhtml#ID362"><span class="std std-ref">Function Declaration</span></a> sections, now that a function can have multiple variadic parameters.</p></li>
<li><p>Updated the <a class="reference internal" href="../ReferenceManual/Expressions.xhtml#ID394"><span class="std std-ref">Implicit Member Expression</span></a> section, now that implicit member expressions can be chained together.</p></li>
</ul>
<p><strong>2020-09-16</strong></p>
<ul class="simple">
<li><p>Updated for Swift 5.3.</p></li>
<li><p>Added information about multiple trailing closures to the <a class="reference internal" href="../LanguageGuide/Closures.xhtml#ID102"><span class="std std-ref">Trailing Closures</span></a> section, and added information about how trailing closures are matched to parameters to the <a class="reference internal" href="../ReferenceManual/Expressions.xhtml#ID398"><span class="std std-ref">Function Call Expression</span></a> section.</p></li>
<li><p>Added information about synthesized implementations of <code class="docutils literal notranslate"><span class="pre">Comparable</span></code> for enumerations to the <a class="reference internal" href="../LanguageGuide/Protocols.xhtml#ID627"><span class="std std-ref">Adopting a Protocol Using a Synthesized Implementation</span></a> section.</p></li>
<li><p>Added the <a class="reference internal" href="../LanguageGuide/Generics.xhtml#ID628"><span class="std std-ref">Contextual Where Clauses</span></a> section now that you can write a generic <code class="docutils literal notranslate"><span class="pre">where</span></code> clause in more places.</p></li>
<li><p>Added the <a class="reference internal" href="../LanguageGuide/AutomaticReferenceCounting.xhtml#ID625"><span class="std std-ref">Unowned Optional References</span></a> section with information about using unowned references with optional values.</p></li>
<li><p>Added information about the <code class="docutils literal notranslate"><span class="pre">&#64;main</span></code> attribute to the <a class="reference internal" href="../ReferenceManual/Attributes.xhtml#ID626"><span class="std std-ref">main</span></a> section.</p></li>
<li><p>Added <code class="docutils literal notranslate"><span class="pre">#filePath</span></code> to the <a class="reference internal" href="../ReferenceManual/Expressions.xhtml#ID390"><span class="std std-ref">Literal Expression</span></a> section, and updated the discussion of <code class="docutils literal notranslate"><span class="pre">#file</span></code>.</p></li>
<li><p>Updated the <a class="reference internal" href="../LanguageGuide/Closures.xhtml#ID546"><span class="std std-ref">Escaping Closures</span></a> section, now that closures can refer to <code class="docutils literal notranslate"><span class="pre">self</span></code> implicitly in more scenarios.</p></li>
<li><p>Updated the <a class="reference internal" href="../LanguageGuide/ErrorHandling.xhtml#ID541"><span class="std std-ref">Handling Errors Using Do-Catch</span></a> and <a class="reference internal" href="../ReferenceManual/Statements.xhtml#ID533"><span class="std std-ref">Do Statement</span></a> sections, now that a <code class="docutils literal notranslate"><span class="pre">catch</span></code> clause can match against multiple errors.</p></li>
<li><p>Added more information about <code class="docutils literal notranslate"><span class="pre">Any</span></code> and moved it into the new <a class="reference internal" href="../ReferenceManual/Types.xhtml#ID629"><span class="std std-ref">Any Type</span></a> section.</p></li>
<li><p>Updated the <a class="reference internal" href="../LanguageGuide/Properties.xhtml#ID262"><span class="std std-ref">Property Observers</span></a> section, now that lazy properties can have observers.</p></li>
<li><p>Updated the <a class="reference internal" href="../ReferenceManual/Declarations.xhtml#ID369"><span class="std std-ref">Protocol Declaration</span></a> section, now that members of an enumeration can satisfy protocol requirements.</p></li>
<li><p>Updated the <a class="reference internal" href="../ReferenceManual/Declarations.xhtml#ID359"><span class="std std-ref">Stored Variable Observers and Property Observers</span></a> section to describe when the getter is called before the observer.</p></li>
<li><p>Updated the <a class="reference internal" href="../LanguageGuide/MemorySafety.xhtml"><span class="doc">Memory Safety</span></a> chapter to mention atomic operations.</p></li>
</ul>
<p><strong>2020-03-24</strong></p>
<ul class="simple">
<li><p>Updated for Swift 5.2.</p></li>
<li><p>Added information about passing a key path instead of a closure to the <a class="reference internal" href="../ReferenceManual/Expressions.xhtml#ID563"><span class="std std-ref">Key-Path Expression</span></a> section.</p></li>
<li><p>Added the <a class="reference internal" href="../ReferenceManual/Declarations.xhtml#ID622"><span class="std std-ref">Methods with Special Names</span></a> section with information about syntactic sugar the lets instances of classes, structures, and enumerations be used with function call syntax.</p></li>
<li><p>Updated the <a class="reference internal" href="../LanguageGuide/Subscripts.xhtml#ID308"><span class="std std-ref">Subscript Options</span></a> section, now that subscripts support parameters with default values.</p></li>
<li><p>Updated the <a class="reference internal" href="../ReferenceManual/Types.xhtml#ID610"><span class="std std-ref">Self Type</span></a> section, now that the <code class="docutils literal notranslate"><span class="pre">Self</span></code> can be used in more contexts.</p></li>
<li><p>Updated the <a class="reference internal" href="../LanguageGuide/TheBasics.xhtml#ID334"><span class="std std-ref">Implicitly Unwrapped Optionals</span></a> section to make it clearer that an implicitly unwrapped optional value can be used as either an optional or non-optional value.</p></li>
</ul>
<p><strong>2019-09-10</strong></p>
<ul class="simple">
<li><p>Updated for Swift 5.1.</p></li>
<li><p>Added information about functions that specify a protocol that their return value conforms to, instead of providing a specific named return type, to the <a class="reference internal" href="../LanguageGuide/OpaqueTypes.xhtml"><span class="doc">Opaque Types</span></a> chapter.</p></li>
<li><p>Added information about property wrappers to the <a class="reference internal" href="../LanguageGuide/Properties.xhtml#ID617"><span class="std std-ref">Property Wrappers</span></a> section.</p></li>
<li><p>Added information about enumerations and structures that are frozen for library evolution to the <a class="reference internal" href="../ReferenceManual/Attributes.xhtml#ID620"><span class="std std-ref">frozen</span></a> section.</p></li>
<li><p>Added the <a class="reference internal" href="../LanguageGuide/Functions.xhtml#ID607"><span class="std std-ref">Functions With an Implicit Return</span></a> and <a class="reference internal" href="../LanguageGuide/Properties.xhtml#ID608"><span class="std std-ref">Shorthand Getter Declaration</span></a> sections with information about functions that omit <code class="docutils literal notranslate"><span class="pre">return</span></code>.</p></li>
<li><p>Added information about using subscripts on types to the <a class="reference internal" href="../LanguageGuide/Subscripts.xhtml#ID609"><span class="std std-ref">Type Subscripts</span></a> section.</p></li>
<li><p>Updated the <a class="reference internal" href="../ReferenceManual/Patterns.xhtml#ID424"><span class="std std-ref">Enumeration Case Pattern</span></a> section, now that an enumeration case pattern can match an optional value.</p></li>
<li><p>Updated the <a class="reference internal" href="../LanguageGuide/Initialization.xhtml#ID214"><span class="std std-ref">Memberwise Initializers for Structure Types</span></a> section, now that memberwise initializers support omitting parameters for properties that have a default value.</p></li>
<li><p>Added information about dynamic members that are looked up by key path at runtime to the <a class="reference internal" href="../ReferenceManual/Attributes.xhtml#ID585"><span class="std std-ref">dynamicMemberLookup</span></a> section.</p></li>
<li><p>Added <code class="docutils literal notranslate"><span class="pre">macCatalyst</span></code> to the list of target environments in <a class="reference internal" href="../ReferenceManual/Statements.xhtml#ID539"><span class="std std-ref">Conditional Compilation Block</span></a>.</p></li>
<li><p>Updated the <a class="reference internal" href="../ReferenceManual/Types.xhtml#ID610"><span class="std std-ref">Self Type</span></a> section, now that <code class="docutils literal notranslate"><span class="pre">Self</span></code> can be used to refer to the type introduced by the current class, structure, or enumeration declaration.</p></li>
</ul>
<p><strong>2019-03-25</strong></p>
<ul class="simple">
<li><p>Updated for Swift 5.0.</p></li>
<li><p>Added the <a class="reference internal" href="../LanguageGuide/StringsAndCharacters.xhtml#ID606"><span class="std std-ref">Extended String Delimiters</span></a> section and updated the <a class="reference internal" href="../ReferenceManual/LexicalStructure.xhtml#ID417"><span class="std std-ref">String Literals</span></a> section with information about extended string delimiters.</p></li>
<li><p>Added the <a class="reference internal" href="../ReferenceManual/Attributes.xhtml#ID603"><span class="std std-ref">dynamicCallable</span></a> section with information about dynamically calling instances as functions using the <code class="docutils literal notranslate"><span class="pre">dynamicCallable</span></code> attribute.</p></li>
<li><p>Added the <a class="reference internal" href="../ReferenceManual/Attributes.xhtml#ID605"><span class="std std-ref">unknown</span></a> and <a class="reference internal" href="../ReferenceManual/Statements.xhtml#ID602"><span class="std std-ref">Switching Over Future Enumeration Cases</span></a> sections with information about handling future enumeration cases in switch statements using the <code class="docutils literal notranslate"><span class="pre">unknown</span></code> switch case attribute.</p></li>
<li><p>Added information about the identity key path (<code class="docutils literal notranslate"><span class="pre">\.self</span></code>) to the <a class="reference internal" href="../ReferenceManual/Expressions.xhtml#ID563"><span class="std std-ref">Key-Path Expression</span></a> section.</p></li>
<li><p>Added information about using the less than (<code class="docutils literal notranslate"><span class="pre">&lt;</span></code>) operator in platform conditions to the <a class="reference internal" href="../ReferenceManual/Statements.xhtml#ID539"><span class="std std-ref">Conditional Compilation Block</span></a> section.</p></li>
</ul>
<p><strong>2018-09-17</strong></p>
<ul class="simple">
<li><p>Updated for Swift 4.2.</p></li>
<li><p>Added information about accessing all of an enumeration’s cases to the <a class="reference internal" href="../LanguageGuide/Enumerations.xhtml#ID581"><span class="std std-ref">Iterating over Enumeration Cases</span></a> section.</p></li>
<li><p>Added information about <code class="docutils literal notranslate"><span class="pre">#error</span></code> and <code class="docutils literal notranslate"><span class="pre">#warning</span></code> to the <a class="reference internal" href="../ReferenceManual/Statements.xhtml#ID582"><span class="std std-ref">Compile-Time Diagnostic Statement</span></a> section.</p></li>
<li><p>Added information about inlining to the <a class="reference internal" href="../ReferenceManual/Attributes.xhtml#ID348"><span class="std std-ref">Declaration Attributes</span></a> section under the <code class="docutils literal notranslate"><span class="pre">inlinable</span></code> and <code class="docutils literal notranslate"><span class="pre">usableFromInline</span></code> attributes.</p></li>
<li><p>Added information about members that are looked up by name at runtime to the <a class="reference internal" href="../ReferenceManual/Attributes.xhtml#ID348"><span class="std std-ref">Declaration Attributes</span></a> section under the <code class="docutils literal notranslate"><span class="pre">dynamicMemberLookup</span></code> attribute.</p></li>
<li><p>Added information about the <code class="docutils literal notranslate"><span class="pre">requires_stored_property_inits</span></code> and <code class="docutils literal notranslate"><span class="pre">warn_unqualified_access</span></code> attributes to the <a class="reference internal" href="../ReferenceManual/Attributes.xhtml#ID348"><span class="std std-ref">Declaration Attributes</span></a> section.</p></li>
<li><p>Added information about how to conditionally compile code depending on the Swift compiler version being used to the <a class="reference internal" href="../ReferenceManual/Statements.xhtml#ID539"><span class="std std-ref">Conditional Compilation Block</span></a> section.</p></li>
<li><p>Added information about <code class="docutils literal notranslate"><span class="pre">#dsohandle</span></code> to the <a class="reference internal" href="../ReferenceManual/Expressions.xhtml#ID390"><span class="std std-ref">Literal Expression</span></a> section.</p></li>
</ul>
<p><strong>2018-03-29</strong></p>
<ul class="simple">
<li><p>Updated for Swift 4.1.</p></li>
<li><p>Added information about synthesized implementations of equivalence operators to the <a class="reference internal" href="../LanguageGuide/AdvancedOperators.xhtml#ID45"><span class="std std-ref">Equivalence Operators</span></a> section.</p></li>
<li><p>Added information about conditional protocol conformance to the <a class="reference internal" href="../ReferenceManual/Declarations.xhtml#ID378"><span class="std std-ref">Extension Declaration</span></a> section of the <a class="reference internal" href="../ReferenceManual/Declarations.xhtml"><span class="doc">Declarations</span></a> chapter, and to the <a class="reference internal" href="../LanguageGuide/Protocols.xhtml#ID574"><span class="std std-ref">Conditionally Conforming to a Protocol</span></a> section of the <a class="reference internal" href="../LanguageGuide/Protocols.xhtml"><span class="doc">Protocols</span></a> chapter.</p></li>
<li><p>Added information about recursive protocol constraints to the <a class="reference internal" href="../LanguageGuide/Generics.xhtml#ID575"><span class="std std-ref">Using a Protocol in Its Associated Type’s Constraints</span></a> section.</p></li>
<li><p>Added information about the <code class="docutils literal notranslate"><span class="pre">canImport()</span></code> and <code class="docutils literal notranslate"><span class="pre">targetEnvironment()</span></code> platform conditions to <a class="reference internal" href="../ReferenceManual/Statements.xhtml#ID539"><span class="std std-ref">Conditional Compilation Block</span></a>.</p></li>
</ul>
<p><strong>2017-12-04</strong></p>
<ul class="simple">
<li><p>Updated for Swift 4.0.3.</p></li>
<li><p>Updated the <a class="reference internal" href="../ReferenceManual/Expressions.xhtml#ID563"><span class="std std-ref">Key-Path Expression</span></a> section, now that key paths support subscript components.</p></li>
</ul>
<p><strong>2017-09-19</strong></p>
<ul class="simple">
<li><p>Updated for Swift 4.0.</p></li>
<li><p>Added information about exclusive access to memory to the <a class="reference internal" href="../LanguageGuide/MemorySafety.xhtml"><span class="doc">Memory Safety</span></a> chapter.</p></li>
<li><p>Added the <a class="reference internal" href="../LanguageGuide/Generics.xhtml#ID557"><span class="std std-ref">Associated Types with a Generic Where Clause</span></a> section, now that you can use generic <code class="docutils literal notranslate"><span class="pre">where</span></code> clauses to constrain associated types.</p></li>
<li><p>Added information about multiline string literals to the <a class="reference internal" href="../LanguageGuide/StringsAndCharacters.xhtml#ID286"><span class="std std-ref">String Literals</span></a> section of the <a class="reference internal" href="../LanguageGuide/StringsAndCharacters.xhtml"><span class="doc">Strings and Characters</span></a> chapter, and to the <a class="reference internal" href="../ReferenceManual/LexicalStructure.xhtml#ID417"><span class="std std-ref">String Literals</span></a> section of the <a class="reference internal" href="../ReferenceManual/LexicalStructure.xhtml"><span class="doc">Lexical Structure</span></a> chapter.</p></li>
<li><p>Updated the discussion of the <code class="docutils literal notranslate"><span class="pre">objc</span></code> attribute in <a class="reference internal" href="../ReferenceManual/Attributes.xhtml#ID348"><span class="std std-ref">Declaration Attributes</span></a>, now that this attribute is inferred in fewer places.</p></li>
<li><p>Added the <a class="reference internal" href="../LanguageGuide/Generics.xhtml#ID558"><span class="std std-ref">Generic Subscripts</span></a> section, now that subscripts can be generic.</p></li>
<li><p>Updated the discussion in the <a class="reference internal" href="../LanguageGuide/Protocols.xhtml#ID282"><span class="std std-ref">Protocol Composition</span></a> section of the <a class="reference internal" href="../LanguageGuide/Protocols.xhtml"><span class="doc">Protocols</span></a> chapter, and in the <a class="reference internal" href="../ReferenceManual/Types.xhtml#ID454"><span class="std std-ref">Protocol Composition Type</span></a> section of the <a class="reference internal" href="../ReferenceManual/Types.xhtml"><span class="doc">Types</span></a> chapter, now that protocol composition types can contain a superclass requirement.</p></li>
<li><p>Updated the discussion of protocol extensions in <a class="reference internal" href="../ReferenceManual/Declarations.xhtml#ID378"><span class="std std-ref">Extension Declaration</span></a> now that <code class="docutils literal notranslate"><span class="pre">final</span></code> isn’t allowed in them.</p></li>
<li><p>Added information about preconditions and fatal errors to the <a class="reference internal" href="../LanguageGuide/TheBasics.xhtml#ID335"><span class="std std-ref">Assertions and Preconditions</span></a> section.</p></li>
</ul>
<p><strong>2017-03-27</strong></p>
<ul class="simple">
<li><p>Updated for Swift 3.1.</p></li>
<li><p>Added the <a class="reference internal" href="../LanguageGuide/Generics.xhtml#ID553"><span class="std std-ref">Extensions with a Generic Where Clause</span></a> section with information about extensions that include requirements.</p></li>
<li><p>Added examples of iterating over a range to the <a class="reference internal" href="../LanguageGuide/ControlFlow.xhtml#ID121"><span class="std std-ref">For-In Loops</span></a> section.</p></li>
<li><p>Added an example of failable numeric conversions to the <a class="reference internal" href="../LanguageGuide/Initialization.xhtml#ID224"><span class="std std-ref">Failable Initializers</span></a> section.</p></li>
<li><p>Added information to the <a class="reference internal" href="../ReferenceManual/Attributes.xhtml#ID348"><span class="std std-ref">Declaration Attributes</span></a> section about using the <code class="docutils literal notranslate"><span class="pre">available</span></code> attribute with a Swift language version.</p></li>
<li><p>Updated the discussion in the <a class="reference internal" href="../ReferenceManual/Types.xhtml#ID449"><span class="std std-ref">Function Type</span></a> section to note that argument labels aren’t allowed when writing a function type.</p></li>
<li><p>Updated the discussion of Swift language version numbers in the <a class="reference internal" href="../ReferenceManual/Statements.xhtml#ID539"><span class="std std-ref">Conditional Compilation Block</span></a> section, now that an optional patch number is allowed.</p></li>
<li><p>Updated the discussion in the <a class="reference internal" href="../ReferenceManual/Types.xhtml#ID449"><span class="std std-ref">Function Type</span></a> section, now that Swift distinguishes between functions that take multiple parameters and functions that take a single parameter of a tuple type.</p></li>
<li><p>Removed the Dynamic Type Expression section from the <a class="reference internal" href="../ReferenceManual/Expressions.xhtml"><span class="doc">Expressions</span></a> chapter, now that <code class="docutils literal notranslate"><span class="pre">type(of:)</span></code> is a Swift standard library function.</p></li>
</ul>
<p><strong>2016-10-27</strong></p>
<ul class="simple">
<li><p>Updated for Swift 3.0.1.</p></li>
<li><p>Updated the discussion of weak and unowned references in the <a class="reference internal" href="../LanguageGuide/AutomaticReferenceCounting.xhtml"><span class="doc">Automatic Reference Counting</span></a> chapter.</p></li>
<li><p>Added information about the <code class="docutils literal notranslate"><span class="pre">unowned</span></code>, <code class="docutils literal notranslate"><span class="pre">unowned(safe)</span></code>, and <code class="docutils literal notranslate"><span class="pre">unowned(unsafe)</span></code> declaration modifiers in the <a class="reference internal" href="../ReferenceManual/Declarations.xhtml#ID381"><span class="std std-ref">Declaration Modifiers</span></a> section.</p></li>
<li><p>Added a note to the <a class="reference internal" href="../LanguageGuide/TypeCasting.xhtml#ID342"><span class="std std-ref">Type Casting for Any and AnyObject</span></a> section about using an optional value when a value of type <code class="docutils literal notranslate"><span class="pre">Any</span></code> is expected.</p></li>
<li><p>Updated the <a class="reference internal" href="../ReferenceManual/Expressions.xhtml"><span class="doc">Expressions</span></a> chapter to separate the discussion of parenthesized expressions and tuple expressions.</p></li>
</ul>
<p><strong>2016-09-13</strong></p>
<ul class="simple">
<li><p>Updated for Swift 3.0.</p></li>
<li><p>Updated the discussion of functions in the <a class="reference internal" href="../LanguageGuide/Functions.xhtml"><span class="doc">Functions</span></a> chapter and the <a class="reference internal" href="../ReferenceManual/Declarations.xhtml#ID362"><span class="std std-ref">Function Declaration</span></a> section to note that all parameters get an argument label by default.</p></li>
<li><p>Updated the discussion of operators in the <a class="reference internal" href="../LanguageGuide/AdvancedOperators.xhtml"><span class="doc">Advanced Operators</span></a> chapter, now that you implement them as type methods instead of as global functions.</p></li>
<li><p>Added information about the <code class="docutils literal notranslate"><span class="pre">open</span></code> and <code class="docutils literal notranslate"><span class="pre">fileprivate</span></code> access-level modifiers to the <a class="reference internal" href="../LanguageGuide/AccessControl.xhtml"><span class="doc">Access Control</span></a> chapter.</p></li>
<li><p>Updated the discussion of <code class="docutils literal notranslate"><span class="pre">inout</span></code> in the <a class="reference internal" href="../ReferenceManual/Declarations.xhtml#ID362"><span class="std std-ref">Function Declaration</span></a> section to note that it appears in front of a parameter’s type instead of in front of a parameter’s name.</p></li>
<li><p>Updated the discussion of the <code class="docutils literal notranslate"><span class="pre">&#64;noescape</span></code> and <code class="docutils literal notranslate"><span class="pre">&#64;autoclosure</span></code> attributes in the <a class="reference internal" href="../LanguageGuide/Closures.xhtml#ID546"><span class="std std-ref">Escaping Closures</span></a> and <a class="reference internal" href="../LanguageGuide/Closures.xhtml#ID543"><span class="std std-ref">Autoclosures</span></a> sections and the <a class="reference internal" href="../ReferenceManual/Attributes.xhtml"><span class="doc">Attributes</span></a> chapter now that they’re type attributes, rather than declaration attributes.</p></li>
<li><p>Added information about operator precedence groups to the <a class="reference internal" href="../LanguageGuide/AdvancedOperators.xhtml#ID47"><span class="std std-ref">Precedence for Custom Infix Operators</span></a> section of the <a class="reference internal" href="../LanguageGuide/AdvancedOperators.xhtml"><span class="doc">Advanced Operators</span></a> chapter, and to the <a class="reference internal" href="../ReferenceManual/Declarations.xhtml#ID550"><span class="std std-ref">Precedence Group Declaration</span></a> section of the <a class="reference internal" href="../ReferenceManual/Declarations.xhtml"><span class="doc">Declarations</span></a> chapter.</p></li>
<li><p>Updated discussion throughout to use macOS instead of OS X, <code class="docutils literal notranslate"><span class="pre">Error</span></code> instead of <code class="docutils literal notranslate"><span class="pre">ErrorProtocol</span></code>, and protocol names such as <code class="docutils literal notranslate"><span class="pre">ExpressibleByStringLiteral</span></code> instead of <code class="docutils literal notranslate"><span class="pre">StringLiteralConvertible</span></code>.</p></li>
<li><p>Updated the discussion in the <a class="reference internal" href="../LanguageGuide/Generics.xhtml#ID192"><span class="std std-ref">Generic Where Clauses</span></a> section of the <a class="reference internal" href="../LanguageGuide/Generics.xhtml"><span class="doc">Generics</span></a> chapter and in the <a class="reference internal" href="../ReferenceManual/GenericParametersAndArguments.xhtml"><span class="doc">Generic Parameters and Arguments</span></a> chapter, now that generic <code class="docutils literal notranslate"><span class="pre">where</span></code> clauses are written at the end of a declaration.</p></li>
<li><p>Updated the discussion in the <a class="reference internal" href="../LanguageGuide/Closures.xhtml#ID546"><span class="std std-ref">Escaping Closures</span></a> section, now that closures are nonescaping by default.</p></li>
<li><p>Updated the discussion in the <a class="reference internal" href="../LanguageGuide/TheBasics.xhtml#ID333"><span class="std std-ref">Optional Binding</span></a> section of the <a class="reference internal" href="../LanguageGuide/TheBasics.xhtml"><span class="doc">The Basics</span></a> chapter and the <a class="reference internal" href="../ReferenceManual/Statements.xhtml#ID432"><span class="std std-ref">While Statement</span></a> section of the <a class="reference internal" href="../ReferenceManual/Statements.xhtml"><span class="doc">Statements</span></a> chapter, now that <code class="docutils literal notranslate"><span class="pre">if</span></code>, <code class="docutils literal notranslate"><span class="pre">while</span></code>, and <code class="docutils literal notranslate"><span class="pre">guard</span></code> statements use a comma-separated list of conditions without <code class="docutils literal notranslate"><span class="pre">where</span></code> clauses.</p></li>
<li><p>Added information about switch cases that have multiple patterns to the <a class="reference internal" href="../LanguageGuide/ControlFlow.xhtml#ID129"><span class="std std-ref">Switch</span></a> section of the <a class="reference internal" href="../LanguageGuide/ControlFlow.xhtml"><span class="doc">Control Flow</span></a> chapter and the <a class="reference internal" href="../ReferenceManual/Statements.xhtml#ID436"><span class="std std-ref">Switch Statement</span></a> section of the <a class="reference internal" href="../ReferenceManual/Statements.xhtml"><span class="doc">Statements</span></a> chapter.</p></li>
<li><p>Updated the discussion of function types in the <a class="reference internal" href="../ReferenceManual/Types.xhtml#ID449"><span class="std std-ref">Function Type</span></a> section now that function argument labels are no longer part of a function’s type.</p></li>
<li><p>Updated the discussion of protocol composition types in the <a class="reference internal" href="../LanguageGuide/Protocols.xhtml#ID282"><span class="std std-ref">Protocol Composition</span></a> section of the <a class="reference internal" href="../LanguageGuide/Protocols.xhtml"><span class="doc">Protocols</span></a> chapter and in the <a class="reference internal" href="../ReferenceManual/Types.xhtml#ID454"><span class="std std-ref">Protocol Composition Type</span></a> section of the <a class="reference internal" href="../ReferenceManual/Types.xhtml"><span class="doc">Types</span></a> chapter to use the new <code class="docutils literal notranslate"><span class="pre">Protocol1</span> <span class="pre">&amp;</span> <span class="pre">Protocol2</span></code> syntax.</p></li>
<li><p>Updated the discussion in the Dynamic Type Expression section to use the new <code class="docutils literal notranslate"><span class="pre">type(of:)</span></code> syntax for dynamic type expressions.</p></li>
<li><p>Updated the discussion of line control statements to use the <code class="docutils literal notranslate"><span class="pre">#sourceLocation(file:line:)</span></code> syntax in the <a class="reference internal" href="../ReferenceManual/Statements.xhtml#ID540"><span class="std std-ref">Line Control Statement</span></a> section.</p></li>
<li><p>Updated the discussion in <a class="reference internal" href="../ReferenceManual/Declarations.xhtml#ID551"><span class="std std-ref">Functions that Never Return</span></a> to use the new <code class="docutils literal notranslate"><span class="pre">Never</span></code> type.</p></li>
<li><p>Added information about playground literals to the <a class="reference internal" href="../ReferenceManual/Expressions.xhtml#ID390"><span class="std std-ref">Literal Expression</span></a> section.</p></li>
<li><p>Updated the discussion in the <a class="reference internal" href="../ReferenceManual/Declarations.xhtml#ID545"><span class="std std-ref">In-Out Parameters</span></a> section to note that only nonescaping closures can capture in-out parameters.</p></li>
<li><p>Updated the discussion about default parameters in the <a class="reference internal" href="../LanguageGuide/Functions.xhtml#ID169"><span class="std std-ref">Default Parameter Values</span></a> section, now that they can’t be reordered in function calls.</p></li>
<li><p>Updated attribute arguments to use a colon in the <a class="reference internal" href="../ReferenceManual/Attributes.xhtml"><span class="doc">Attributes</span></a> chapter.</p></li>
<li><p>Added information about throwing an error inside the catch block of a rethrowing function to the <a class="reference internal" href="../ReferenceManual/Declarations.xhtml#ID531"><span class="std std-ref">Rethrowing Functions and Methods</span></a> section.</p></li>
<li><p>Added information about accessing the selector of an Objective-C property’s getter or setter to the <a class="reference internal" href="../ReferenceManual/Expressions.xhtml#ID547"><span class="std std-ref">Selector Expression</span></a> section.</p></li>
<li><p>Added information to the <a class="reference internal" href="../ReferenceManual/Declarations.xhtml#ID361"><span class="std std-ref">Type Alias Declaration</span></a> section about generic type aliases and using type aliases inside of protocols.</p></li>
<li><p>Updated the discussion of function types in the <a class="reference internal" href="../ReferenceManual/Types.xhtml#ID449"><span class="std std-ref">Function Type</span></a> section to note that parentheses around the parameter types are required.</p></li>
<li><p>Updated the <a class="reference internal" href="../ReferenceManual/Attributes.xhtml"><span class="doc">Attributes</span></a> chapter to note that the <code class="docutils literal notranslate"><span class="pre">&#64;IBAction</span></code>, <code class="docutils literal notranslate"><span class="pre">&#64;IBOutlet</span></code>, and <code class="docutils literal notranslate"><span class="pre">&#64;NSManaged</span></code> attributes imply the <code class="docutils literal notranslate"><span class="pre">&#64;objc</span></code> attribute.</p></li>
<li><p>Added information about the <code class="docutils literal notranslate"><span class="pre">&#64;GKInspectable</span></code> attribute to the <a class="reference internal" href="../ReferenceManual/Attributes.xhtml#ID348"><span class="std std-ref">Declaration Attributes</span></a> section.</p></li>
<li><p>Updated the discussion of optional protocol requirements in the <a class="reference internal" href="../LanguageGuide/Protocols.xhtml#ID284"><span class="std std-ref">Optional Protocol Requirements</span></a> section to clarify that they’re used only in code that interoperates with Objective-C.</p></li>
<li><p>Removed the discussion of explicitly using <code class="docutils literal notranslate"><span class="pre">let</span></code> in function parameters from the <a class="reference internal" href="../ReferenceManual/Declarations.xhtml#ID362"><span class="std std-ref">Function Declaration</span></a> section.</p></li>
<li><p>Removed the discussion of the <code class="docutils literal notranslate"><span class="pre">Boolean</span></code> protocol from the <a class="reference internal" href="../ReferenceManual/Statements.xhtml"><span class="doc">Statements</span></a> chapter, now that the protocol has been removed from the Swift standard library.</p></li>
<li><p>Corrected the discussion of the <code class="docutils literal notranslate"><span class="pre">&#64;NSApplicationMain</span></code> attribute in the <a class="reference internal" href="../ReferenceManual/Attributes.xhtml#ID348"><span class="std std-ref">Declaration Attributes</span></a> section.</p></li>
</ul>
<p><strong>2016-03-21</strong></p>
<ul class="simple">
<li><p>Updated for Swift 2.2.</p></li>
<li><p>Added information about how to conditionally compile code depending on the version of Swift being used to the <a class="reference internal" href="../ReferenceManual/Statements.xhtml#ID539"><span class="std std-ref">Conditional Compilation Block</span></a> section.</p></li>
<li><p>Added information about how to distinguish between methods or initializers whose names differ only by the names of their arguments to the <a class="reference internal" href="../ReferenceManual/Expressions.xhtml#ID400"><span class="std std-ref">Explicit Member Expression</span></a> section.</p></li>
<li><p>Added information about the <code class="docutils literal notranslate"><span class="pre">#selector</span></code> syntax for Objective-C selectors to the <a class="reference internal" href="../ReferenceManual/Expressions.xhtml#ID547"><span class="std std-ref">Selector Expression</span></a> section.</p></li>
<li><p>Updated the discussion of associated types to use the <code class="docutils literal notranslate"><span class="pre">associatedtype</span></code> keyword in the <a class="reference internal" href="../LanguageGuide/Generics.xhtml#ID189"><span class="std std-ref">Associated Types</span></a> and <a class="reference internal" href="../ReferenceManual/Declarations.xhtml#ID374"><span class="std std-ref">Protocol Associated Type Declaration</span></a> sections.</p></li>
<li><p>Updated information about initializers that return <code class="docutils literal notranslate"><span class="pre">nil</span></code> before the instance is fully initialized in the <a class="reference internal" href="../LanguageGuide/Initialization.xhtml#ID224"><span class="std std-ref">Failable Initializers</span></a> section.</p></li>
<li><p>Added information about comparing tuples to the <a class="reference internal" href="../LanguageGuide/BasicOperators.xhtml#ID70"><span class="std std-ref">Comparison Operators</span></a> section.</p></li>
<li><p>Added information about using keywords as external parameter names to the <a class="reference internal" href="../ReferenceManual/LexicalStructure.xhtml#ID413"><span class="std std-ref">Keywords and Punctuation</span></a> section.</p></li>
<li><p>Updated the discussion of the <code class="docutils literal notranslate"><span class="pre">&#64;objc</span></code> attribute in the <a class="reference internal" href="../ReferenceManual/Attributes.xhtml#ID348"><span class="std std-ref">Declaration Attributes</span></a> section to note that enumerations and enumeration cases can use this attribute.</p></li>
<li><p>Updated the <a class="reference internal" href="../ReferenceManual/LexicalStructure.xhtml#ID418"><span class="std std-ref">Operators</span></a> section with discussion of custom operators that contain a dot.</p></li>
<li><p>Added a note to the <a class="reference internal" href="../ReferenceManual/Declarations.xhtml#ID531"><span class="std std-ref">Rethrowing Functions and Methods</span></a> section that rethrowing functions can’t directly throw errors.</p></li>
<li><p>Added a note to the <a class="reference internal" href="../LanguageGuide/Properties.xhtml#ID262"><span class="std std-ref">Property Observers</span></a> section about property observers being called when you pass a property as an in-out parameter.</p></li>
<li><p>Added a section about error handling to the <a class="reference internal" href="../GuidedTour/GuidedTour.xhtml"><span class="doc">A Swift Tour</span></a> chapter.</p></li>
<li><p>Updated figures in the <a class="reference internal" href="../LanguageGuide/AutomaticReferenceCounting.xhtml#ID53"><span class="std std-ref">Weak References</span></a> section to show the deallocation process more clearly.</p></li>
<li><p>Removed discussion of C-style <code class="docutils literal notranslate"><span class="pre">for</span></code> loops, the <code class="docutils literal notranslate"><span class="pre">++</span></code> prefix and postfix operators, and the <code class="docutils literal notranslate"><span class="pre">--</span></code> prefix and postfix operators.</p></li>
<li><p>Removed discussion of variable function arguments and the special syntax for curried functions.</p></li>
</ul>
<p><strong>2015-10-20</strong></p>
<ul class="simple">
<li><p>Updated for Swift 2.1.</p></li>
<li><p>Updated the <a class="reference internal" href="../LanguageGuide/StringsAndCharacters.xhtml#ID292"><span class="std std-ref">String Interpolation</span></a> and <a class="reference internal" href="../ReferenceManual/LexicalStructure.xhtml#ID417"><span class="std std-ref">String Literals</span></a> sections now that string interpolations can contain string literals.</p></li>
<li><p>Added the <a class="reference internal" href="../LanguageGuide/Closures.xhtml#ID546"><span class="std std-ref">Escaping Closures</span></a> section with information about the <code class="docutils literal notranslate"><span class="pre">&#64;noescape</span></code> attribute.</p></li>
<li><p>Updated the <a class="reference internal" href="../ReferenceManual/Attributes.xhtml#ID348"><span class="std std-ref">Declaration Attributes</span></a> and <a class="reference internal" href="../ReferenceManual/Statements.xhtml#ID539"><span class="std std-ref">Conditional Compilation Block</span></a> sections with information about tvOS.</p></li>
<li><p>Added information about the behavior of in-out parameters to the <a class="reference internal" href="../ReferenceManual/Declarations.xhtml#ID545"><span class="std std-ref">In-Out Parameters</span></a> section.</p></li>
<li><p>Added information to the <a class="reference internal" href="../ReferenceManual/Expressions.xhtml#ID544"><span class="std std-ref">Capture Lists</span></a> section about how values specified in closure capture lists are captured.</p></li>
<li><p>Updated the <a class="reference internal" href="../LanguageGuide/OptionalChaining.xhtml#ID248"><span class="std std-ref">Accessing Properties Through Optional Chaining</span></a> section to clarify how assignment through optional chaining behaves.</p></li>
<li><p>Improved the discussion of autoclosures in the <a class="reference internal" href="../LanguageGuide/Closures.xhtml#ID543"><span class="std std-ref">Autoclosures</span></a> section.</p></li>
<li><p>Added an example that uses the <code class="docutils literal notranslate"><span class="pre">??</span></code> operator to the <a class="reference internal" href="../GuidedTour/GuidedTour.xhtml"><span class="doc">A Swift Tour</span></a> chapter.</p></li>
</ul>
<p><strong>2015-09-16</strong></p>
<ul class="simple">
<li><p>Updated for Swift 2.0.</p></li>
<li><p>Added information about error handling to the <a class="reference internal" href="../LanguageGuide/ErrorHandling.xhtml"><span class="doc">Error Handling</span></a> chapter, the <a class="reference internal" href="../ReferenceManual/Statements.xhtml#ID533"><span class="std std-ref">Do Statement</span></a> section, the <a class="reference internal" href="../ReferenceManual/Statements.xhtml#ID518"><span class="std std-ref">Throw Statement</span></a> section, the <a class="reference internal" href="../ReferenceManual/Statements.xhtml#ID532"><span class="std std-ref">Defer Statement</span></a> section, and the <a class="reference internal" href="../ReferenceManual/Expressions.xhtml#ID516"><span class="std std-ref">Try Operator</span></a> section.</p></li>
<li><p>Updated the <a class="reference internal" href="../LanguageGuide/ErrorHandling.xhtml#ID509"><span class="std std-ref">Representing and Throwing Errors</span></a> section, now that all types can conform to the <code class="docutils literal notranslate"><span class="pre">ErrorType</span></code> protocol.</p></li>
<li><p>Added information about the new <code class="docutils literal notranslate"><span class="pre">try?</span></code> keyword to the <a class="reference internal" href="../LanguageGuide/ErrorHandling.xhtml#ID542"><span class="std std-ref">Converting Errors to Optional Values</span></a> section.</p></li>
<li><p>Added information about recursive enumerations to the <a class="reference internal" href="../LanguageGuide/Enumerations.xhtml#ID536"><span class="std std-ref">Recursive Enumerations</span></a> section of the <a class="reference internal" href="../LanguageGuide/Enumerations.xhtml"><span class="doc">Enumerations</span></a> chapter and the <a class="reference internal" href="../ReferenceManual/Declarations.xhtml#ID365"><span class="std std-ref">Enumerations with Cases of Any Type</span></a> section of the <a class="reference internal" href="../ReferenceManual/Declarations.xhtml"><span class="doc">Declarations</span></a> chapter.</p></li>
<li><p>Added information about API availability checking to the <a class="reference internal" href="../LanguageGuide/ControlFlow.xhtml#ID523"><span class="std std-ref">Checking API Availability</span></a> section of the <a class="reference internal" href="../LanguageGuide/ControlFlow.xhtml"><span class="doc">Control Flow</span></a> chapter and the <a class="reference internal" href="../ReferenceManual/Statements.xhtml#ID522"><span class="std std-ref">Availability Condition</span></a> section of the <a class="reference internal" href="../ReferenceManual/Statements.xhtml"><span class="doc">Statements</span></a> chapter.</p></li>
<li><p>Added information about the new <code class="docutils literal notranslate"><span class="pre">guard</span></code> statement to the <a class="reference internal" href="../LanguageGuide/ControlFlow.xhtml#ID525"><span class="std std-ref">Early Exit</span></a> section of the <a class="reference internal" href="../LanguageGuide/ControlFlow.xhtml"><span class="doc">Control Flow</span></a> chapter and the <a class="reference internal" href="../ReferenceManual/Statements.xhtml#ID524"><span class="std std-ref">Guard Statement</span></a> section of the <a class="reference internal" href="../ReferenceManual/Statements.xhtml"><span class="doc">Statements</span></a> chapter.</p></li>
<li><p>Added information about protocol extensions to the <a class="reference internal" href="../LanguageGuide/Protocols.xhtml#ID521"><span class="std std-ref">Protocol Extensions</span></a> section of the <a class="reference internal" href="../LanguageGuide/Protocols.xhtml"><span class="doc">Protocols</span></a> chapter.</p></li>
<li><p>Added information about access control for unit testing to the <a class="reference internal" href="../LanguageGuide/AccessControl.xhtml#ID519"><span class="std std-ref">Access Levels for Unit Test Targets</span></a> section of the <a class="reference internal" href="../LanguageGuide/AccessControl.xhtml"><span class="doc">Access Control</span></a> chapter.</p></li>
<li><p>Added information about the new optional pattern to the <a class="reference internal" href="../ReferenceManual/Patterns.xhtml#ID520"><span class="std std-ref">Optional Pattern</span></a> section of the <a class="reference internal" href="../ReferenceManual/Patterns.xhtml"><span class="doc">Patterns</span></a> chapter.</p></li>
<li><p>Updated the <a class="reference internal" href="../LanguageGuide/ControlFlow.xhtml#ID126"><span class="std std-ref">Repeat-While</span></a> section with information about the <code class="docutils literal notranslate"><span class="pre">repeat</span></code>-<code class="docutils literal notranslate"><span class="pre">while</span></code> loop.</p></li>
<li><p>Updated the <a class="reference internal" href="../LanguageGuide/StringsAndCharacters.xhtml"><span class="doc">Strings and Characters</span></a> chapter, now that <code class="docutils literal notranslate"><span class="pre">String</span></code> no longer conforms to the <code class="docutils literal notranslate"><span class="pre">CollectionType</span></code> protocol from the Swift standard library.</p></li>
<li><p>Added information about the new Swift standard library <code class="docutils literal notranslate"><span class="pre">print(_:separator:terminator)</span></code> function to the <a class="reference internal" href="../LanguageGuide/TheBasics.xhtml#ID314"><span class="std std-ref">Printing Constants and Variables</span></a> section.</p></li>
<li><p>Added information about the behavior of enumeration cases with <code class="docutils literal notranslate"><span class="pre">String</span></code> raw values to the <a class="reference internal" href="../LanguageGuide/Enumerations.xhtml#ID535"><span class="std std-ref">Implicitly Assigned Raw Values</span></a> section of the <a class="reference internal" href="../LanguageGuide/Enumerations.xhtml"><span class="doc">Enumerations</span></a> chapter and the <a class="reference internal" href="../ReferenceManual/Declarations.xhtml#ID366"><span class="std std-ref">Enumerations with Cases of a Raw-Value Type</span></a> section of the <a class="reference internal" href="../ReferenceManual/Declarations.xhtml"><span class="doc">Declarations</span></a> chapter.</p></li>
<li><p>Added information about the <code class="docutils literal notranslate"><span class="pre">&#64;autoclosure</span></code> attribute—including its <code class="docutils literal notranslate"><span class="pre">&#64;autoclosure(escaping)</span></code> form—to the <a class="reference internal" href="../LanguageGuide/Closures.xhtml#ID543"><span class="std std-ref">Autoclosures</span></a> section.</p></li>
<li><p>Updated the <a class="reference internal" href="../ReferenceManual/Attributes.xhtml#ID348"><span class="std std-ref">Declaration Attributes</span></a> section with information about the <code class="docutils literal notranslate"><span class="pre">&#64;available</span></code> and <code class="docutils literal notranslate"><span class="pre">&#64;warn_unused_result</span></code> attributes.</p></li>
<li><p>Updated the <a class="reference internal" href="../ReferenceManual/Attributes.xhtml#ID350"><span class="std std-ref">Type Attributes</span></a> section with information about the <code class="docutils literal notranslate"><span class="pre">&#64;convention</span></code> attribute.</p></li>
<li><p>Added an example of using multiple optional bindings with a <code class="docutils literal notranslate"><span class="pre">where</span></code> clause to the <a class="reference internal" href="../LanguageGuide/TheBasics.xhtml#ID333"><span class="std std-ref">Optional Binding</span></a> section.</p></li>
<li><p>Added information to the <a class="reference internal" href="../ReferenceManual/LexicalStructure.xhtml#ID417"><span class="std std-ref">String Literals</span></a> section about how concatenating string literals using the <code class="docutils literal notranslate"><span class="pre">+</span></code> operator happens at compile time.</p></li>
<li><p>Added information to the <a class="reference internal" href="../ReferenceManual/Types.xhtml#ID455"><span class="std std-ref">Metatype Type</span></a> section about comparing metatype values and using them to construct instances with initializer expressions.</p></li>
<li><p>Added a note to the <a class="reference internal" href="../LanguageGuide/TheBasics.xhtml#ID336"><span class="std std-ref">Debugging with Assertions</span></a> section about when user-defined assertions are disabled.</p></li>
<li><p>Updated the discussion of the <code class="docutils literal notranslate"><span class="pre">&#64;NSManaged</span></code> attribute in the <a class="reference internal" href="../ReferenceManual/Attributes.xhtml#ID348"><span class="std std-ref">Declaration Attributes</span></a> section, now that the attribute can be applied to certain instance methods.</p></li>
<li><p>Updated the <a class="reference internal" href="../LanguageGuide/Functions.xhtml#ID171"><span class="std std-ref">Variadic Parameters</span></a> section, now that variadic parameters can be declared in any position in a function’s parameter list.</p></li>
<li><p>Added information to the <a class="reference internal" href="../LanguageGuide/Initialization.xhtml#ID229"><span class="std std-ref">Overriding a Failable Initializer</span></a> section about how a nonfailable initializer can delegate up to a failable initializer by force-unwrapping the result of the superclass’s initializer.</p></li>
<li><p>Added information about using enumeration cases as functions to the <a class="reference internal" href="../ReferenceManual/Declarations.xhtml#ID365"><span class="std std-ref">Enumerations with Cases of Any Type</span></a> section.</p></li>
<li><p>Added information about explicitly referencing an initializer to the <a class="reference internal" href="../ReferenceManual/Expressions.xhtml#ID399"><span class="std std-ref">Initializer Expression</span></a> section.</p></li>
<li><p>Added information about build configuration and line control statements to the <a class="reference internal" href="../ReferenceManual/Statements.xhtml#ID538"><span class="std std-ref">Compiler Control Statements</span></a> section.</p></li>
<li><p>Added a note to the <a class="reference internal" href="../ReferenceManual/Types.xhtml#ID455"><span class="std std-ref">Metatype Type</span></a> section about constructing class instances from metatype values.</p></li>
<li><p>Added a note to the <a class="reference internal" href="../LanguageGuide/AutomaticReferenceCounting.xhtml#ID53"><span class="std std-ref">Weak References</span></a> section about weak references being unsuitable for caching.</p></li>
<li><p>Updated a note in the <a class="reference internal" href="../LanguageGuide/Properties.xhtml#ID264"><span class="std std-ref">Type Properties</span></a> section to mention that stored type properties are lazily initialized.</p></li>
<li><p>Updated the <a class="reference internal" href="../LanguageGuide/Closures.xhtml#ID103"><span class="std std-ref">Capturing Values</span></a> section to clarify how variables and constants are captured in closures.</p></li>
<li><p>Updated the <a class="reference internal" href="../ReferenceManual/Attributes.xhtml#ID348"><span class="std std-ref">Declaration Attributes</span></a> section to describe when you can apply the <code class="docutils literal notranslate"><span class="pre">&#64;objc</span></code> attribute to classes.</p></li>
<li><p>Added a note to the <a class="reference internal" href="../LanguageGuide/ErrorHandling.xhtml#ID512"><span class="std std-ref">Handling Errors</span></a> section about the performance of executing a <code class="docutils literal notranslate"><span class="pre">throw</span></code> statement. Added similar information about the <code class="docutils literal notranslate"><span class="pre">do</span></code> statement in the <a class="reference internal" href="../ReferenceManual/Statements.xhtml#ID533"><span class="std std-ref">Do Statement</span></a> section.</p></li>
<li><p>Updated the <a class="reference internal" href="../LanguageGuide/Properties.xhtml#ID264"><span class="std std-ref">Type Properties</span></a> section with information about stored and computed type properties for classes, structures, and enumerations.</p></li>
<li><p>Updated the <a class="reference internal" href="../ReferenceManual/Statements.xhtml#ID441"><span class="std std-ref">Break Statement</span></a> section with information about labeled break statements.</p></li>
<li><p>Updated a note in the <a class="reference internal" href="../LanguageGuide/Properties.xhtml#ID262"><span class="std std-ref">Property Observers</span></a> section to clarify the behavior of <code class="docutils literal notranslate"><span class="pre">willSet</span></code> and <code class="docutils literal notranslate"><span class="pre">didSet</span></code> observers.</p></li>
<li><p>Added a note to the <a class="reference internal" href="../LanguageGuide/AccessControl.xhtml#ID5"><span class="std std-ref">Access Levels</span></a> section with information about the scope of <code class="docutils literal notranslate"><span class="pre">private</span></code> access.</p></li>
<li><p>Added a note to the <a class="reference internal" href="../LanguageGuide/AutomaticReferenceCounting.xhtml#ID53"><span class="std std-ref">Weak References</span></a> section about the differences in weak references between garbage collected systems and ARC.</p></li>
<li><p>Updated the <a class="reference internal" href="../LanguageGuide/StringsAndCharacters.xhtml#ID295"><span class="std std-ref">Special Characters in String Literals</span></a> section with a more precise definition of Unicode scalars.</p></li>
</ul>
<p><strong>2015-04-08</strong></p>
<ul class="simple">
<li><p>Updated for Swift 1.2.</p></li>
<li><p>Swift now has a native <code class="docutils literal notranslate"><span class="pre">Set</span></code> collection type. For more information, see <a class="reference internal" href="../LanguageGuide/CollectionTypes.xhtml#ID484"><span class="std std-ref">Sets</span></a>.</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">&#64;autoclosure</span></code> is now an attribute of the parameter declaration, not its type. There’s also a new <code class="docutils literal notranslate"><span class="pre">&#64;noescape</span></code> parameter declaration attribute. For more information, see <a class="reference internal" href="../ReferenceManual/Attributes.xhtml#ID348"><span class="std std-ref">Declaration Attributes</span></a>.</p></li>
<li><p>Type methods and properties now use the <code class="docutils literal notranslate"><span class="pre">static</span></code> keyword as a declaration modifier. For more information see <a class="reference internal" href="../ReferenceManual/Declarations.xhtml#ID483"><span class="std std-ref">Type Variable Properties</span></a>.</p></li>
<li><p>Swift now includes the <code class="docutils literal notranslate"><span class="pre">as?</span></code> and <code class="docutils literal notranslate"><span class="pre">as!</span></code> failable downcast operators. For more information, see <a class="reference internal" href="../LanguageGuide/Protocols.xhtml#ID283"><span class="std std-ref">Checking for Protocol Conformance</span></a>.</p></li>
<li><p>Added a new guide section about <a class="reference internal" href="../LanguageGuide/StringsAndCharacters.xhtml#ID534"><span class="std std-ref">String Indices</span></a>.</p></li>
<li><p>Removed the overflow division (<code class="docutils literal notranslate"><span class="pre">&amp;/</span></code>) and overflow remainder (<code class="docutils literal notranslate"><span class="pre">&amp;%</span></code>) operators from <a class="reference internal" href="../LanguageGuide/AdvancedOperators.xhtml#ID37"><span class="std std-ref">Overflow Operators</span></a>.</p></li>
<li><p>Updated the rules for constant and constant property declaration and initialization. For more information, see <a class="reference internal" href="../ReferenceManual/Declarations.xhtml#ID355"><span class="std std-ref">Constant Declaration</span></a>.</p></li>
<li><p>Updated the definition of Unicode scalars in string literals. See <a class="reference internal" href="../LanguageGuide/StringsAndCharacters.xhtml#ID295"><span class="std std-ref">Special Characters in String Literals</span></a>.</p></li>
<li><p>Updated <a class="reference internal" href="../LanguageGuide/BasicOperators.xhtml#ID73"><span class="std std-ref">Range Operators</span></a> to note that a half-open range with the same start and end index will be empty.</p></li>
<li><p>Updated <a class="reference internal" href="../LanguageGuide/Closures.xhtml#ID104"><span class="std std-ref">Closures Are Reference Types</span></a> to clarify the capturing rules for variables.</p></li>
<li><p>Updated <a class="reference internal" href="../LanguageGuide/AdvancedOperators.xhtml#ID38"><span class="std std-ref">Value Overflow</span></a> to clarify the overflow behavior of signed and unsigned integers</p></li>
<li><p>Updated <a class="reference internal" href="../ReferenceManual/Declarations.xhtml#ID369"><span class="std std-ref">Protocol Declaration</span></a> to clarify protocol declaration scope and members.</p></li>
<li><p>Updated <a class="reference internal" href="../LanguageGuide/AutomaticReferenceCounting.xhtml#ID58"><span class="std std-ref">Defining a Capture List</span></a> to clarify the syntax for weak and unowned references in closure capture lists.</p></li>
<li><p>Updated <a class="reference internal" href="../ReferenceManual/LexicalStructure.xhtml#ID418"><span class="std std-ref">Operators</span></a> to explicitly mention examples of supported characters for custom operators, such as those in the Mathematical Operators, Miscellaneous Symbols, and Dingbats Unicode blocks.</p></li>
<li><p>Constants can now be declared without being initialized in local function scope. They must have a set value before first use. For more information, see <a class="reference internal" href="../ReferenceManual/Declarations.xhtml#ID355"><span class="std std-ref">Constant Declaration</span></a>.</p></li>
<li><p>In an initializer, constant properties can now only assign a value once. For more information, see <a class="reference internal" href="../LanguageGuide/Initialization.xhtml#ID212"><span class="std std-ref">Assigning Constant Properties During Initialization</span></a>.</p></li>
<li><p>Multiple optional bindings can now appear in a single <code class="docutils literal notranslate"><span class="pre">if</span></code> statement as a comma-separated list of assignment expressions. For more information, see <a class="reference internal" href="../LanguageGuide/TheBasics.xhtml#ID333"><span class="std std-ref">Optional Binding</span></a>.</p></li>
<li><p>An <a class="reference internal" href="../ReferenceManual/Expressions.xhtml#ID405"><span class="std std-ref">Optional-Chaining Expression</span></a> must appear within a postfix expression.</p></li>
<li><p>Protocol casts are no longer limited to <code class="docutils literal notranslate"><span class="pre">&#64;objc</span></code> protocols.</p></li>
<li><p>Type casts that can fail at runtime now use the <code class="docutils literal notranslate"><span class="pre">as?</span></code> or <code class="docutils literal notranslate"><span class="pre">as!</span></code> operator, and type casts that are guaranteed not to fail use the <code class="docutils literal notranslate"><span class="pre">as</span></code> operator. For more information, see <a class="reference internal" href="../ReferenceManual/Expressions.xhtml#ID388"><span class="std std-ref">Type-Casting Operators</span></a>.</p></li>
</ul>
<p><strong>2014-10-16</strong></p>
<ul class="simple">
<li><p>Updated for Swift 1.1.</p></li>
<li><p>Added a full guide to <a class="reference internal" href="../LanguageGuide/Initialization.xhtml#ID224"><span class="std std-ref">Failable Initializers</span></a>.</p></li>
<li><p>Added a description of <a class="reference internal" href="../LanguageGuide/Protocols.xhtml#ID274"><span class="std std-ref">Failable Initializer Requirements</span></a> for protocols.</p></li>
<li><p>Constants and variables of type <code class="docutils literal notranslate"><span class="pre">Any</span></code> can now contain function instances. Updated the example in <a class="reference internal" href="../LanguageGuide/TypeCasting.xhtml#ID342"><span class="std std-ref">Type Casting for Any and AnyObject</span></a> to show how to check for and cast to a function type within a <code class="docutils literal notranslate"><span class="pre">switch</span></code> statement.</p></li>
<li><p>Enumerations with raw values now have a <code class="docutils literal notranslate"><span class="pre">rawValue</span></code> property rather than a <code class="docutils literal notranslate"><span class="pre">toRaw()</span></code> method and a failable initializer with a <code class="docutils literal notranslate"><span class="pre">rawValue</span></code> parameter rather than a <code class="docutils literal notranslate"><span class="pre">fromRaw()</span></code> method. For more information, see <a class="reference internal" href="../LanguageGuide/Enumerations.xhtml#ID149"><span class="std std-ref">Raw Values</span></a> and <a class="reference internal" href="../ReferenceManual/Declarations.xhtml#ID366"><span class="std std-ref">Enumerations with Cases of a Raw-Value Type</span></a>.</p></li>
<li><p>Added a new reference section about <a class="reference internal" href="../ReferenceManual/Declarations.xhtml#ID376"><span class="std std-ref">Failable Initializers</span></a>, which can trigger initialization failure.</p></li>
<li><p>Custom operators can now contain the <code class="docutils literal notranslate"><span class="pre">?</span></code> character. Updated the <a class="reference internal" href="../ReferenceManual/LexicalStructure.xhtml#ID418"><span class="std std-ref">Operators</span></a> reference to describe the revised rules. Removed a duplicate description of the valid set of operator characters from <a class="reference internal" href="../LanguageGuide/AdvancedOperators.xhtml#ID46"><span class="std std-ref">Custom Operators</span></a>.</p></li>
</ul>
<p><strong>2014-08-18</strong></p>
<ul class="simple">
<li><p>New document that describes Swift 1.0, Apple’s new programming language for building iOS and OS X apps.</p></li>
<li><p>Added a new section about <a class="reference internal" href="../LanguageGuide/Protocols.xhtml#ID272"><span class="std std-ref">Initializer Requirements</span></a> in protocols.</p></li>
<li><p>Added a new section about <a class="reference internal" href="../LanguageGuide/Protocols.xhtml#ID281"><span class="std std-ref">Class-Only Protocols</span></a>.</p></li>
<li><p><a class="reference internal" href="../LanguageGuide/TheBasics.xhtml#ID335"><span class="std std-ref">Assertions and Preconditions</span></a> can now use string interpolation. Removed a note to the contrary.</p></li>
<li><p>Updated the <a class="reference internal" href="../LanguageGuide/StringsAndCharacters.xhtml#ID291"><span class="std std-ref">Concatenating Strings and Characters</span></a> section to reflect the fact that <code class="docutils literal notranslate"><span class="pre">String</span></code> and <code class="docutils literal notranslate"><span class="pre">Character</span></code> values can no longer be combined with the addition operator (<code class="docutils literal notranslate"><span class="pre">+</span></code>) or addition assignment operator (<code class="docutils literal notranslate"><span class="pre">+=</span></code>). These operators are now used only with <code class="docutils literal notranslate"><span class="pre">String</span></code> values. Use the <code class="docutils literal notranslate"><span class="pre">String</span></code> type’s <code class="docutils literal notranslate"><span class="pre">append(_:)</span></code> method to append a single <code class="docutils literal notranslate"><span class="pre">Character</span></code> value onto the end of a string.</p></li>
<li><p>Added information about the <code class="docutils literal notranslate"><span class="pre">availability</span></code> attribute to the <a class="reference internal" href="../ReferenceManual/Attributes.xhtml#ID348"><span class="std std-ref">Declaration Attributes</span></a> section.</p></li>
<li><p><a class="reference internal" href="../LanguageGuide/TheBasics.xhtml#ID330"><span class="std std-ref">Optionals</span></a> no longer implicitly evaluate to <code class="docutils literal notranslate"><span class="pre">true</span></code> when they have a value and <code class="docutils literal notranslate"><span class="pre">false</span></code> when they do not, to avoid confusion when working with optional <code class="docutils literal notranslate"><span class="pre">Bool</span></code> values. Instead, make an explicit check against <code class="docutils literal notranslate"><span class="pre">nil</span></code> with the <code class="docutils literal notranslate"><span class="pre">==</span></code> or <code class="docutils literal notranslate"><span class="pre">!=</span></code> operators to find out if an optional contains a value.</p></li>
<li><p>Swift now has a <a class="reference internal" href="../LanguageGuide/BasicOperators.xhtml#ID72"><span class="std std-ref">Nil-Coalescing Operator</span></a> (<code class="docutils literal notranslate"><span class="pre">a</span> <span class="pre">??</span> <span class="pre">b</span></code>), which unwraps an optional’s value if it exists, or returns a default value if the optional is <code class="docutils literal notranslate"><span class="pre">nil</span></code>.</p></li>
<li><p>Updated and expanded the <a class="reference internal" href="../LanguageGuide/StringsAndCharacters.xhtml#ID298"><span class="std std-ref">Comparing Strings</span></a> section to reflect and demonstrate that string and character comparison and prefix / suffix comparison are now based on Unicode canonical equivalence of extended grapheme clusters.</p></li>
<li><p>You can now try to set a property’s value, assign to a subscript, or call a mutating method or operator through <a class="reference internal" href="../LanguageGuide/OptionalChaining.xhtml"><span class="doc">Optional Chaining</span></a>. The information about <a class="reference internal" href="../LanguageGuide/OptionalChaining.xhtml#ID248"><span class="std std-ref">Accessing Properties Through Optional Chaining</span></a> has been updated accordingly, and the examples of checking for method call success in <a class="reference internal" href="../LanguageGuide/OptionalChaining.xhtml#ID249"><span class="std std-ref">Calling Methods Through Optional Chaining</span></a> have been expanded to show how to check for property setting success.</p></li>
<li><p>Added a new section about <a class="reference internal" href="../LanguageGuide/OptionalChaining.xhtml#ID251"><span class="std std-ref">Accessing Subscripts of Optional Type</span></a> through optional chaining.</p></li>
<li><p>Updated the <a class="reference internal" href="../LanguageGuide/CollectionTypes.xhtml#ID110"><span class="std std-ref">Accessing and Modifying an Array</span></a> section to note that you can no longer append a single item to an array with the <code class="docutils literal notranslate"><span class="pre">+=</span></code> operator. Instead, use the <code class="docutils literal notranslate"><span class="pre">append(_:)</span></code> method, or append a single-item array with the <code class="docutils literal notranslate"><span class="pre">+=</span></code> operator.</p></li>
<li><p>Added a note that the start value <code class="docutils literal notranslate"><span class="pre">a</span></code> for the <a class="reference internal" href="../LanguageGuide/BasicOperators.xhtml#ID73"><span class="std std-ref">Range Operators</span></a> <code class="docutils literal notranslate"><span class="pre">a...b</span></code> and <code class="docutils literal notranslate"><span class="pre">a..&lt;b</span></code> must not be greater than the end value <code class="docutils literal notranslate"><span class="pre">b</span></code>.</p></li>
<li><p>Rewrote the <a class="reference internal" href="../LanguageGuide/Inheritance.xhtml"><span class="doc">Inheritance</span></a> chapter to remove its introductory coverage of initializer overrides. This chapter now focuses more on the addition of new functionality in a subclass, and the modification of existing functionality with overrides. The chapter’s example of <a class="reference internal" href="../LanguageGuide/Inheritance.xhtml#ID200"><span class="std std-ref">Overriding Property Getters and Setters</span></a> has been rewritten to show how to override a <code class="docutils literal notranslate"><span class="pre">description</span></code> property. (The examples of modifying an inherited property’s default value in a subclass initializer have been moved to the <a class="reference internal" href="../LanguageGuide/Initialization.xhtml"><span class="doc">Initialization</span></a> chapter.)</p></li>
<li><p>Updated the <a class="reference internal" href="../LanguageGuide/Initialization.xhtml#ID221"><span class="std std-ref">Initializer Inheritance and Overriding</span></a> section to note that overrides of a designated initializer must now be marked with the <code class="docutils literal notranslate"><span class="pre">override</span></code> modifier.</p></li>
<li><p>Updated the <a class="reference internal" href="../LanguageGuide/Initialization.xhtml#ID231"><span class="std std-ref">Required Initializers</span></a> section to note that the <code class="docutils literal notranslate"><span class="pre">required</span></code> modifier is now written before every subclass implementation of a required initializer, and that the requirements for required initializers can now be satisfied by automatically inherited initializers.</p></li>
<li><p>Infix <a class="reference internal" href="../LanguageGuide/AdvancedOperators.xhtml#ID42"><span class="std std-ref">Operator Methods</span></a> no longer require the <code class="docutils literal notranslate"><span class="pre">&#64;infix</span></code> attribute.</p></li>
<li><p>The <code class="docutils literal notranslate"><span class="pre">&#64;prefix</span></code> and <code class="docutils literal notranslate"><span class="pre">&#64;postfix</span></code> attributes for <a class="reference internal" href="../LanguageGuide/AdvancedOperators.xhtml#ID43"><span class="std std-ref">Prefix and Postfix Operators</span></a> have been replaced by <code class="docutils literal notranslate"><span class="pre">prefix</span></code> and <code class="docutils literal notranslate"><span class="pre">postfix</span></code> declaration modifiers.</p></li>
<li><p>Added a note about the order in which <a class="reference internal" href="../LanguageGuide/AdvancedOperators.xhtml#ID43"><span class="std std-ref">Prefix and Postfix Operators</span></a> are applied when both a prefix and a postfix operator are applied to the same operand.</p></li>
<li><p>Operator functions for <a class="reference internal" href="../LanguageGuide/AdvancedOperators.xhtml#ID44"><span class="std std-ref">Compound Assignment Operators</span></a> no longer use the <code class="docutils literal notranslate"><span class="pre">&#64;assignment</span></code> attribute when defining the function.</p></li>
<li><p>The order in which modifiers are specified when defining <a class="reference internal" href="../LanguageGuide/AdvancedOperators.xhtml#ID46"><span class="std std-ref">Custom Operators</span></a> has changed. You now write <code class="docutils literal notranslate"><span class="pre">prefix</span> <span class="pre">operator</span></code> rather than <code class="docutils literal notranslate"><span class="pre">operator</span> <span class="pre">prefix</span></code>, for example.</p></li>
<li><p>Added information about the <code class="docutils literal notranslate"><span class="pre">dynamic</span></code> declaration modifier in <a class="reference internal" href="../ReferenceManual/Declarations.xhtml#ID381"><span class="std std-ref">Declaration Modifiers</span></a>.</p></li>
<li><p>Added information about how type inference works with <a class="reference internal" href="../ReferenceManual/LexicalStructure.xhtml#ID414"><span class="std std-ref">Literals</span></a>.</p></li>
<li><p>Added more information about curried functions.</p></li>
<li><p>Added a new chapter about <a class="reference internal" href="../LanguageGuide/AccessControl.xhtml"><span class="doc">Access Control</span></a>.</p></li>
<li><p>Updated the <a class="reference internal" href="../LanguageGuide/StringsAndCharacters.xhtml"><span class="doc">Strings and Characters</span></a> chapter to reflect the fact that Swift’s <code class="docutils literal notranslate"><span class="pre">Character</span></code> type now represents a single Unicode extended grapheme cluster. Includes a new section on <a class="reference internal" href="../LanguageGuide/StringsAndCharacters.xhtml#ID296"><span class="std std-ref">Extended Grapheme Clusters</span></a> and more information about <a class="reference internal" href="../LanguageGuide/StringsAndCharacters.xhtml#ID294"><span class="std std-ref">Unicode Scalar Values</span></a> and <a class="reference internal" href="../LanguageGuide/StringsAndCharacters.xhtml#ID298"><span class="std std-ref">Comparing Strings</span></a>.</p></li>
<li><p>Updated the <a class="reference internal" href="../LanguageGuide/StringsAndCharacters.xhtml#ID286"><span class="std std-ref">String Literals</span></a> section to note that Unicode scalars inside string literals are now written as <code class="docutils literal notranslate"><span class="pre">\u{n}</span></code>, where <code class="docutils literal notranslate"><span class="pre">n</span></code> is a hexadecimal number between 0 and 10FFFF, the range of Unicode’s codespace.</p></li>
<li><p>The <code class="docutils literal notranslate"><span class="pre">NSString</span></code> <code class="docutils literal notranslate"><span class="pre">length</span></code> property is now mapped onto Swift’s native <code class="docutils literal notranslate"><span class="pre">String</span></code> type as <code class="docutils literal notranslate"><span class="pre">utf16Count</span></code>, not <code class="docutils literal notranslate"><span class="pre">utf16count</span></code>.</p></li>
<li><p>Swift’s native <code class="docutils literal notranslate"><span class="pre">String</span></code> type no longer has an <code class="docutils literal notranslate"><span class="pre">uppercaseString</span></code> or <code class="docutils literal notranslate"><span class="pre">lowercaseString</span></code> property. The corresponding section in <a class="reference internal" href="../LanguageGuide/StringsAndCharacters.xhtml"><span class="doc">Strings and Characters</span></a> has been removed, and various code examples have been updated.</p></li>
<li><p>Added a new section about <a class="reference internal" href="../LanguageGuide/Initialization.xhtml#ID210"><span class="std std-ref">Initializer Parameters Without Argument Labels</span></a>.</p></li>
<li><p>Added a new section about <a class="reference internal" href="../LanguageGuide/Initialization.xhtml#ID231"><span class="std std-ref">Required Initializers</span></a>.</p></li>
<li><p>Added a new section about <a class="reference internal" href="../LanguageGuide/Functions.xhtml#ID165"><span class="std std-ref">Optional Tuple Return Types</span></a>.</p></li>
<li><p>Updated the <a class="reference internal" href="../LanguageGuide/TheBasics.xhtml#ID312"><span class="std std-ref">Type Annotations</span></a> section to note that multiple related variables can be defined on a single line with one type annotation.</p></li>
<li><p>The <code class="docutils literal notranslate"><span class="pre">&#64;optional</span></code>, <code class="docutils literal notranslate"><span class="pre">&#64;lazy</span></code>, <code class="docutils literal notranslate"><span class="pre">&#64;final</span></code>, and <code class="docutils literal notranslate"><span class="pre">&#64;required</span></code> attributes are now the <code class="docutils literal notranslate"><span class="pre">optional</span></code>, <code class="docutils literal notranslate"><span class="pre">lazy</span></code>, <code class="docutils literal notranslate"><span class="pre">final</span></code>, and <code class="docutils literal notranslate"><span class="pre">required</span></code> <a class="reference internal" href="../ReferenceManual/Declarations.xhtml#ID381"><span class="std std-ref">Declaration Modifiers</span></a>.</p></li>
<li><p>Updated the entire book to refer to <code class="docutils literal notranslate"><span class="pre">..&lt;</span></code> as the <a class="reference internal" href="../LanguageGuide/BasicOperators.xhtml#ID75"><span class="std std-ref">Half-Open Range Operator</span></a> (rather than the “half-closed range operator”).</p></li>
<li><p>Updated the <a class="reference internal" href="../LanguageGuide/CollectionTypes.xhtml#ID116"><span class="std std-ref">Accessing and Modifying a Dictionary</span></a> section to note that <code class="docutils literal notranslate"><span class="pre">Dictionary</span></code> now has a Boolean <code class="docutils literal notranslate"><span class="pre">isEmpty</span></code> property.</p></li>
<li><p>Clarified the full list of characters that can be used when defining <a class="reference internal" href="../LanguageGuide/AdvancedOperators.xhtml#ID46"><span class="std std-ref">Custom Operators</span></a>.</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">nil</span></code> and the Booleans <code class="docutils literal notranslate"><span class="pre">true</span></code> and <code class="docutils literal notranslate"><span class="pre">false</span></code> are now <a class="reference internal" href="../ReferenceManual/LexicalStructure.xhtml#ID414"><span class="std std-ref">Literals</span></a>.</p></li>
<li><p>Swift’s <code class="docutils literal notranslate"><span class="pre">Array</span></code> type now has full value semantics. Updated the information about <a class="reference internal" href="../LanguageGuide/CollectionTypes.xhtml#ID106"><span class="std std-ref">Mutability of Collections</span></a> and <a class="reference internal" href="../LanguageGuide/CollectionTypes.xhtml#ID107"><span class="std std-ref">Arrays</span></a> to reflect the new approach. Also clarified the assignment and copy behavior for strings arrays and dictionaries.</p></li>
<li><p><a class="reference internal" href="../LanguageGuide/CollectionTypes.xhtml#ID108"><span class="std std-ref">Array Type Shorthand Syntax</span></a> is now written as <code class="docutils literal notranslate"><span class="pre">[SomeType]</span></code> rather than <code class="docutils literal notranslate"><span class="pre">SomeType[]</span></code>.</p></li>
<li><p>Added a new section about <a class="reference internal" href="../LanguageGuide/CollectionTypes.xhtml#ID114"><span class="std std-ref">Dictionary Type Shorthand Syntax</span></a>, which is written as <code class="docutils literal notranslate"><span class="pre">[KeyType:</span> <span class="pre">ValueType]</span></code>.</p></li>
<li><p>Added a new section about <a class="reference internal" href="../LanguageGuide/CollectionTypes.xhtml#ID493"><span class="std std-ref">Hash Values for Set Types</span></a>.</p></li>
<li><p>Examples of <a class="reference internal" href="../LanguageGuide/Closures.xhtml#ID95"><span class="std std-ref">Closure Expressions</span></a> now use the global <code class="docutils literal notranslate"><span class="pre">sorted(_:_:)</span></code> function rather than the global <code class="docutils literal notranslate"><span class="pre">sort(_:_:)</span></code> function, to reflect the new array value semantics.</p></li>
<li><p>Updated the information about <a class="reference internal" href="../LanguageGuide/Initialization.xhtml#ID214"><span class="std std-ref">Memberwise Initializers for Structure Types</span></a> to clarify that the memberwise structure initializer is made available even if a structure’s stored properties don’t have default values.</p></li>
<li><p>Updated to <code class="docutils literal notranslate"><span class="pre">..&lt;</span></code> rather than <code class="docutils literal notranslate"><span class="pre">..</span></code> for the <a class="reference internal" href="../LanguageGuide/BasicOperators.xhtml#ID75"><span class="std std-ref">Half-Open Range Operator</span></a>.</p></li>
<li><p>Added an example of <a class="reference internal" href="../LanguageGuide/Generics.xhtml#ID185"><span class="std std-ref">Extending a Generic Type</span></a>.</p></li>
</ul>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>