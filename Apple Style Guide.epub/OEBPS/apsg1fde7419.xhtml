<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" lang="en" xml:lang="en"><head><meta charset="UTF-8" /><title>Technical notation</title><link href="stylesheet.css" rel="stylesheet" type="text/css" /></head><body dir="ltr" id="apsg1fde7419" class="Section epub"><figure class="chapterIcon" style="max-width:120px;"><img src="GlobalArt/IC_Chapter5.png" alt="" height="120" width="120" /></figure><h1>Technical notation</h1><article id="apsgf72184e0"><div class="heading-nobreak"><h2>Intro to technical notation</h2><p>This chapter gives special style and usage rules that apply largely or exclusively to developer documentation.</p></div><p>When writing about a particular programming language, be careful to follow the capitalization style of that language.</p></article><article id="apsg1fde748e"><div class="heading-nobreak"><h2>Code</h2><p>Use code font for code.</p></div><p>Develop a method of spacing around punctuation and use the method consistently. It’s often best to use “English-style” spacing (one space character between words) because it’s easy to remember and to stick with.</p><div class="Example"><p><code>(height, width: extended; quo: integer); PageSize = 1024</code></p></div></article><article id="apsg1fde7568"><div class="heading-nobreak"><h2>Syntax descriptions</h2><p>Use code font for literals (parts of the language, values, and so on), italics for placeholder names, and regular text for the brackets that enclose something that’s optional. Pay close attention to punctuation.</p></div><div class="Example"><p><code>Read (</code>[<em>file, </em>] <em>var</em><code>)</code></p></div><p>Use embedded caps to connect words that act as a single placeholder name (<em>sourceFile</em>).</p><p>Be consistent when naming placeholders; for example, don’t alternate between <em>commands</em> and <em>commandList</em>.</p></article><article id="apsg1fde73a3"><div class="heading-nobreak"><h2>Code font in text</h2><p>Most developer documentation uses code font for computer-language elements in text. Whether to use code font in text for other documents is a matter of judgment.</p></div><ul><li><p>Use code font for all text fragments that represent expressions in a programming language.</p></li><li><p>Use code font for names of files, volumes, directories, and libraries.</p><div class="Example"><p><code>StandardCRuntime.o</code> library</p><p><code>MainProg.c</code> file</p></div></li><li><p>Don’t use a function or method name as a verb.</p><div class="Example"><p><em>Correct:</em> Run <code>ls</code> on both directories.</p><p><em>Incorrect: </em>ls both directories.</p><p><em>Correct: </em>Use <code>cd</code> to change to the root directory.</p><p><em>Incorrect: </em>cd to the root directory.</p></div></li><li><p>Don’t mix fonts within a single word. Rewrite to avoid forming the plural of a word in code font.</p><div class="Example"><p><em>Correct: </em>values of type <code>integer</code></p><p><em>Incorrect: </em><code>integer</code>s</p></div></li><li><p>Use regular text font, not code font, for punctuation following a word or phrase in code font, unless the punctuation mark is part of the computer-language element represented.</p><div class="Example"><p><code>NAN(004)</code>, <code>nan(4)</code>, and <code>NaN</code> are examples of acceptable input.</p></div></li></ul></article><article id="apsg1fde72a8"><div class="heading-nobreak"><h2>Placeholder names in text</h2><p>In running text, use italics when referring to a placeholder name (that is, an artificial term that has meaning only in your documentation and is to be replaced by a value or symbol). Spell the name just as it would appear in a syntax description. Don’t use a placeholder as you would use a regular English term.</p></div><div class="Example"><p><em>Correct: </em>Replace <em>volumeName</em> with a name of up to 12 characters.</p><p><em>Correct: </em>The volume name can be up to 12 characters long.</p><p><em>Incorrect: </em>The volumeName can be up to 12 characters long.</p></div><p>Avoid <em>foo</em>, <em>bar</em>, and <em>baz</em> to represent hierarchical or ordered placeholder names in code examples. Instead, use names that suggest the kind of item.</p><div class="Example"><p><code>TObject.</code><em>FirstMethod</em></p><p><code>TObject.</code><em>SecondMethod</em></p></div></article></body></html>